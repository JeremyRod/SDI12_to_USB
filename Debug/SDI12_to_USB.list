
SDI12_to_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004498  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08004558  08004558  00005558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004648  08004648  00006184  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004648  08004648  00006184  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004648  08004648  00006184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004648  08004648  00005648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800464c  0800464c  0000564c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  08004650  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e74  20000184  080047d4  00006184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ff8  080047d4  00006ff8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ee4  00000000  00000000  000061ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000322f  00000000  00000000  0001a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000807e  00000000  00000000  0001d2bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  00025340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000adc  00000000  00000000  00025f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000125a3  00000000  00000000  00026a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000158e3  00000000  00000000  00038fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000626c5  00000000  00000000  0004e88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b0f4f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ce8  00000000  00000000  000b0f94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  000b2c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000184 	.word	0x20000184
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004540 	.word	0x08004540

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000188 	.word	0x20000188
 8000104:	08004540 	.word	0x08004540

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000220:	b510      	push	{r4, lr}
 8000222:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000224:	2214      	movs	r2, #20
 8000226:	2100      	movs	r1, #0
 8000228:	a803      	add	r0, sp, #12
 800022a:	f004 f952 	bl	80044d2 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800022e:	4b13      	ldr	r3, [pc, #76]	@ (800027c <MX_GPIO_Init+0x5c>)
 8000230:	695a      	ldr	r2, [r3, #20]
 8000232:	2180      	movs	r1, #128	@ 0x80
 8000234:	03c9      	lsls	r1, r1, #15
 8000236:	430a      	orrs	r2, r1
 8000238:	615a      	str	r2, [r3, #20]
 800023a:	695a      	ldr	r2, [r3, #20]
 800023c:	400a      	ands	r2, r1
 800023e:	9201      	str	r2, [sp, #4]
 8000240:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000242:	695a      	ldr	r2, [r3, #20]
 8000244:	2180      	movs	r1, #128	@ 0x80
 8000246:	0289      	lsls	r1, r1, #10
 8000248:	430a      	orrs	r2, r1
 800024a:	615a      	str	r2, [r3, #20]
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	400b      	ands	r3, r1
 8000250:	9302      	str	r3, [sp, #8]
 8000252:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000254:	2490      	movs	r4, #144	@ 0x90
 8000256:	05e4      	lsls	r4, r4, #23
 8000258:	2200      	movs	r2, #0
 800025a:	2102      	movs	r1, #2
 800025c:	0020      	movs	r0, r4
 800025e:	f000 fabf 	bl	80007e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000262:	2302      	movs	r3, #2
 8000264:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000266:	2201      	movs	r2, #1
 8000268:	9204      	str	r2, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800026a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800026c:	2300      	movs	r3, #0
 800026e:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000270:	a903      	add	r1, sp, #12
 8000272:	0020      	movs	r0, r4
 8000274:	f000 f9f0 	bl	8000658 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000278:	b008      	add	sp, #32
 800027a:	bd10      	pop	{r4, pc}
 800027c:	40021000 	.word	0x40021000

08000280 <rxcb>:
void rxcb(uint8_t* buf, uint32_t *len) {
 8000280:	b510      	push	{r4, lr}
 8000282:	000c      	movs	r4, r1
	memcpy(usbRxBuf, buf, *len);
 8000284:	4b06      	ldr	r3, [pc, #24]	@ (80002a0 <rxcb+0x20>)
 8000286:	680a      	ldr	r2, [r1, #0]
 8000288:	0001      	movs	r1, r0
 800028a:	0018      	movs	r0, r3
 800028c:	f004 f94e 	bl	800452c <memcpy>
	usbRxBufLen = *len;
 8000290:	6822      	ldr	r2, [r4, #0]
 8000292:	4b04      	ldr	r3, [pc, #16]	@ (80002a4 <rxcb+0x24>)
 8000294:	801a      	strh	r2, [r3, #0]
	usbRxFlag = 1;
 8000296:	4b04      	ldr	r3, [pc, #16]	@ (80002a8 <rxcb+0x28>)
 8000298:	2201      	movs	r2, #1
 800029a:	701a      	strb	r2, [r3, #0]
}
 800029c:	bd10      	pop	{r4, pc}
 800029e:	46c0      	nop			@ (mov r8, r8)
 80002a0:	200001a4 	.word	0x200001a4
 80002a4:	20000224 	.word	0x20000224
 80002a8:	200001a0 	.word	0x200001a0

080002ac <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002ac:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002ae:	e7fe      	b.n	80002ae <Error_Handler+0x2>

080002b0 <MX_USART2_UART_Init>:
{
 80002b0:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 80002b2:	480b      	ldr	r0, [pc, #44]	@ (80002e0 <MX_USART2_UART_Init+0x30>)
 80002b4:	4b0b      	ldr	r3, [pc, #44]	@ (80002e4 <MX_USART2_UART_Init+0x34>)
 80002b6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 1200;
 80002b8:	2396      	movs	r3, #150	@ 0x96
 80002ba:	00db      	lsls	r3, r3, #3
 80002bc:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002be:	2300      	movs	r3, #0
 80002c0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002c2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002c4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002c6:	220c      	movs	r2, #12
 80002c8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ca:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002cc:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002ce:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002d0:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002d2:	f002 f865 	bl	80023a0 <HAL_UART_Init>
 80002d6:	2800      	cmp	r0, #0
 80002d8:	d100      	bne.n	80002dc <MX_USART2_UART_Init+0x2c>
}
 80002da:	bd10      	pop	{r4, pc}
    Error_Handler();
 80002dc:	f7ff ffe6 	bl	80002ac <Error_Handler>
 80002e0:	200002a8 	.word	0x200002a8
 80002e4:	40004400 	.word	0x40004400

080002e8 <SystemClock_Config>:
{
 80002e8:	b500      	push	{lr}
 80002ea:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ec:	2230      	movs	r2, #48	@ 0x30
 80002ee:	2100      	movs	r1, #0
 80002f0:	a80a      	add	r0, sp, #40	@ 0x28
 80002f2:	f004 f8ee 	bl	80044d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f6:	2210      	movs	r2, #16
 80002f8:	2100      	movs	r1, #0
 80002fa:	a806      	add	r0, sp, #24
 80002fc:	f004 f8e9 	bl	80044d2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000300:	2214      	movs	r2, #20
 8000302:	2100      	movs	r1, #0
 8000304:	a801      	add	r0, sp, #4
 8000306:	f004 f8e4 	bl	80044d2 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030a:	2301      	movs	r3, #1
 800030c:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800030e:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000310:	2202      	movs	r2, #2
 8000312:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000314:	2280      	movs	r2, #128	@ 0x80
 8000316:	0252      	lsls	r2, r2, #9
 8000318:	9213      	str	r2, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800031a:	2280      	movs	r2, #128	@ 0x80
 800031c:	0352      	lsls	r2, r2, #13
 800031e:	9214      	str	r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000320:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000322:	a80a      	add	r0, sp, #40	@ 0x28
 8000324:	f001 fa58 	bl	80017d8 <HAL_RCC_OscConfig>
 8000328:	2800      	cmp	r0, #0
 800032a:	d118      	bne.n	800035e <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032c:	2307      	movs	r3, #7
 800032e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000330:	3b05      	subs	r3, #5
 8000332:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000338:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800033a:	2101      	movs	r1, #1
 800033c:	a806      	add	r0, sp, #24
 800033e:	f001 fcd5 	bl	8001cec <HAL_RCC_ClockConfig>
 8000342:	2800      	cmp	r0, #0
 8000344:	d10d      	bne.n	8000362 <SystemClock_Config+0x7a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000346:	2380      	movs	r3, #128	@ 0x80
 8000348:	029b      	lsls	r3, r3, #10
 800034a:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800034c:	2380      	movs	r3, #128	@ 0x80
 800034e:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000350:	a801      	add	r0, sp, #4
 8000352:	f001 fd7b 	bl	8001e4c <HAL_RCCEx_PeriphCLKConfig>
 8000356:	2800      	cmp	r0, #0
 8000358:	d105      	bne.n	8000366 <SystemClock_Config+0x7e>
}
 800035a:	b017      	add	sp, #92	@ 0x5c
 800035c:	bd00      	pop	{pc}
    Error_Handler();
 800035e:	f7ff ffa5 	bl	80002ac <Error_Handler>
    Error_Handler();
 8000362:	f7ff ffa3 	bl	80002ac <Error_Handler>
    Error_Handler();
 8000366:	f7ff ffa1 	bl	80002ac <Error_Handler>
	...

0800036c <main>:
{
 800036c:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 800036e:	f000 f8f1 	bl	8000554 <HAL_Init>
  SystemClock_Config();
 8000372:	f7ff ffb9 	bl	80002e8 <SystemClock_Config>
  MX_GPIO_Init();
 8000376:	f7ff ff53 	bl	8000220 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800037a:	f7ff ff99 	bl	80002b0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800037e:	f003 fe2f 	bl	8003fe0 <MX_USB_DEVICE_Init>
  usbTxBufLen = snprintf((char*)usbTxBuf, USB_BUFLEN, "Starting VCOM");
 8000382:	480a      	ldr	r0, [pc, #40]	@ (80003ac <main+0x40>)
 8000384:	4b0a      	ldr	r3, [pc, #40]	@ (80003b0 <main+0x44>)
 8000386:	0002      	movs	r2, r0
 8000388:	0019      	movs	r1, r3
 800038a:	c938      	ldmia	r1!, {r3, r4, r5}
 800038c:	c238      	stmia	r2!, {r3, r4, r5}
 800038e:	880b      	ldrh	r3, [r1, #0]
 8000390:	8013      	strh	r3, [r2, #0]
 8000392:	4b08      	ldr	r3, [pc, #32]	@ (80003b4 <main+0x48>)
 8000394:	220d      	movs	r2, #13
 8000396:	801a      	strh	r2, [r3, #0]
  CDC_Transmit_FS(usbTxBuf, usbTxBufLen);
 8000398:	210d      	movs	r1, #13
 800039a:	f003 fea1 	bl	80040e0 <CDC_Transmit_FS>
	  if (usbRxFlag && rxcb != NULL) {
 800039e:	4b06      	ldr	r3, [pc, #24]	@ (80003b8 <main+0x4c>)
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d0fb      	beq.n	800039e <main+0x32>
		  uint32_t now = HAL_GetTick();
 80003a6:	f000 f8f1 	bl	800058c <HAL_GetTick>
 80003aa:	e7f8      	b.n	800039e <main+0x32>
 80003ac:	20000228 	.word	0x20000228
 80003b0:	08004558 	.word	0x08004558
 80003b4:	20000226 	.word	0x20000226
 80003b8:	200001a0 	.word	0x200001a0

080003bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003bc:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003be:	4b0c      	ldr	r3, [pc, #48]	@ (80003f0 <HAL_MspInit+0x34>)
 80003c0:	6999      	ldr	r1, [r3, #24]
 80003c2:	2201      	movs	r2, #1
 80003c4:	4311      	orrs	r1, r2
 80003c6:	6199      	str	r1, [r3, #24]
 80003c8:	6999      	ldr	r1, [r3, #24]
 80003ca:	400a      	ands	r2, r1
 80003cc:	9200      	str	r2, [sp, #0]
 80003ce:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003d0:	69da      	ldr	r2, [r3, #28]
 80003d2:	2180      	movs	r1, #128	@ 0x80
 80003d4:	0549      	lsls	r1, r1, #21
 80003d6:	430a      	orrs	r2, r1
 80003d8:	61da      	str	r2, [r3, #28]
 80003da:	69db      	ldr	r3, [r3, #28]
 80003dc:	400b      	ands	r3, r1
 80003de:	9301      	str	r3, [sp, #4]
 80003e0:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 80003e2:	4a04      	ldr	r2, [pc, #16]	@ (80003f4 <HAL_MspInit+0x38>)
 80003e4:	6813      	ldr	r3, [r2, #0]
 80003e6:	2110      	movs	r1, #16
 80003e8:	430b      	orrs	r3, r1
 80003ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ec:	b002      	add	sp, #8
 80003ee:	4770      	bx	lr
 80003f0:	40021000 	.word	0x40021000
 80003f4:	40010000 	.word	0x40010000

080003f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003f8:	b510      	push	{r4, lr}
 80003fa:	b088      	sub	sp, #32
 80003fc:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fe:	2214      	movs	r2, #20
 8000400:	2100      	movs	r1, #0
 8000402:	a803      	add	r0, sp, #12
 8000404:	f004 f865 	bl	80044d2 <memset>
  if(huart->Instance==USART2)
 8000408:	6822      	ldr	r2, [r4, #0]
 800040a:	4b12      	ldr	r3, [pc, #72]	@ (8000454 <HAL_UART_MspInit+0x5c>)
 800040c:	429a      	cmp	r2, r3
 800040e:	d001      	beq.n	8000414 <HAL_UART_MspInit+0x1c>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000410:	b008      	add	sp, #32
 8000412:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000414:	4b10      	ldr	r3, [pc, #64]	@ (8000458 <HAL_UART_MspInit+0x60>)
 8000416:	69d9      	ldr	r1, [r3, #28]
 8000418:	2280      	movs	r2, #128	@ 0x80
 800041a:	0292      	lsls	r2, r2, #10
 800041c:	4311      	orrs	r1, r2
 800041e:	61d9      	str	r1, [r3, #28]
 8000420:	69d9      	ldr	r1, [r3, #28]
 8000422:	4011      	ands	r1, r2
 8000424:	9101      	str	r1, [sp, #4]
 8000426:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000428:	6959      	ldr	r1, [r3, #20]
 800042a:	4311      	orrs	r1, r2
 800042c:	6159      	str	r1, [r3, #20]
 800042e:	695b      	ldr	r3, [r3, #20]
 8000430:	4013      	ands	r3, r2
 8000432:	9302      	str	r3, [sp, #8]
 8000434:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000436:	230c      	movs	r3, #12
 8000438:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800043a:	3b0a      	subs	r3, #10
 800043c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800043e:	3301      	adds	r3, #1
 8000440:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000442:	3b02      	subs	r3, #2
 8000444:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000446:	2090      	movs	r0, #144	@ 0x90
 8000448:	a903      	add	r1, sp, #12
 800044a:	05c0      	lsls	r0, r0, #23
 800044c:	f000 f904 	bl	8000658 <HAL_GPIO_Init>
}
 8000450:	e7de      	b.n	8000410 <HAL_UART_MspInit+0x18>
 8000452:	46c0      	nop			@ (mov r8, r8)
 8000454:	40004400 	.word	0x40004400
 8000458:	40021000 	.word	0x40021000

0800045c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800045c:	e7fe      	b.n	800045c <NMI_Handler>

0800045e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800045e:	e7fe      	b.n	800045e <HardFault_Handler>

08000460 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000460:	4770      	bx	lr

08000462 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000462:	4770      	bx	lr

08000464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000464:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000466:	f000 f885 	bl	8000574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800046a:	bd10      	pop	{r4, pc}

0800046c <USB_IRQHandler>:

/**
  * @brief This function handles USB global Interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800046c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800046e:	4802      	ldr	r0, [pc, #8]	@ (8000478 <USB_IRQHandler+0xc>)
 8000470:	f000 ff6e 	bl	8001350 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)
 8000478:	20000d1c 	.word	0x20000d1c

0800047c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800047c:	4770      	bx	lr
	...

08000480 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000480:	4813      	ldr	r0, [pc, #76]	@ (80004d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000482:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000484:	f7ff fffa 	bl	800047c <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000488:	4812      	ldr	r0, [pc, #72]	@ (80004d4 <LoopForever+0x6>)
    LDR R1, [R0]
 800048a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800048c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800048e:	4a12      	ldr	r2, [pc, #72]	@ (80004d8 <LoopForever+0xa>)
    CMP R1, R2
 8000490:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000492:	d105      	bne.n	80004a0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000494:	4811      	ldr	r0, [pc, #68]	@ (80004dc <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000496:	4912      	ldr	r1, [pc, #72]	@ (80004e0 <LoopForever+0x12>)
    STR R1, [R0]
 8000498:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800049a:	4812      	ldr	r0, [pc, #72]	@ (80004e4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800049c:	4912      	ldr	r1, [pc, #72]	@ (80004e8 <LoopForever+0x1a>)
    STR R1, [R0]
 800049e:	6001      	str	r1, [r0, #0]

080004a0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a0:	4812      	ldr	r0, [pc, #72]	@ (80004ec <LoopForever+0x1e>)
  ldr r1, =_edata
 80004a2:	4913      	ldr	r1, [pc, #76]	@ (80004f0 <LoopForever+0x22>)
  ldr r2, =_sidata
 80004a4:	4a13      	ldr	r2, [pc, #76]	@ (80004f4 <LoopForever+0x26>)
  movs r3, #0
 80004a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a8:	e002      	b.n	80004b0 <LoopCopyDataInit>

080004aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ae:	3304      	adds	r3, #4

080004b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b4:	d3f9      	bcc.n	80004aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004b6:	4a10      	ldr	r2, [pc, #64]	@ (80004f8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80004b8:	4c10      	ldr	r4, [pc, #64]	@ (80004fc <LoopForever+0x2e>)
  movs r3, #0
 80004ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004bc:	e001      	b.n	80004c2 <LoopFillZerobss>

080004be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c0:	3204      	adds	r2, #4

080004c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c4:	d3fb      	bcc.n	80004be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004c6:	f004 f80d 	bl	80044e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ca:	f7ff ff4f 	bl	800036c <main>

080004ce <LoopForever>:

LoopForever:
    b LoopForever
 80004ce:	e7fe      	b.n	80004ce <LoopForever>
  ldr   r0, =_estack
 80004d0:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80004d4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80004d8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80004dc:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80004e0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80004e4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80004e8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80004ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f0:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80004f4:	08004650 	.word	0x08004650
  ldr r2, =_sbss
 80004f8:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80004fc:	20000ff8 	.word	0x20000ff8

08000500 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000500:	e7fe      	b.n	8000500 <ADC1_IRQHandler>
	...

08000504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000504:	b510      	push	{r4, lr}
 8000506:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000508:	4b0f      	ldr	r3, [pc, #60]	@ (8000548 <HAL_InitTick+0x44>)
 800050a:	7819      	ldrb	r1, [r3, #0]
 800050c:	20fa      	movs	r0, #250	@ 0xfa
 800050e:	0080      	lsls	r0, r0, #2
 8000510:	f7ff fdfa 	bl	8000108 <__udivsi3>
 8000514:	0001      	movs	r1, r0
 8000516:	4b0d      	ldr	r3, [pc, #52]	@ (800054c <HAL_InitTick+0x48>)
 8000518:	6818      	ldr	r0, [r3, #0]
 800051a:	f7ff fdf5 	bl	8000108 <__udivsi3>
 800051e:	f000 f897 	bl	8000650 <HAL_SYSTICK_Config>
 8000522:	2800      	cmp	r0, #0
 8000524:	d10d      	bne.n	8000542 <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000526:	2c03      	cmp	r4, #3
 8000528:	d901      	bls.n	800052e <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800052a:	2001      	movs	r0, #1
 800052c:	e00a      	b.n	8000544 <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800052e:	3001      	adds	r0, #1
 8000530:	2200      	movs	r2, #0
 8000532:	0021      	movs	r1, r4
 8000534:	4240      	negs	r0, r0
 8000536:	f000 f87b 	bl	8000630 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800053a:	4b05      	ldr	r3, [pc, #20]	@ (8000550 <HAL_InitTick+0x4c>)
 800053c:	601c      	str	r4, [r3, #0]
  }

   /* Return function status */
  return HAL_OK;
 800053e:	2000      	movs	r0, #0
 8000540:	e000      	b.n	8000544 <HAL_InitTick+0x40>
    return HAL_ERROR;
 8000542:	2001      	movs	r0, #1
}
 8000544:	bd10      	pop	{r4, pc}
 8000546:	46c0      	nop			@ (mov r8, r8)
 8000548:	20000004 	.word	0x20000004
 800054c:	20000000 	.word	0x20000000
 8000550:	20000008 	.word	0x20000008

08000554 <HAL_Init>:
{
 8000554:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000556:	4a06      	ldr	r2, [pc, #24]	@ (8000570 <HAL_Init+0x1c>)
 8000558:	6813      	ldr	r3, [r2, #0]
 800055a:	2110      	movs	r1, #16
 800055c:	430b      	orrs	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000560:	2003      	movs	r0, #3
 8000562:	f7ff ffcf 	bl	8000504 <HAL_InitTick>
  HAL_MspInit();
 8000566:	f7ff ff29 	bl	80003bc <HAL_MspInit>
}
 800056a:	2000      	movs	r0, #0
 800056c:	bd10      	pop	{r4, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	40022000 	.word	0x40022000

08000574 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000574:	4a03      	ldr	r2, [pc, #12]	@ (8000584 <HAL_IncTick+0x10>)
 8000576:	6811      	ldr	r1, [r2, #0]
 8000578:	4b03      	ldr	r3, [pc, #12]	@ (8000588 <HAL_IncTick+0x14>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	185b      	adds	r3, r3, r1
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	4770      	bx	lr
 8000582:	46c0      	nop			@ (mov r8, r8)
 8000584:	20000330 	.word	0x20000330
 8000588:	20000004 	.word	0x20000004

0800058c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800058c:	4b01      	ldr	r3, [pc, #4]	@ (8000594 <HAL_GetTick+0x8>)
 800058e:	6818      	ldr	r0, [r3, #0]
}
 8000590:	4770      	bx	lr
 8000592:	46c0      	nop			@ (mov r8, r8)
 8000594:	20000330 	.word	0x20000330

08000598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000598:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 800059a:	2800      	cmp	r0, #0
 800059c:	db11      	blt.n	80005c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800059e:	0883      	lsrs	r3, r0, #2
 80005a0:	4d13      	ldr	r5, [pc, #76]	@ (80005f0 <__NVIC_SetPriority+0x58>)
 80005a2:	33c0      	adds	r3, #192	@ 0xc0
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	595c      	ldr	r4, [r3, r5]
 80005a8:	2203      	movs	r2, #3
 80005aa:	4010      	ands	r0, r2
 80005ac:	00c0      	lsls	r0, r0, #3
 80005ae:	32fc      	adds	r2, #252	@ 0xfc
 80005b0:	0016      	movs	r6, r2
 80005b2:	4086      	lsls	r6, r0
 80005b4:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005b6:	0189      	lsls	r1, r1, #6
 80005b8:	400a      	ands	r2, r1
 80005ba:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005bc:	4322      	orrs	r2, r4
 80005be:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80005c0:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005c2:	230f      	movs	r3, #15
 80005c4:	4003      	ands	r3, r0
 80005c6:	3b08      	subs	r3, #8
 80005c8:	089b      	lsrs	r3, r3, #2
 80005ca:	3306      	adds	r3, #6
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	4a09      	ldr	r2, [pc, #36]	@ (80005f4 <__NVIC_SetPriority+0x5c>)
 80005d0:	4694      	mov	ip, r2
 80005d2:	4463      	add	r3, ip
 80005d4:	685c      	ldr	r4, [r3, #4]
 80005d6:	2203      	movs	r2, #3
 80005d8:	4010      	ands	r0, r2
 80005da:	00c0      	lsls	r0, r0, #3
 80005dc:	32fc      	adds	r2, #252	@ 0xfc
 80005de:	0015      	movs	r5, r2
 80005e0:	4085      	lsls	r5, r0
 80005e2:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005e4:	0189      	lsls	r1, r1, #6
 80005e6:	400a      	ands	r2, r1
 80005e8:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005ea:	4322      	orrs	r2, r4
 80005ec:	605a      	str	r2, [r3, #4]
}
 80005ee:	e7e7      	b.n	80005c0 <__NVIC_SetPriority+0x28>
 80005f0:	e000e100 	.word	0xe000e100
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005f8:	3801      	subs	r0, #1
 80005fa:	2380      	movs	r3, #128	@ 0x80
 80005fc:	045b      	lsls	r3, r3, #17
 80005fe:	4298      	cmp	r0, r3
 8000600:	d20f      	bcs.n	8000622 <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000602:	4a09      	ldr	r2, [pc, #36]	@ (8000628 <SysTick_Config+0x30>)
 8000604:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000606:	4809      	ldr	r0, [pc, #36]	@ (800062c <SysTick_Config+0x34>)
 8000608:	6a03      	ldr	r3, [r0, #32]
 800060a:	021b      	lsls	r3, r3, #8
 800060c:	0a1b      	lsrs	r3, r3, #8
 800060e:	21c0      	movs	r1, #192	@ 0xc0
 8000610:	0609      	lsls	r1, r1, #24
 8000612:	430b      	orrs	r3, r1
 8000614:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000616:	2300      	movs	r3, #0
 8000618:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800061a:	3307      	adds	r3, #7
 800061c:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800061e:	2000      	movs	r0, #0
}
 8000620:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000622:	2001      	movs	r0, #1
 8000624:	e7fc      	b.n	8000620 <SysTick_Config+0x28>
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	e000e010 	.word	0xe000e010
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000630:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000632:	f7ff ffb1 	bl	8000598 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000636:	bd10      	pop	{r4, pc}

08000638 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000638:	2800      	cmp	r0, #0
 800063a:	db05      	blt.n	8000648 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800063c:	221f      	movs	r2, #31
 800063e:	4002      	ands	r2, r0
 8000640:	2301      	movs	r3, #1
 8000642:	4093      	lsls	r3, r2
 8000644:	4a01      	ldr	r2, [pc, #4]	@ (800064c <HAL_NVIC_EnableIRQ+0x14>)
 8000646:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000648:	4770      	bx	lr
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	e000e100 	.word	0xe000e100

08000650 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000650:	b510      	push	{r4, lr}
   return SysTick_Config(TicksNumb);
 8000652:	f7ff ffd1 	bl	80005f8 <SysTick_Config>
}
 8000656:	bd10      	pop	{r4, pc}

08000658 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800065a:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 800065c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800065e:	e056      	b.n	800070e <HAL_GPIO_Init+0xb6>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000660:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000662:	005f      	lsls	r7, r3, #1
 8000664:	2403      	movs	r4, #3
 8000666:	40bc      	lsls	r4, r7
 8000668:	43a6      	bics	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800066a:	68cc      	ldr	r4, [r1, #12]
 800066c:	40bc      	lsls	r4, r7
 800066e:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000670:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000672:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000674:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000676:	684e      	ldr	r6, [r1, #4]
 8000678:	0936      	lsrs	r6, r6, #4
 800067a:	2201      	movs	r2, #1
 800067c:	4032      	ands	r2, r6
 800067e:	409a      	lsls	r2, r3
 8000680:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000682:	6042      	str	r2, [r0, #4]
 8000684:	e053      	b.n	800072e <HAL_GPIO_Init+0xd6>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000686:	08de      	lsrs	r6, r3, #3
 8000688:	3608      	adds	r6, #8
 800068a:	00b6      	lsls	r6, r6, #2
 800068c:	5837      	ldr	r7, [r6, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800068e:	3205      	adds	r2, #5
 8000690:	401a      	ands	r2, r3
 8000692:	0092      	lsls	r2, r2, #2
 8000694:	240f      	movs	r4, #15
 8000696:	4094      	lsls	r4, r2
 8000698:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800069a:	690c      	ldr	r4, [r1, #16]
 800069c:	4094      	lsls	r4, r2
 800069e:	0022      	movs	r2, r4
 80006a0:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3u] = temp;
 80006a2:	5032      	str	r2, [r6, r0]
 80006a4:	e056      	b.n	8000754 <HAL_GPIO_Init+0xfc>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80006a6:	2603      	movs	r6, #3
 80006a8:	e000      	b.n	80006ac <HAL_GPIO_Init+0x54>
 80006aa:	2600      	movs	r6, #0
 80006ac:	40a6      	lsls	r6, r4
 80006ae:	0034      	movs	r4, r6
 80006b0:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80006b2:	3202      	adds	r2, #2
 80006b4:	0092      	lsls	r2, r2, #2
 80006b6:	4e44      	ldr	r6, [pc, #272]	@ (80007c8 <HAL_GPIO_Init+0x170>)
 80006b8:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006ba:	4a44      	ldr	r2, [pc, #272]	@ (80007cc <HAL_GPIO_Init+0x174>)
 80006bc:	6897      	ldr	r7, [r2, #8]
        temp &= ~(iocurrent);
 80006be:	43ea      	mvns	r2, r5
 80006c0:	003e      	movs	r6, r7
 80006c2:	43ae      	bics	r6, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80006c4:	684c      	ldr	r4, [r1, #4]
 80006c6:	02e4      	lsls	r4, r4, #11
 80006c8:	d501      	bpl.n	80006ce <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80006ca:	003e      	movs	r6, r7
 80006cc:	432e      	orrs	r6, r5
        }
        EXTI->RTSR = temp;
 80006ce:	4c3f      	ldr	r4, [pc, #252]	@ (80007cc <HAL_GPIO_Init+0x174>)
 80006d0:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80006d2:	68e7      	ldr	r7, [r4, #12]
        temp &= ~(iocurrent);
 80006d4:	003e      	movs	r6, r7
 80006d6:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80006d8:	684c      	ldr	r4, [r1, #4]
 80006da:	02a4      	lsls	r4, r4, #10
 80006dc:	d501      	bpl.n	80006e2 <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 80006de:	003e      	movs	r6, r7
 80006e0:	432e      	orrs	r6, r5
        }
        EXTI->FTSR = temp;
 80006e2:	4c3a      	ldr	r4, [pc, #232]	@ (80007cc <HAL_GPIO_Init+0x174>)
 80006e4:	60e6      	str	r6, [r4, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80006e6:	6867      	ldr	r7, [r4, #4]
        temp &= ~(iocurrent);
 80006e8:	003e      	movs	r6, r7
 80006ea:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80006ec:	684c      	ldr	r4, [r1, #4]
 80006ee:	03a4      	lsls	r4, r4, #14
 80006f0:	d501      	bpl.n	80006f6 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 80006f2:	003e      	movs	r6, r7
 80006f4:	432e      	orrs	r6, r5
        }
        EXTI->EMR = temp;
 80006f6:	4c35      	ldr	r4, [pc, #212]	@ (80007cc <HAL_GPIO_Init+0x174>)
 80006f8:	6066      	str	r6, [r4, #4]

        temp = EXTI->IMR;
 80006fa:	6826      	ldr	r6, [r4, #0]
        temp &= ~(iocurrent);
 80006fc:	4032      	ands	r2, r6
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80006fe:	684c      	ldr	r4, [r1, #4]
 8000700:	03e4      	lsls	r4, r4, #15
 8000702:	d501      	bpl.n	8000708 <HAL_GPIO_Init+0xb0>
        {
          temp |= iocurrent;
 8000704:	002a      	movs	r2, r5
 8000706:	4332      	orrs	r2, r6
        }
        EXTI->IMR = temp;
 8000708:	4c30      	ldr	r4, [pc, #192]	@ (80007cc <HAL_GPIO_Init+0x174>)
 800070a:	6022      	str	r2, [r4, #0]
      }
    }

    position++;
 800070c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800070e:	680c      	ldr	r4, [r1, #0]
 8000710:	0022      	movs	r2, r4
 8000712:	40da      	lsrs	r2, r3
 8000714:	d056      	beq.n	80007c4 <HAL_GPIO_Init+0x16c>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000716:	2201      	movs	r2, #1
 8000718:	409a      	lsls	r2, r3
 800071a:	0025      	movs	r5, r4
 800071c:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 800071e:	4214      	tst	r4, r2
 8000720:	d0f4      	beq.n	800070c <HAL_GPIO_Init+0xb4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000722:	684e      	ldr	r6, [r1, #4]
 8000724:	2403      	movs	r4, #3
 8000726:	4034      	ands	r4, r6
 8000728:	3c01      	subs	r4, #1
 800072a:	2c01      	cmp	r4, #1
 800072c:	d998      	bls.n	8000660 <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800072e:	684c      	ldr	r4, [r1, #4]
 8000730:	2203      	movs	r2, #3
 8000732:	4022      	ands	r2, r4
 8000734:	2a03      	cmp	r2, #3
 8000736:	d008      	beq.n	800074a <HAL_GPIO_Init+0xf2>
        temp = GPIOx->PUPDR;
 8000738:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800073a:	005e      	lsls	r6, r3, #1
 800073c:	2203      	movs	r2, #3
 800073e:	40b2      	lsls	r2, r6
 8000740:	4394      	bics	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000742:	688a      	ldr	r2, [r1, #8]
 8000744:	40b2      	lsls	r2, r6
 8000746:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000748:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800074a:	684c      	ldr	r4, [r1, #4]
 800074c:	2203      	movs	r2, #3
 800074e:	4022      	ands	r2, r4
 8000750:	2a02      	cmp	r2, #2
 8000752:	d098      	beq.n	8000686 <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8000754:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000756:	005e      	lsls	r6, r3, #1
 8000758:	2203      	movs	r2, #3
 800075a:	0017      	movs	r7, r2
 800075c:	40b7      	lsls	r7, r6
 800075e:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000760:	684f      	ldr	r7, [r1, #4]
 8000762:	403a      	ands	r2, r7
 8000764:	40b2      	lsls	r2, r6
 8000766:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000768:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800076a:	684c      	ldr	r4, [r1, #4]
 800076c:	22c0      	movs	r2, #192	@ 0xc0
 800076e:	0292      	lsls	r2, r2, #10
 8000770:	4214      	tst	r4, r2
 8000772:	d0cb      	beq.n	800070c <HAL_GPIO_Init+0xb4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000774:	4c16      	ldr	r4, [pc, #88]	@ (80007d0 <HAL_GPIO_Init+0x178>)
 8000776:	69a6      	ldr	r6, [r4, #24]
 8000778:	2201      	movs	r2, #1
 800077a:	4316      	orrs	r6, r2
 800077c:	61a6      	str	r6, [r4, #24]
 800077e:	69a4      	ldr	r4, [r4, #24]
 8000780:	4022      	ands	r2, r4
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000786:	089a      	lsrs	r2, r3, #2
 8000788:	1c94      	adds	r4, r2, #2
 800078a:	00a4      	lsls	r4, r4, #2
 800078c:	4e0e      	ldr	r6, [pc, #56]	@ (80007c8 <HAL_GPIO_Init+0x170>)
 800078e:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000790:	2403      	movs	r4, #3
 8000792:	401c      	ands	r4, r3
 8000794:	00a4      	lsls	r4, r4, #2
 8000796:	260f      	movs	r6, #15
 8000798:	40a6      	lsls	r6, r4
 800079a:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800079c:	2690      	movs	r6, #144	@ 0x90
 800079e:	05f6      	lsls	r6, r6, #23
 80007a0:	42b0      	cmp	r0, r6
 80007a2:	d082      	beq.n	80006aa <HAL_GPIO_Init+0x52>
 80007a4:	4e0b      	ldr	r6, [pc, #44]	@ (80007d4 <HAL_GPIO_Init+0x17c>)
 80007a6:	42b0      	cmp	r0, r6
 80007a8:	d008      	beq.n	80007bc <HAL_GPIO_Init+0x164>
 80007aa:	4e0b      	ldr	r6, [pc, #44]	@ (80007d8 <HAL_GPIO_Init+0x180>)
 80007ac:	42b0      	cmp	r0, r6
 80007ae:	d007      	beq.n	80007c0 <HAL_GPIO_Init+0x168>
 80007b0:	4e0a      	ldr	r6, [pc, #40]	@ (80007dc <HAL_GPIO_Init+0x184>)
 80007b2:	42b0      	cmp	r0, r6
 80007b4:	d100      	bne.n	80007b8 <HAL_GPIO_Init+0x160>
 80007b6:	e776      	b.n	80006a6 <HAL_GPIO_Init+0x4e>
 80007b8:	2605      	movs	r6, #5
 80007ba:	e777      	b.n	80006ac <HAL_GPIO_Init+0x54>
 80007bc:	2601      	movs	r6, #1
 80007be:	e775      	b.n	80006ac <HAL_GPIO_Init+0x54>
 80007c0:	2602      	movs	r6, #2
 80007c2:	e773      	b.n	80006ac <HAL_GPIO_Init+0x54>
  } 
}
 80007c4:	b003      	add	sp, #12
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	40010000 	.word	0x40010000
 80007cc:	40010400 	.word	0x40010400
 80007d0:	40021000 	.word	0x40021000
 80007d4:	48000400 	.word	0x48000400
 80007d8:	48000800 	.word	0x48000800
 80007dc:	48000c00 	.word	0x48000c00

080007e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007e0:	2a00      	cmp	r2, #0
 80007e2:	d001      	beq.n	80007e8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007e4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80007e6:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007e8:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80007ea:	e7fc      	b.n	80007e6 <HAL_GPIO_WritePin+0x6>

080007ec <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80007ec:	b570      	push	{r4, r5, r6, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80007ee:	0453      	lsls	r3, r2, #17
 80007f0:	d53c      	bpl.n	800086c <HAL_PCD_EP_DB_Receive+0x80>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80007f2:	6804      	ldr	r4, [r0, #0]
 80007f4:	2350      	movs	r3, #80	@ 0x50
 80007f6:	5ae3      	ldrh	r3, [r4, r3]
 80007f8:	780d      	ldrb	r5, [r1, #0]
 80007fa:	00ee      	lsls	r6, r5, #3
 80007fc:	199b      	adds	r3, r3, r6
 80007fe:	191b      	adds	r3, r3, r4
 8000800:	4c38      	ldr	r4, [pc, #224]	@ (80008e4 <HAL_PCD_EP_DB_Receive+0xf8>)
 8000802:	46a4      	mov	ip, r4
 8000804:	4463      	add	r3, ip
 8000806:	881c      	ldrh	r4, [r3, #0]
 8000808:	05a4      	lsls	r4, r4, #22
 800080a:	0da4      	lsrs	r4, r4, #22

    if (ep->xfer_len >= count)
 800080c:	698b      	ldr	r3, [r1, #24]
 800080e:	42a3      	cmp	r3, r4
 8000810:	d322      	bcc.n	8000858 <HAL_PCD_EP_DB_Receive+0x6c>
    {
      ep->xfer_len -= count;
 8000812:	1b1b      	subs	r3, r3, r4
 8000814:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 8000816:	698b      	ldr	r3, [r1, #24]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d10c      	bne.n	8000836 <HAL_PCD_EP_DB_Receive+0x4a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800081c:	6803      	ldr	r3, [r0, #0]
 800081e:	00ad      	lsls	r5, r5, #2
 8000820:	195d      	adds	r5, r3, r5
 8000822:	882b      	ldrh	r3, [r5, #0]
 8000824:	4e30      	ldr	r6, [pc, #192]	@ (80008e8 <HAL_PCD_EP_DB_Receive+0xfc>)
 8000826:	4033      	ands	r3, r6
 8000828:	2680      	movs	r6, #128	@ 0x80
 800082a:	01b6      	lsls	r6, r6, #6
 800082c:	405e      	eors	r6, r3
 800082e:	4b2f      	ldr	r3, [pc, #188]	@ (80008ec <HAL_PCD_EP_DB_Receive+0x100>)
 8000830:	4333      	orrs	r3, r6
 8000832:	b29b      	uxth	r3, r3
 8000834:	802b      	strh	r3, [r5, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000836:	0652      	lsls	r2, r2, #25
 8000838:	d50a      	bpl.n	8000850 <HAL_PCD_EP_DB_Receive+0x64>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800083a:	6802      	ldr	r2, [r0, #0]
 800083c:	780b      	ldrb	r3, [r1, #0]
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	18d2      	adds	r2, r2, r3
 8000842:	8815      	ldrh	r5, [r2, #0]
 8000844:	4b2a      	ldr	r3, [pc, #168]	@ (80008f0 <HAL_PCD_EP_DB_Receive+0x104>)
 8000846:	401d      	ands	r5, r3
 8000848:	4b2a      	ldr	r3, [pc, #168]	@ (80008f4 <HAL_PCD_EP_DB_Receive+0x108>)
 800084a:	432b      	orrs	r3, r5
 800084c:	b29b      	uxth	r3, r3
 800084e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8000850:	2c00      	cmp	r4, #0
 8000852:	d104      	bne.n	800085e <HAL_PCD_EP_DB_Receive+0x72>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 8000854:	0020      	movs	r0, r4
 8000856:	bd70      	pop	{r4, r5, r6, pc}
      ep->xfer_len = 0U;
 8000858:	2300      	movs	r3, #0
 800085a:	618b      	str	r3, [r1, #24]
 800085c:	e7db      	b.n	8000816 <HAL_PCD_EP_DB_Receive+0x2a>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800085e:	6800      	ldr	r0, [r0, #0]
 8000860:	890a      	ldrh	r2, [r1, #8]
 8000862:	6949      	ldr	r1, [r1, #20]
 8000864:	0023      	movs	r3, r4
 8000866:	f002 fc77 	bl	8003158 <USB_ReadPMA>
 800086a:	e7f3      	b.n	8000854 <HAL_PCD_EP_DB_Receive+0x68>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800086c:	6804      	ldr	r4, [r0, #0]
 800086e:	2350      	movs	r3, #80	@ 0x50
 8000870:	5ae3      	ldrh	r3, [r4, r3]
 8000872:	780d      	ldrb	r5, [r1, #0]
 8000874:	00ee      	lsls	r6, r5, #3
 8000876:	199b      	adds	r3, r3, r6
 8000878:	191b      	adds	r3, r3, r4
 800087a:	4c1f      	ldr	r4, [pc, #124]	@ (80008f8 <HAL_PCD_EP_DB_Receive+0x10c>)
 800087c:	46a4      	mov	ip, r4
 800087e:	4463      	add	r3, ip
 8000880:	881c      	ldrh	r4, [r3, #0]
 8000882:	05a4      	lsls	r4, r4, #22
 8000884:	0da4      	lsrs	r4, r4, #22
    if (ep->xfer_len >= count)
 8000886:	698b      	ldr	r3, [r1, #24]
 8000888:	42a3      	cmp	r3, r4
 800088a:	d327      	bcc.n	80008dc <HAL_PCD_EP_DB_Receive+0xf0>
      ep->xfer_len -= count;
 800088c:	1b1b      	subs	r3, r3, r4
 800088e:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 8000890:	698b      	ldr	r3, [r1, #24]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d10c      	bne.n	80008b0 <HAL_PCD_EP_DB_Receive+0xc4>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8000896:	6803      	ldr	r3, [r0, #0]
 8000898:	00ad      	lsls	r5, r5, #2
 800089a:	195d      	adds	r5, r3, r5
 800089c:	882b      	ldrh	r3, [r5, #0]
 800089e:	4e12      	ldr	r6, [pc, #72]	@ (80008e8 <HAL_PCD_EP_DB_Receive+0xfc>)
 80008a0:	4033      	ands	r3, r6
 80008a2:	2680      	movs	r6, #128	@ 0x80
 80008a4:	01b6      	lsls	r6, r6, #6
 80008a6:	405e      	eors	r6, r3
 80008a8:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <HAL_PCD_EP_DB_Receive+0x100>)
 80008aa:	4333      	orrs	r3, r6
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	802b      	strh	r3, [r5, #0]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80008b0:	0652      	lsls	r2, r2, #25
 80008b2:	d40a      	bmi.n	80008ca <HAL_PCD_EP_DB_Receive+0xde>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80008b4:	6802      	ldr	r2, [r0, #0]
 80008b6:	780b      	ldrb	r3, [r1, #0]
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	18d2      	adds	r2, r2, r3
 80008bc:	8815      	ldrh	r5, [r2, #0]
 80008be:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <HAL_PCD_EP_DB_Receive+0x104>)
 80008c0:	401d      	ands	r5, r3
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <HAL_PCD_EP_DB_Receive+0x108>)
 80008c4:	432b      	orrs	r3, r5
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 80008ca:	2c00      	cmp	r4, #0
 80008cc:	d0c2      	beq.n	8000854 <HAL_PCD_EP_DB_Receive+0x68>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80008ce:	6800      	ldr	r0, [r0, #0]
 80008d0:	894a      	ldrh	r2, [r1, #10]
 80008d2:	6949      	ldr	r1, [r1, #20]
 80008d4:	0023      	movs	r3, r4
 80008d6:	f002 fc3f 	bl	8003158 <USB_ReadPMA>
 80008da:	e7bb      	b.n	8000854 <HAL_PCD_EP_DB_Receive+0x68>
      ep->xfer_len = 0U;
 80008dc:	2300      	movs	r3, #0
 80008de:	618b      	str	r3, [r1, #24]
 80008e0:	e7d6      	b.n	8000890 <HAL_PCD_EP_DB_Receive+0xa4>
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	00000402 	.word	0x00000402
 80008e8:	ffffbf8f 	.word	0xffffbf8f
 80008ec:	ffff8080 	.word	0xffff8080
 80008f0:	ffff8f8f 	.word	0xffff8f8f
 80008f4:	ffff80c0 	.word	0xffff80c0
 80008f8:	00000406 	.word	0x00000406

080008fc <HAL_PCD_Init>:
{
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	1e04      	subs	r4, r0, #0
  if (hpcd == NULL)
 8000900:	d058      	beq.n	80009b4 <HAL_PCD_Init+0xb8>
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000902:	4b2d      	ldr	r3, [pc, #180]	@ (80009b8 <HAL_PCD_Init+0xbc>)
 8000904:	5cc3      	ldrb	r3, [r0, r3]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d007      	beq.n	800091a <HAL_PCD_Init+0x1e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 800090a:	4b2b      	ldr	r3, [pc, #172]	@ (80009b8 <HAL_PCD_Init+0xbc>)
 800090c:	2203      	movs	r2, #3
 800090e:	54e2      	strb	r2, [r4, r3]
  __HAL_PCD_DISABLE(hpcd);
 8000910:	6820      	ldr	r0, [r4, #0]
 8000912:	f001 fd85 	bl	8002420 <USB_DisableGlobalInt>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000916:	2200      	movs	r2, #0
 8000918:	e017      	b.n	800094a <HAL_PCD_Init+0x4e>
    hpcd->Lock = HAL_UNLOCKED;
 800091a:	23a4      	movs	r3, #164	@ 0xa4
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	2200      	movs	r2, #0
 8000920:	54c2      	strb	r2, [r0, r3]
    HAL_PCD_MspInit(hpcd);
 8000922:	f003 fc9d 	bl	8004260 <HAL_PCD_MspInit>
 8000926:	e7f0      	b.n	800090a <HAL_PCD_Init+0xe>
    hpcd->IN_ep[i].is_in = 1U;
 8000928:	0093      	lsls	r3, r2, #2
 800092a:	189b      	adds	r3, r3, r2
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	18e3      	adds	r3, r4, r3
 8000930:	2101      	movs	r1, #1
 8000932:	7459      	strb	r1, [r3, #17]
    hpcd->IN_ep[i].num = i;
 8000934:	741a      	strb	r2, [r3, #16]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000936:	2100      	movs	r1, #0
 8000938:	74d9      	strb	r1, [r3, #19]
    hpcd->IN_ep[i].maxpacket = 0U;
 800093a:	6219      	str	r1, [r3, #32]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800093c:	6259      	str	r1, [r3, #36]	@ 0x24
    hpcd->IN_ep[i].xfer_len = 0U;
 800093e:	3201      	adds	r2, #1
 8000940:	0093      	lsls	r3, r2, #2
 8000942:	189b      	adds	r3, r3, r2
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	5119      	str	r1, [r3, r4]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000948:	b2d2      	uxtb	r2, r2
 800094a:	7920      	ldrb	r0, [r4, #4]
 800094c:	4290      	cmp	r0, r2
 800094e:	d8eb      	bhi.n	8000928 <HAL_PCD_Init+0x2c>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000950:	2100      	movs	r1, #0
 8000952:	e019      	b.n	8000988 <HAL_PCD_Init+0x8c>
    hpcd->OUT_ep[i].is_in = 0U;
 8000954:	008a      	lsls	r2, r1, #2
 8000956:	1853      	adds	r3, r2, r1
 8000958:	00db      	lsls	r3, r3, #3
 800095a:	18e3      	adds	r3, r4, r3
 800095c:	001e      	movs	r6, r3
 800095e:	3652      	adds	r6, #82	@ 0x52
 8000960:	36ff      	adds	r6, #255	@ 0xff
 8000962:	2500      	movs	r5, #0
 8000964:	7035      	strb	r5, [r6, #0]
    hpcd->OUT_ep[i].num = i;
 8000966:	3e01      	subs	r6, #1
 8000968:	7031      	strb	r1, [r6, #0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800096a:	3603      	adds	r6, #3
 800096c:	7035      	strb	r5, [r6, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800096e:	360d      	adds	r6, #13
 8000970:	6035      	str	r5, [r6, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000972:	3365      	adds	r3, #101	@ 0x65
 8000974:	33ff      	adds	r3, #255	@ 0xff
 8000976:	601d      	str	r5, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000978:	1852      	adds	r2, r2, r1
 800097a:	00d2      	lsls	r2, r2, #3
 800097c:	18a2      	adds	r2, r4, r2
 800097e:	3269      	adds	r2, #105	@ 0x69
 8000980:	32ff      	adds	r2, #255	@ 0xff
 8000982:	6015      	str	r5, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000984:	3101      	adds	r1, #1
 8000986:	b2c9      	uxtb	r1, r1
 8000988:	4288      	cmp	r0, r1
 800098a:	d8e3      	bhi.n	8000954 <HAL_PCD_Init+0x58>
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800098c:	6820      	ldr	r0, [r4, #0]
 800098e:	6861      	ldr	r1, [r4, #4]
 8000990:	68a2      	ldr	r2, [r4, #8]
 8000992:	f001 fd4f 	bl	8002434 <USB_DevInit>
  hpcd->USB_Address = 0U;
 8000996:	2300      	movs	r3, #0
 8000998:	7323      	strb	r3, [r4, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800099a:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <HAL_PCD_Init+0xbc>)
 800099c:	2201      	movs	r2, #1
 800099e:	54e2      	strb	r2, [r4, r3]
  if (hpcd->Init.lpm_enable == 1U)
 80009a0:	7aa3      	ldrb	r3, [r4, #10]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d001      	beq.n	80009aa <HAL_PCD_Init+0xae>
  return HAL_OK;
 80009a6:	2000      	movs	r0, #0
}
 80009a8:	bd70      	pop	{r4, r5, r6, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80009aa:	0020      	movs	r0, r4
 80009ac:	f000 fefe 	bl	80017ac <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 80009b0:	2000      	movs	r0, #0
 80009b2:	e7f9      	b.n	80009a8 <HAL_PCD_Init+0xac>
    return HAL_ERROR;
 80009b4:	2001      	movs	r0, #1
 80009b6:	e7f7      	b.n	80009a8 <HAL_PCD_Init+0xac>
 80009b8:	00000291 	.word	0x00000291

080009bc <HAL_PCD_Start>:
{
 80009bc:	b570      	push	{r4, r5, r6, lr}
 80009be:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 80009c0:	23a4      	movs	r3, #164	@ 0xa4
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	5cc3      	ldrb	r3, [r0, r3]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d00d      	beq.n	80009e6 <HAL_PCD_Start+0x2a>
 80009ca:	25a4      	movs	r5, #164	@ 0xa4
 80009cc:	00ad      	lsls	r5, r5, #2
 80009ce:	2301      	movs	r3, #1
 80009d0:	5543      	strb	r3, [r0, r5]
  __HAL_PCD_ENABLE(hpcd);
 80009d2:	6800      	ldr	r0, [r0, #0]
 80009d4:	f001 fd1a 	bl	800240c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80009d8:	6820      	ldr	r0, [r4, #0]
 80009da:	f002 f801 	bl	80029e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80009de:	2300      	movs	r3, #0
 80009e0:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80009e2:	2000      	movs	r0, #0
}
 80009e4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80009e6:	2002      	movs	r0, #2
 80009e8:	e7fc      	b.n	80009e4 <HAL_PCD_Start+0x28>
	...

080009ec <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80009ec:	b570      	push	{r4, r5, r6, lr}
 80009ee:	0005      	movs	r5, r0
 80009f0:	000c      	movs	r4, r1
 80009f2:	0016      	movs	r6, r2
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80009f4:	0653      	lsls	r3, r2, #25
 80009f6:	d400      	bmi.n	80009fa <HAL_PCD_EP_DB_Transmit+0xe>
 80009f8:	e0ee      	b.n	8000bd8 <HAL_PCD_EP_DB_Transmit+0x1ec>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80009fa:	6802      	ldr	r2, [r0, #0]
 80009fc:	2350      	movs	r3, #80	@ 0x50
 80009fe:	5ad3      	ldrh	r3, [r2, r3]
 8000a00:	7809      	ldrb	r1, [r1, #0]
 8000a02:	00c8      	lsls	r0, r1, #3
 8000a04:	181b      	adds	r3, r3, r0
 8000a06:	189b      	adds	r3, r3, r2
 8000a08:	4aab      	ldr	r2, [pc, #684]	@ (8000cb8 <HAL_PCD_EP_DB_Transmit+0x2cc>)
 8000a0a:	4694      	mov	ip, r2
 8000a0c:	4463      	add	r3, ip
 8000a0e:	881a      	ldrh	r2, [r3, #0]
 8000a10:	0592      	lsls	r2, r2, #22
 8000a12:	0d92      	lsrs	r2, r2, #22

    if (ep->xfer_len > TxPctSize)
 8000a14:	69a3      	ldr	r3, [r4, #24]
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d940      	bls.n	8000a9c <HAL_PCD_EP_DB_Transmit+0xb0>
    {
      ep->xfer_len -= TxPctSize;
 8000a1a:	1a9b      	subs	r3, r3, r2
 8000a1c:	61a3      	str	r3, [r4, #24]
    {
      ep->xfer_len = 0U;
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8000a1e:	69a3      	ldr	r3, [r4, #24]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d159      	bne.n	8000ad8 <HAL_PCD_EP_DB_Transmit+0xec>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000a24:	7863      	ldrb	r3, [r4, #1]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d13b      	bne.n	8000aa2 <HAL_PCD_EP_DB_Transmit+0xb6>
 8000a2a:	682b      	ldr	r3, [r5, #0]
 8000a2c:	2250      	movs	r2, #80	@ 0x50
 8000a2e:	5a9a      	ldrh	r2, [r3, r2]
 8000a30:	189b      	adds	r3, r3, r2
 8000a32:	18c3      	adds	r3, r0, r3
 8000a34:	4aa0      	ldr	r2, [pc, #640]	@ (8000cb8 <HAL_PCD_EP_DB_Transmit+0x2cc>)
 8000a36:	4694      	mov	ip, r2
 8000a38:	4463      	add	r3, ip
 8000a3a:	881a      	ldrh	r2, [r3, #0]
 8000a3c:	0592      	lsls	r2, r2, #22
 8000a3e:	0d92      	lsrs	r2, r2, #22
 8000a40:	801a      	strh	r2, [r3, #0]
 8000a42:	881a      	ldrh	r2, [r3, #0]
 8000a44:	499d      	ldr	r1, [pc, #628]	@ (8000cbc <HAL_PCD_EP_DB_Transmit+0x2d0>)
 8000a46:	430a      	orrs	r2, r1
 8000a48:	b292      	uxth	r2, r2
 8000a4a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000a4c:	682b      	ldr	r3, [r5, #0]
 8000a4e:	7862      	ldrb	r2, [r4, #1]
 8000a50:	2a00      	cmp	r2, #0
 8000a52:	d133      	bne.n	8000abc <HAL_PCD_EP_DB_Transmit+0xd0>
 8000a54:	3250      	adds	r2, #80	@ 0x50
 8000a56:	5a9a      	ldrh	r2, [r3, r2]
 8000a58:	189a      	adds	r2, r3, r2
 8000a5a:	7823      	ldrb	r3, [r4, #0]
 8000a5c:	00db      	lsls	r3, r3, #3
 8000a5e:	189b      	adds	r3, r3, r2
 8000a60:	4a97      	ldr	r2, [pc, #604]	@ (8000cc0 <HAL_PCD_EP_DB_Transmit+0x2d4>)
 8000a62:	4694      	mov	ip, r2
 8000a64:	4463      	add	r3, ip
 8000a66:	881a      	ldrh	r2, [r3, #0]
 8000a68:	0592      	lsls	r2, r2, #22
 8000a6a:	0d92      	lsrs	r2, r2, #22
 8000a6c:	801a      	strh	r2, [r3, #0]
 8000a6e:	881a      	ldrh	r2, [r3, #0]
 8000a70:	4992      	ldr	r1, [pc, #584]	@ (8000cbc <HAL_PCD_EP_DB_Transmit+0x2d0>)
 8000a72:	430a      	orrs	r2, r1
 8000a74:	b292      	uxth	r2, r2
 8000a76:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000a78:	7821      	ldrb	r1, [r4, #0]
 8000a7a:	0028      	movs	r0, r5
 8000a7c:	f003 fc2a 	bl	80042d4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000a80:	0476      	lsls	r6, r6, #17
 8000a82:	d539      	bpl.n	8000af8 <HAL_PCD_EP_DB_Transmit+0x10c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8000a84:	682a      	ldr	r2, [r5, #0]
 8000a86:	7823      	ldrb	r3, [r4, #0]
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	18d2      	adds	r2, r2, r3
 8000a8c:	8811      	ldrh	r1, [r2, #0]
 8000a8e:	4b8d      	ldr	r3, [pc, #564]	@ (8000cc4 <HAL_PCD_EP_DB_Transmit+0x2d8>)
 8000a90:	4019      	ands	r1, r3
 8000a92:	4b8d      	ldr	r3, [pc, #564]	@ (8000cc8 <HAL_PCD_EP_DB_Transmit+0x2dc>)
 8000a94:	430b      	orrs	r3, r1
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	8013      	strh	r3, [r2, #0]
 8000a9a:	e02d      	b.n	8000af8 <HAL_PCD_EP_DB_Transmit+0x10c>
      ep->xfer_len = 0U;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61a3      	str	r3, [r4, #24]
 8000aa0:	e7bd      	b.n	8000a1e <HAL_PCD_EP_DB_Transmit+0x32>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d1d2      	bne.n	8000a4c <HAL_PCD_EP_DB_Transmit+0x60>
 8000aa6:	682b      	ldr	r3, [r5, #0]
 8000aa8:	2250      	movs	r2, #80	@ 0x50
 8000aaa:	5a9a      	ldrh	r2, [r3, r2]
 8000aac:	189b      	adds	r3, r3, r2
 8000aae:	18c0      	adds	r0, r0, r3
 8000ab0:	4b81      	ldr	r3, [pc, #516]	@ (8000cb8 <HAL_PCD_EP_DB_Transmit+0x2cc>)
 8000ab2:	469c      	mov	ip, r3
 8000ab4:	4460      	add	r0, ip
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	8003      	strh	r3, [r0, #0]
 8000aba:	e7c7      	b.n	8000a4c <HAL_PCD_EP_DB_Transmit+0x60>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000abc:	2a01      	cmp	r2, #1
 8000abe:	d1db      	bne.n	8000a78 <HAL_PCD_EP_DB_Transmit+0x8c>
 8000ac0:	324f      	adds	r2, #79	@ 0x4f
 8000ac2:	5a9a      	ldrh	r2, [r3, r2]
 8000ac4:	189b      	adds	r3, r3, r2
 8000ac6:	7822      	ldrb	r2, [r4, #0]
 8000ac8:	00d2      	lsls	r2, r2, #3
 8000aca:	18d3      	adds	r3, r2, r3
 8000acc:	4a7c      	ldr	r2, [pc, #496]	@ (8000cc0 <HAL_PCD_EP_DB_Transmit+0x2d4>)
 8000ace:	4694      	mov	ip, r2
 8000ad0:	4463      	add	r3, ip
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	801a      	strh	r2, [r3, #0]
 8000ad6:	e7cf      	b.n	8000a78 <HAL_PCD_EP_DB_Transmit+0x8c>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000ad8:	0476      	lsls	r6, r6, #17
 8000ada:	d509      	bpl.n	8000af0 <HAL_PCD_EP_DB_Transmit+0x104>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8000adc:	682b      	ldr	r3, [r5, #0]
 8000ade:	0089      	lsls	r1, r1, #2
 8000ae0:	1859      	adds	r1, r3, r1
 8000ae2:	8808      	ldrh	r0, [r1, #0]
 8000ae4:	4b77      	ldr	r3, [pc, #476]	@ (8000cc4 <HAL_PCD_EP_DB_Transmit+0x2d8>)
 8000ae6:	4018      	ands	r0, r3
 8000ae8:	4b77      	ldr	r3, [pc, #476]	@ (8000cc8 <HAL_PCD_EP_DB_Transmit+0x2dc>)
 8000aea:	4303      	orrs	r3, r0
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	800b      	strh	r3, [r1, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8000af0:	2324      	movs	r3, #36	@ 0x24
 8000af2:	5ce3      	ldrb	r3, [r4, r3]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d00f      	beq.n	8000b18 <HAL_PCD_EP_DB_Transmit+0x12c>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8000af8:	6829      	ldr	r1, [r5, #0]
 8000afa:	7823      	ldrb	r3, [r4, #0]
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	18c9      	adds	r1, r1, r3
 8000b00:	880b      	ldrh	r3, [r1, #0]
 8000b02:	4a72      	ldr	r2, [pc, #456]	@ (8000ccc <HAL_PCD_EP_DB_Transmit+0x2e0>)
 8000b04:	4013      	ands	r3, r2
 8000b06:	2230      	movs	r2, #48	@ 0x30
 8000b08:	4053      	eors	r3, r2
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	4a70      	ldr	r2, [pc, #448]	@ (8000cd0 <HAL_PCD_EP_DB_Transmit+0x2e4>)
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	800b      	strh	r3, [r1, #0]

  return HAL_OK;
}
 8000b14:	2000      	movs	r0, #0
 8000b16:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxPctSize;
 8000b18:	6963      	ldr	r3, [r4, #20]
 8000b1a:	189b      	adds	r3, r3, r2
 8000b1c:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8000b1e:	69e3      	ldr	r3, [r4, #28]
 8000b20:	18d3      	adds	r3, r2, r3
 8000b22:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8000b24:	6a21      	ldr	r1, [r4, #32]
 8000b26:	6923      	ldr	r3, [r4, #16]
 8000b28:	4299      	cmp	r1, r3
 8000b2a:	d31a      	bcc.n	8000b62 <HAL_PCD_EP_DB_Transmit+0x176>
          ep->xfer_len_db -= len;
 8000b2c:	1ac9      	subs	r1, r1, r3
 8000b2e:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000b30:	7862      	ldrb	r2, [r4, #1]
 8000b32:	2a00      	cmp	r2, #0
 8000b34:	d13a      	bne.n	8000bac <HAL_PCD_EP_DB_Transmit+0x1c0>
 8000b36:	682a      	ldr	r2, [r5, #0]
 8000b38:	2150      	movs	r1, #80	@ 0x50
 8000b3a:	5a51      	ldrh	r1, [r2, r1]
 8000b3c:	1851      	adds	r1, r2, r1
 8000b3e:	7822      	ldrb	r2, [r4, #0]
 8000b40:	00d2      	lsls	r2, r2, #3
 8000b42:	1852      	adds	r2, r2, r1
 8000b44:	495c      	ldr	r1, [pc, #368]	@ (8000cb8 <HAL_PCD_EP_DB_Transmit+0x2cc>)
 8000b46:	468c      	mov	ip, r1
 8000b48:	4462      	add	r2, ip
 8000b4a:	8811      	ldrh	r1, [r2, #0]
 8000b4c:	0589      	lsls	r1, r1, #22
 8000b4e:	0d89      	lsrs	r1, r1, #22
 8000b50:	8011      	strh	r1, [r2, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d111      	bne.n	8000b7a <HAL_PCD_EP_DB_Transmit+0x18e>
 8000b56:	8811      	ldrh	r1, [r2, #0]
 8000b58:	4858      	ldr	r0, [pc, #352]	@ (8000cbc <HAL_PCD_EP_DB_Transmit+0x2d0>)
 8000b5a:	4301      	orrs	r1, r0
 8000b5c:	b289      	uxth	r1, r1
 8000b5e:	8011      	strh	r1, [r2, #0]
 8000b60:	e026      	b.n	8000bb0 <HAL_PCD_EP_DB_Transmit+0x1c4>
        else if (ep->xfer_len_db == 0U)
 8000b62:	2900      	cmp	r1, #0
 8000b64:	d103      	bne.n	8000b6e <HAL_PCD_EP_DB_Transmit+0x182>
          ep->xfer_fill_db = 0U;
 8000b66:	2324      	movs	r3, #36	@ 0x24
 8000b68:	54e1      	strb	r1, [r4, r3]
          len = TxPctSize;
 8000b6a:	0013      	movs	r3, r2
 8000b6c:	e7e0      	b.n	8000b30 <HAL_PCD_EP_DB_Transmit+0x144>
          ep->xfer_fill_db = 0U;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	2224      	movs	r2, #36	@ 0x24
 8000b72:	54a3      	strb	r3, [r4, r2]
          ep->xfer_len_db = 0U;
 8000b74:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 8000b76:	000b      	movs	r3, r1
 8000b78:	e7da      	b.n	8000b30 <HAL_PCD_EP_DB_Transmit+0x144>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000b7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8000b7c:	d809      	bhi.n	8000b92 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8000b7e:	0859      	lsrs	r1, r3, #1
 8000b80:	07d8      	lsls	r0, r3, #31
 8000b82:	d500      	bpl.n	8000b86 <HAL_PCD_EP_DB_Transmit+0x19a>
 8000b84:	3101      	adds	r1, #1
 8000b86:	8810      	ldrh	r0, [r2, #0]
 8000b88:	0289      	lsls	r1, r1, #10
 8000b8a:	b289      	uxth	r1, r1
 8000b8c:	4301      	orrs	r1, r0
 8000b8e:	8011      	strh	r1, [r2, #0]
 8000b90:	e00e      	b.n	8000bb0 <HAL_PCD_EP_DB_Transmit+0x1c4>
 8000b92:	0959      	lsrs	r1, r3, #5
 8000b94:	06d8      	lsls	r0, r3, #27
 8000b96:	d100      	bne.n	8000b9a <HAL_PCD_EP_DB_Transmit+0x1ae>
 8000b98:	3901      	subs	r1, #1
 8000b9a:	8810      	ldrh	r0, [r2, #0]
 8000b9c:	0289      	lsls	r1, r1, #10
 8000b9e:	b289      	uxth	r1, r1
 8000ba0:	4308      	orrs	r0, r1
 8000ba2:	4946      	ldr	r1, [pc, #280]	@ (8000cbc <HAL_PCD_EP_DB_Transmit+0x2d0>)
 8000ba4:	4301      	orrs	r1, r0
 8000ba6:	b289      	uxth	r1, r1
 8000ba8:	8011      	strh	r1, [r2, #0]
 8000baa:	e001      	b.n	8000bb0 <HAL_PCD_EP_DB_Transmit+0x1c4>
 8000bac:	2a01      	cmp	r2, #1
 8000bae:	d006      	beq.n	8000bbe <HAL_PCD_EP_DB_Transmit+0x1d2>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8000bb0:	6828      	ldr	r0, [r5, #0]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	8922      	ldrh	r2, [r4, #8]
 8000bb6:	6961      	ldr	r1, [r4, #20]
 8000bb8:	f001 ff20 	bl	80029fc <USB_WritePMA>
 8000bbc:	e79c      	b.n	8000af8 <HAL_PCD_EP_DB_Transmit+0x10c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000bbe:	682a      	ldr	r2, [r5, #0]
 8000bc0:	2150      	movs	r1, #80	@ 0x50
 8000bc2:	5a51      	ldrh	r1, [r2, r1]
 8000bc4:	1851      	adds	r1, r2, r1
 8000bc6:	7822      	ldrb	r2, [r4, #0]
 8000bc8:	00d2      	lsls	r2, r2, #3
 8000bca:	1852      	adds	r2, r2, r1
 8000bcc:	493a      	ldr	r1, [pc, #232]	@ (8000cb8 <HAL_PCD_EP_DB_Transmit+0x2cc>)
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4462      	add	r2, ip
 8000bd2:	b299      	uxth	r1, r3
 8000bd4:	8011      	strh	r1, [r2, #0]
 8000bd6:	e7eb      	b.n	8000bb0 <HAL_PCD_EP_DB_Transmit+0x1c4>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000bd8:	6802      	ldr	r2, [r0, #0]
 8000bda:	2350      	movs	r3, #80	@ 0x50
 8000bdc:	5ad3      	ldrh	r3, [r2, r3]
 8000bde:	7809      	ldrb	r1, [r1, #0]
 8000be0:	00c8      	lsls	r0, r1, #3
 8000be2:	181b      	adds	r3, r3, r0
 8000be4:	189b      	adds	r3, r3, r2
 8000be6:	4a36      	ldr	r2, [pc, #216]	@ (8000cc0 <HAL_PCD_EP_DB_Transmit+0x2d4>)
 8000be8:	4694      	mov	ip, r2
 8000bea:	4463      	add	r3, ip
 8000bec:	881a      	ldrh	r2, [r3, #0]
 8000bee:	0592      	lsls	r2, r2, #22
 8000bf0:	0d92      	lsrs	r2, r2, #22
    if (ep->xfer_len >= TxPctSize)
 8000bf2:	69a3      	ldr	r3, [r4, #24]
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d341      	bcc.n	8000c7c <HAL_PCD_EP_DB_Transmit+0x290>
      ep->xfer_len -= TxPctSize;
 8000bf8:	1a9b      	subs	r3, r3, r2
 8000bfa:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8000bfc:	69a3      	ldr	r3, [r4, #24]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d168      	bne.n	8000cd4 <HAL_PCD_EP_DB_Transmit+0x2e8>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000c02:	7863      	ldrb	r3, [r4, #1]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d13c      	bne.n	8000c82 <HAL_PCD_EP_DB_Transmit+0x296>
 8000c08:	682b      	ldr	r3, [r5, #0]
 8000c0a:	2250      	movs	r2, #80	@ 0x50
 8000c0c:	5a9a      	ldrh	r2, [r3, r2]
 8000c0e:	189b      	adds	r3, r3, r2
 8000c10:	181b      	adds	r3, r3, r0
 8000c12:	4a29      	ldr	r2, [pc, #164]	@ (8000cb8 <HAL_PCD_EP_DB_Transmit+0x2cc>)
 8000c14:	4694      	mov	ip, r2
 8000c16:	4463      	add	r3, ip
 8000c18:	881a      	ldrh	r2, [r3, #0]
 8000c1a:	0592      	lsls	r2, r2, #22
 8000c1c:	0d92      	lsrs	r2, r2, #22
 8000c1e:	801a      	strh	r2, [r3, #0]
 8000c20:	881a      	ldrh	r2, [r3, #0]
 8000c22:	4926      	ldr	r1, [pc, #152]	@ (8000cbc <HAL_PCD_EP_DB_Transmit+0x2d0>)
 8000c24:	430a      	orrs	r2, r1
 8000c26:	b292      	uxth	r2, r2
 8000c28:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000c2a:	682b      	ldr	r3, [r5, #0]
 8000c2c:	7862      	ldrb	r2, [r4, #1]
 8000c2e:	2a00      	cmp	r2, #0
 8000c30:	d134      	bne.n	8000c9c <HAL_PCD_EP_DB_Transmit+0x2b0>
 8000c32:	3250      	adds	r2, #80	@ 0x50
 8000c34:	5a9a      	ldrh	r2, [r3, r2]
 8000c36:	189b      	adds	r3, r3, r2
 8000c38:	7822      	ldrb	r2, [r4, #0]
 8000c3a:	00d2      	lsls	r2, r2, #3
 8000c3c:	189b      	adds	r3, r3, r2
 8000c3e:	4a20      	ldr	r2, [pc, #128]	@ (8000cc0 <HAL_PCD_EP_DB_Transmit+0x2d4>)
 8000c40:	4694      	mov	ip, r2
 8000c42:	4463      	add	r3, ip
 8000c44:	881a      	ldrh	r2, [r3, #0]
 8000c46:	0592      	lsls	r2, r2, #22
 8000c48:	0d92      	lsrs	r2, r2, #22
 8000c4a:	801a      	strh	r2, [r3, #0]
 8000c4c:	881a      	ldrh	r2, [r3, #0]
 8000c4e:	491b      	ldr	r1, [pc, #108]	@ (8000cbc <HAL_PCD_EP_DB_Transmit+0x2d0>)
 8000c50:	430a      	orrs	r2, r1
 8000c52:	b292      	uxth	r2, r2
 8000c54:	801a      	strh	r2, [r3, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000c56:	7821      	ldrb	r1, [r4, #0]
 8000c58:	0028      	movs	r0, r5
 8000c5a:	f003 fb3b 	bl	80042d4 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8000c5e:	0476      	lsls	r6, r6, #17
 8000c60:	d500      	bpl.n	8000c64 <HAL_PCD_EP_DB_Transmit+0x278>
 8000c62:	e749      	b.n	8000af8 <HAL_PCD_EP_DB_Transmit+0x10c>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8000c64:	682a      	ldr	r2, [r5, #0]
 8000c66:	7823      	ldrb	r3, [r4, #0]
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	18d2      	adds	r2, r2, r3
 8000c6c:	8811      	ldrh	r1, [r2, #0]
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <HAL_PCD_EP_DB_Transmit+0x2d8>)
 8000c70:	4019      	ands	r1, r3
 8000c72:	4b15      	ldr	r3, [pc, #84]	@ (8000cc8 <HAL_PCD_EP_DB_Transmit+0x2dc>)
 8000c74:	430b      	orrs	r3, r1
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	8013      	strh	r3, [r2, #0]
 8000c7a:	e73d      	b.n	8000af8 <HAL_PCD_EP_DB_Transmit+0x10c>
      ep->xfer_len = 0U;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61a3      	str	r3, [r4, #24]
 8000c80:	e7bc      	b.n	8000bfc <HAL_PCD_EP_DB_Transmit+0x210>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d1d1      	bne.n	8000c2a <HAL_PCD_EP_DB_Transmit+0x23e>
 8000c86:	682b      	ldr	r3, [r5, #0]
 8000c88:	2250      	movs	r2, #80	@ 0x50
 8000c8a:	5a9a      	ldrh	r2, [r3, r2]
 8000c8c:	189b      	adds	r3, r3, r2
 8000c8e:	181b      	adds	r3, r3, r0
 8000c90:	4a09      	ldr	r2, [pc, #36]	@ (8000cb8 <HAL_PCD_EP_DB_Transmit+0x2cc>)
 8000c92:	4694      	mov	ip, r2
 8000c94:	4463      	add	r3, ip
 8000c96:	2200      	movs	r2, #0
 8000c98:	801a      	strh	r2, [r3, #0]
 8000c9a:	e7c6      	b.n	8000c2a <HAL_PCD_EP_DB_Transmit+0x23e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000c9c:	2a01      	cmp	r2, #1
 8000c9e:	d1da      	bne.n	8000c56 <HAL_PCD_EP_DB_Transmit+0x26a>
 8000ca0:	324f      	adds	r2, #79	@ 0x4f
 8000ca2:	5a9a      	ldrh	r2, [r3, r2]
 8000ca4:	189b      	adds	r3, r3, r2
 8000ca6:	7822      	ldrb	r2, [r4, #0]
 8000ca8:	00d2      	lsls	r2, r2, #3
 8000caa:	189b      	adds	r3, r3, r2
 8000cac:	4a04      	ldr	r2, [pc, #16]	@ (8000cc0 <HAL_PCD_EP_DB_Transmit+0x2d4>)
 8000cae:	4694      	mov	ip, r2
 8000cb0:	4463      	add	r3, ip
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	801a      	strh	r2, [r3, #0]
 8000cb6:	e7ce      	b.n	8000c56 <HAL_PCD_EP_DB_Transmit+0x26a>
 8000cb8:	00000402 	.word	0x00000402
 8000cbc:	ffff8000 	.word	0xffff8000
 8000cc0:	00000406 	.word	0x00000406
 8000cc4:	ffff8f8f 	.word	0xffff8f8f
 8000cc8:	ffffc080 	.word	0xffffc080
 8000ccc:	ffff8fbf 	.word	0xffff8fbf
 8000cd0:	ffff8080 	.word	0xffff8080
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8000cd4:	0476      	lsls	r6, r6, #17
 8000cd6:	d409      	bmi.n	8000cec <HAL_PCD_EP_DB_Transmit+0x300>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8000cd8:	682b      	ldr	r3, [r5, #0]
 8000cda:	0089      	lsls	r1, r1, #2
 8000cdc:	1859      	adds	r1, r3, r1
 8000cde:	8808      	ldrh	r0, [r1, #0]
 8000ce0:	4b34      	ldr	r3, [pc, #208]	@ (8000db4 <HAL_PCD_EP_DB_Transmit+0x3c8>)
 8000ce2:	4018      	ands	r0, r3
 8000ce4:	4b34      	ldr	r3, [pc, #208]	@ (8000db8 <HAL_PCD_EP_DB_Transmit+0x3cc>)
 8000ce6:	4303      	orrs	r3, r0
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	800b      	strh	r3, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 8000cec:	2324      	movs	r3, #36	@ 0x24
 8000cee:	5ce3      	ldrb	r3, [r4, r3]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d000      	beq.n	8000cf6 <HAL_PCD_EP_DB_Transmit+0x30a>
 8000cf4:	e700      	b.n	8000af8 <HAL_PCD_EP_DB_Transmit+0x10c>
        ep->xfer_buff += TxPctSize;
 8000cf6:	6963      	ldr	r3, [r4, #20]
 8000cf8:	189b      	adds	r3, r3, r2
 8000cfa:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8000cfc:	69e3      	ldr	r3, [r4, #28]
 8000cfe:	18d3      	adds	r3, r2, r3
 8000d00:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8000d02:	6a21      	ldr	r1, [r4, #32]
 8000d04:	6923      	ldr	r3, [r4, #16]
 8000d06:	4299      	cmp	r1, r3
 8000d08:	d31a      	bcc.n	8000d40 <HAL_PCD_EP_DB_Transmit+0x354>
          ep->xfer_len_db -= len;
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000d0e:	682a      	ldr	r2, [r5, #0]
 8000d10:	7861      	ldrb	r1, [r4, #1]
 8000d12:	2900      	cmp	r1, #0
 8000d14:	d139      	bne.n	8000d8a <HAL_PCD_EP_DB_Transmit+0x39e>
 8000d16:	3150      	adds	r1, #80	@ 0x50
 8000d18:	5a51      	ldrh	r1, [r2, r1]
 8000d1a:	1852      	adds	r2, r2, r1
 8000d1c:	7821      	ldrb	r1, [r4, #0]
 8000d1e:	00c9      	lsls	r1, r1, #3
 8000d20:	1852      	adds	r2, r2, r1
 8000d22:	4926      	ldr	r1, [pc, #152]	@ (8000dbc <HAL_PCD_EP_DB_Transmit+0x3d0>)
 8000d24:	468c      	mov	ip, r1
 8000d26:	4462      	add	r2, ip
 8000d28:	8811      	ldrh	r1, [r2, #0]
 8000d2a:	0589      	lsls	r1, r1, #22
 8000d2c:	0d89      	lsrs	r1, r1, #22
 8000d2e:	8011      	strh	r1, [r2, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d111      	bne.n	8000d58 <HAL_PCD_EP_DB_Transmit+0x36c>
 8000d34:	8811      	ldrh	r1, [r2, #0]
 8000d36:	4822      	ldr	r0, [pc, #136]	@ (8000dc0 <HAL_PCD_EP_DB_Transmit+0x3d4>)
 8000d38:	4301      	orrs	r1, r0
 8000d3a:	b289      	uxth	r1, r1
 8000d3c:	8011      	strh	r1, [r2, #0]
 8000d3e:	e026      	b.n	8000d8e <HAL_PCD_EP_DB_Transmit+0x3a2>
        else if (ep->xfer_len_db == 0U)
 8000d40:	2900      	cmp	r1, #0
 8000d42:	d103      	bne.n	8000d4c <HAL_PCD_EP_DB_Transmit+0x360>
          ep->xfer_fill_db = 0U;
 8000d44:	2324      	movs	r3, #36	@ 0x24
 8000d46:	54e1      	strb	r1, [r4, r3]
          len = TxPctSize;
 8000d48:	0013      	movs	r3, r2
 8000d4a:	e7e0      	b.n	8000d0e <HAL_PCD_EP_DB_Transmit+0x322>
          ep->xfer_len_db = 0U;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8000d50:	2224      	movs	r2, #36	@ 0x24
 8000d52:	54a3      	strb	r3, [r4, r2]
          len = ep->xfer_len_db;
 8000d54:	000b      	movs	r3, r1
 8000d56:	e7da      	b.n	8000d0e <HAL_PCD_EP_DB_Transmit+0x322>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000d58:	2b3e      	cmp	r3, #62	@ 0x3e
 8000d5a:	d809      	bhi.n	8000d70 <HAL_PCD_EP_DB_Transmit+0x384>
 8000d5c:	0859      	lsrs	r1, r3, #1
 8000d5e:	07d8      	lsls	r0, r3, #31
 8000d60:	d500      	bpl.n	8000d64 <HAL_PCD_EP_DB_Transmit+0x378>
 8000d62:	3101      	adds	r1, #1
 8000d64:	8810      	ldrh	r0, [r2, #0]
 8000d66:	0289      	lsls	r1, r1, #10
 8000d68:	b289      	uxth	r1, r1
 8000d6a:	4301      	orrs	r1, r0
 8000d6c:	8011      	strh	r1, [r2, #0]
 8000d6e:	e00e      	b.n	8000d8e <HAL_PCD_EP_DB_Transmit+0x3a2>
 8000d70:	0959      	lsrs	r1, r3, #5
 8000d72:	06d8      	lsls	r0, r3, #27
 8000d74:	d100      	bne.n	8000d78 <HAL_PCD_EP_DB_Transmit+0x38c>
 8000d76:	3901      	subs	r1, #1
 8000d78:	8810      	ldrh	r0, [r2, #0]
 8000d7a:	0289      	lsls	r1, r1, #10
 8000d7c:	b289      	uxth	r1, r1
 8000d7e:	4308      	orrs	r0, r1
 8000d80:	490f      	ldr	r1, [pc, #60]	@ (8000dc0 <HAL_PCD_EP_DB_Transmit+0x3d4>)
 8000d82:	4301      	orrs	r1, r0
 8000d84:	b289      	uxth	r1, r1
 8000d86:	8011      	strh	r1, [r2, #0]
 8000d88:	e001      	b.n	8000d8e <HAL_PCD_EP_DB_Transmit+0x3a2>
 8000d8a:	2901      	cmp	r1, #1
 8000d8c:	d006      	beq.n	8000d9c <HAL_PCD_EP_DB_Transmit+0x3b0>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8000d8e:	6828      	ldr	r0, [r5, #0]
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	8962      	ldrh	r2, [r4, #10]
 8000d94:	6961      	ldr	r1, [r4, #20]
 8000d96:	f001 fe31 	bl	80029fc <USB_WritePMA>
 8000d9a:	e6ad      	b.n	8000af8 <HAL_PCD_EP_DB_Transmit+0x10c>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000d9c:	314f      	adds	r1, #79	@ 0x4f
 8000d9e:	5a51      	ldrh	r1, [r2, r1]
 8000da0:	1852      	adds	r2, r2, r1
 8000da2:	7821      	ldrb	r1, [r4, #0]
 8000da4:	00c9      	lsls	r1, r1, #3
 8000da6:	1852      	adds	r2, r2, r1
 8000da8:	4904      	ldr	r1, [pc, #16]	@ (8000dbc <HAL_PCD_EP_DB_Transmit+0x3d0>)
 8000daa:	468c      	mov	ip, r1
 8000dac:	4462      	add	r2, ip
 8000dae:	b299      	uxth	r1, r3
 8000db0:	8011      	strh	r1, [r2, #0]
 8000db2:	e7ec      	b.n	8000d8e <HAL_PCD_EP_DB_Transmit+0x3a2>
 8000db4:	ffff8f8f 	.word	0xffff8f8f
 8000db8:	ffffc080 	.word	0xffffc080
 8000dbc:	00000406 	.word	0x00000406
 8000dc0:	ffff8000 	.word	0xffff8000

08000dc4 <PCD_EP_ISR_Handler>:
{
 8000dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc6:	46ce      	mov	lr, r9
 8000dc8:	4647      	mov	r7, r8
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	0004      	movs	r4, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000dce:	6820      	ldr	r0, [r4, #0]
 8000dd0:	2344      	movs	r3, #68	@ 0x44
 8000dd2:	5ac3      	ldrh	r3, [r0, r3]
 8000dd4:	b21b      	sxth	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db00      	blt.n	8000ddc <PCD_EP_ISR_Handler+0x18>
 8000dda:	e298      	b.n	800130e <PCD_EP_ISR_Handler+0x54a>
    wIstr = hpcd->Instance->ISTR;
 8000ddc:	2344      	movs	r3, #68	@ 0x44
 8000dde:	5ac3      	ldrh	r3, [r0, r3]
 8000de0:	b299      	uxth	r1, r3
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000de2:	220f      	movs	r2, #15
 8000de4:	001d      	movs	r5, r3
 8000de6:	4015      	ands	r5, r2
    if (epindex == 0U)
 8000de8:	4213      	tst	r3, r2
 8000dea:	d000      	beq.n	8000dee <PCD_EP_ISR_Handler+0x2a>
 8000dec:	e0cb      	b.n	8000f86 <PCD_EP_ISR_Handler+0x1c2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000dee:	06c9      	lsls	r1, r1, #27
 8000df0:	d55d      	bpl.n	8000eae <PCD_EP_ISR_Handler+0xea>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000df2:	8803      	ldrh	r3, [r0, #0]
 8000df4:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000df6:	051b      	lsls	r3, r3, #20
 8000df8:	d500      	bpl.n	8000dfc <PCD_EP_ISR_Handler+0x38>
 8000dfa:	e087      	b.n	8000f0c <PCD_EP_ISR_Handler+0x148>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000dfc:	b212      	sxth	r2, r2
 8000dfe:	2a00      	cmp	r2, #0
 8000e00:	dae5      	bge.n	8000dce <PCD_EP_ISR_Handler+0xa>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000e02:	8803      	ldrh	r3, [r0, #0]
 8000e04:	4ad6      	ldr	r2, [pc, #856]	@ (8001160 <PCD_EP_ISR_Handler+0x39c>)
 8000e06:	4013      	ands	r3, r2
 8000e08:	2280      	movs	r2, #128	@ 0x80
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000e10:	6820      	ldr	r0, [r4, #0]
 8000e12:	2350      	movs	r3, #80	@ 0x50
 8000e14:	5ac3      	ldrh	r3, [r0, r3]
 8000e16:	22a8      	movs	r2, #168	@ 0xa8
 8000e18:	0052      	lsls	r2, r2, #1
 8000e1a:	5ca2      	ldrb	r2, [r4, r2]
 8000e1c:	00d2      	lsls	r2, r2, #3
 8000e1e:	189b      	adds	r3, r3, r2
 8000e20:	181b      	adds	r3, r3, r0
 8000e22:	4ad0      	ldr	r2, [pc, #832]	@ (8001164 <PCD_EP_ISR_Handler+0x3a0>)
 8000e24:	4694      	mov	ip, r2
 8000e26:	4463      	add	r3, ip
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	059b      	lsls	r3, r3, #22
 8000e2c:	0d9b      	lsrs	r3, r3, #22
 8000e2e:	0022      	movs	r2, r4
 8000e30:	3251      	adds	r2, #81	@ 0x51
 8000e32:	32ff      	adds	r2, #255	@ 0xff
 8000e34:	61d3      	str	r3, [r2, #28]
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d00e      	beq.n	8000e58 <PCD_EP_ISR_Handler+0x94>
 8000e3a:	6951      	ldr	r1, [r2, #20]
 8000e3c:	2900      	cmp	r1, #0
 8000e3e:	d00b      	beq.n	8000e58 <PCD_EP_ISR_Handler+0x94>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000e40:	0015      	movs	r5, r2
 8000e42:	88d2      	ldrh	r2, [r2, #6]
 8000e44:	f002 f988 	bl	8003158 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8000e48:	696b      	ldr	r3, [r5, #20]
 8000e4a:	69ea      	ldr	r2, [r5, #28]
 8000e4c:	189b      	adds	r3, r3, r2
 8000e4e:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000e50:	2100      	movs	r1, #0
 8000e52:	0020      	movs	r0, r4
 8000e54:	f003 fa2f 	bl	80042b6 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000e58:	6822      	ldr	r2, [r4, #0]
 8000e5a:	8813      	ldrh	r3, [r2, #0]
 8000e5c:	b299      	uxth	r1, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8000e5e:	051b      	lsls	r3, r3, #20
 8000e60:	d4b5      	bmi.n	8000dce <PCD_EP_ISR_Handler+0xa>
 8000e62:	23c0      	movs	r3, #192	@ 0xc0
 8000e64:	019b      	lsls	r3, r3, #6
 8000e66:	4019      	ands	r1, r3
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d0b0      	beq.n	8000dce <PCD_EP_ISR_Handler+0xa>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000e6c:	2350      	movs	r3, #80	@ 0x50
 8000e6e:	5ad3      	ldrh	r3, [r2, r3]
 8000e70:	18d2      	adds	r2, r2, r3
 8000e72:	4bbc      	ldr	r3, [pc, #752]	@ (8001164 <PCD_EP_ISR_Handler+0x3a0>)
 8000e74:	469c      	mov	ip, r3
 8000e76:	4462      	add	r2, ip
 8000e78:	8813      	ldrh	r3, [r2, #0]
 8000e7a:	059b      	lsls	r3, r3, #22
 8000e7c:	0d9b      	lsrs	r3, r3, #22
 8000e7e:	8013      	strh	r3, [r2, #0]
 8000e80:	0023      	movs	r3, r4
 8000e82:	3351      	adds	r3, #81	@ 0x51
 8000e84:	33ff      	adds	r3, #255	@ 0xff
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d163      	bne.n	8000f54 <PCD_EP_ISR_Handler+0x190>
 8000e8c:	8813      	ldrh	r3, [r2, #0]
 8000e8e:	49b6      	ldr	r1, [pc, #728]	@ (8001168 <PCD_EP_ISR_Handler+0x3a4>)
 8000e90:	430b      	orrs	r3, r1
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	8013      	strh	r3, [r2, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000e96:	6821      	ldr	r1, [r4, #0]
 8000e98:	880b      	ldrh	r3, [r1, #0]
 8000e9a:	4ab4      	ldr	r2, [pc, #720]	@ (800116c <PCD_EP_ISR_Handler+0x3a8>)
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	22c0      	movs	r2, #192	@ 0xc0
 8000ea0:	0192      	lsls	r2, r2, #6
 8000ea2:	405a      	eors	r2, r3
 8000ea4:	4bb2      	ldr	r3, [pc, #712]	@ (8001170 <PCD_EP_ISR_Handler+0x3ac>)
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	800b      	strh	r3, [r1, #0]
 8000eac:	e78f      	b.n	8000dce <PCD_EP_ISR_Handler+0xa>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000eae:	8802      	ldrh	r2, [r0, #0]
 8000eb0:	4bb0      	ldr	r3, [pc, #704]	@ (8001174 <PCD_EP_ISR_Handler+0x3b0>)
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	4bac      	ldr	r3, [pc, #688]	@ (8001168 <PCD_EP_ISR_Handler+0x3a4>)
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ebc:	6821      	ldr	r1, [r4, #0]
 8000ebe:	2350      	movs	r3, #80	@ 0x50
 8000ec0:	5acb      	ldrh	r3, [r1, r3]
 8000ec2:	7c22      	ldrb	r2, [r4, #16]
 8000ec4:	00d2      	lsls	r2, r2, #3
 8000ec6:	189b      	adds	r3, r3, r2
 8000ec8:	185b      	adds	r3, r3, r1
 8000eca:	4aab      	ldr	r2, [pc, #684]	@ (8001178 <PCD_EP_ISR_Handler+0x3b4>)
 8000ecc:	4694      	mov	ip, r2
 8000ece:	4463      	add	r3, ip
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	059b      	lsls	r3, r3, #22
 8000ed4:	0d9b      	lsrs	r3, r3, #22
 8000ed6:	62e3      	str	r3, [r4, #44]	@ 0x2c
        ep->xfer_buff += ep->xfer_count;
 8000ed8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8000eda:	18d3      	adds	r3, r2, r3
 8000edc:	6263      	str	r3, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	0020      	movs	r0, r4
 8000ee2:	f003 f9f7 	bl	80042d4 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000ee6:	7b23      	ldrb	r3, [r4, #12]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d100      	bne.n	8000eee <PCD_EP_ISR_Handler+0x12a>
 8000eec:	e76f      	b.n	8000dce <PCD_EP_ISR_Handler+0xa>
 8000eee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d000      	beq.n	8000ef6 <PCD_EP_ISR_Handler+0x132>
 8000ef4:	e76b      	b.n	8000dce <PCD_EP_ISR_Handler+0xa>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000ef6:	7b23      	ldrb	r3, [r4, #12]
 8000ef8:	6821      	ldr	r1, [r4, #0]
 8000efa:	2280      	movs	r2, #128	@ 0x80
 8000efc:	4252      	negs	r2, r2
 8000efe:	4313      	orrs	r3, r2
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	32cc      	adds	r2, #204	@ 0xcc
 8000f04:	528b      	strh	r3, [r1, r2]
          hpcd->USB_Address = 0U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	7323      	strb	r3, [r4, #12]
 8000f0a:	e760      	b.n	8000dce <PCD_EP_ISR_Handler+0xa>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f0c:	2350      	movs	r3, #80	@ 0x50
 8000f0e:	5ac3      	ldrh	r3, [r0, r3]
 8000f10:	22a8      	movs	r2, #168	@ 0xa8
 8000f12:	0052      	lsls	r2, r2, #1
 8000f14:	5ca2      	ldrb	r2, [r4, r2]
 8000f16:	00d2      	lsls	r2, r2, #3
 8000f18:	189b      	adds	r3, r3, r2
 8000f1a:	181b      	adds	r3, r3, r0
 8000f1c:	4a91      	ldr	r2, [pc, #580]	@ (8001164 <PCD_EP_ISR_Handler+0x3a0>)
 8000f1e:	4694      	mov	ip, r2
 8000f20:	4463      	add	r3, ip
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	059b      	lsls	r3, r3, #22
 8000f26:	0d9b      	lsrs	r3, r3, #22
 8000f28:	0022      	movs	r2, r4
 8000f2a:	3251      	adds	r2, #81	@ 0x51
 8000f2c:	32ff      	adds	r2, #255	@ 0xff
 8000f2e:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000f30:	21a6      	movs	r1, #166	@ 0xa6
 8000f32:	0089      	lsls	r1, r1, #2
 8000f34:	1861      	adds	r1, r4, r1
 8000f36:	88d2      	ldrh	r2, [r2, #6]
 8000f38:	f002 f90e 	bl	8003158 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f3c:	6822      	ldr	r2, [r4, #0]
 8000f3e:	8813      	ldrh	r3, [r2, #0]
 8000f40:	4987      	ldr	r1, [pc, #540]	@ (8001160 <PCD_EP_ISR_Handler+0x39c>)
 8000f42:	400b      	ands	r3, r1
 8000f44:	2180      	movs	r1, #128	@ 0x80
 8000f46:	430b      	orrs	r3, r1
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000f4c:	0020      	movs	r0, r4
 8000f4e:	f003 f9a7 	bl	80042a0 <HAL_PCD_SetupStageCallback>
 8000f52:	e73c      	b.n	8000dce <PCD_EP_ISR_Handler+0xa>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000f54:	2b3e      	cmp	r3, #62	@ 0x3e
 8000f56:	d809      	bhi.n	8000f6c <PCD_EP_ISR_Handler+0x1a8>
 8000f58:	0859      	lsrs	r1, r3, #1
 8000f5a:	07db      	lsls	r3, r3, #31
 8000f5c:	d500      	bpl.n	8000f60 <PCD_EP_ISR_Handler+0x19c>
 8000f5e:	3101      	adds	r1, #1
 8000f60:	8813      	ldrh	r3, [r2, #0]
 8000f62:	0289      	lsls	r1, r1, #10
 8000f64:	b289      	uxth	r1, r1
 8000f66:	430b      	orrs	r3, r1
 8000f68:	8013      	strh	r3, [r2, #0]
 8000f6a:	e794      	b.n	8000e96 <PCD_EP_ISR_Handler+0xd2>
 8000f6c:	0959      	lsrs	r1, r3, #5
 8000f6e:	06db      	lsls	r3, r3, #27
 8000f70:	d100      	bne.n	8000f74 <PCD_EP_ISR_Handler+0x1b0>
 8000f72:	3901      	subs	r1, #1
 8000f74:	8813      	ldrh	r3, [r2, #0]
 8000f76:	0289      	lsls	r1, r1, #10
 8000f78:	b289      	uxth	r1, r1
 8000f7a:	4319      	orrs	r1, r3
 8000f7c:	4b7a      	ldr	r3, [pc, #488]	@ (8001168 <PCD_EP_ISR_Handler+0x3a4>)
 8000f7e:	430b      	orrs	r3, r1
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	8013      	strh	r3, [r2, #0]
 8000f84:	e787      	b.n	8000e96 <PCD_EP_ISR_Handler+0xd2>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000f86:	00ae      	lsls	r6, r5, #2
 8000f88:	1980      	adds	r0, r0, r6
 8000f8a:	8803      	ldrh	r3, [r0, #0]
 8000f8c:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db46      	blt.n	8001022 <PCD_EP_ISR_Handler+0x25e>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000f94:	063b      	lsls	r3, r7, #24
 8000f96:	d400      	bmi.n	8000f9a <PCD_EP_ISR_Handler+0x1d6>
 8000f98:	e719      	b.n	8000dce <PCD_EP_ISR_Handler+0xa>
        ep = &hpcd->IN_ep[epindex];
 8000f9a:	00ab      	lsls	r3, r5, #2
 8000f9c:	1959      	adds	r1, r3, r5
 8000f9e:	00c9      	lsls	r1, r1, #3
 8000fa0:	3110      	adds	r1, #16
 8000fa2:	1861      	adds	r1, r4, r1
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000fa4:	6820      	ldr	r0, [r4, #0]
 8000fa6:	1980      	adds	r0, r0, r6
 8000fa8:	8806      	ldrh	r6, [r0, #0]
 8000faa:	4a72      	ldr	r2, [pc, #456]	@ (8001174 <PCD_EP_ISR_Handler+0x3b0>)
 8000fac:	4016      	ands	r6, r2
 8000fae:	4a6e      	ldr	r2, [pc, #440]	@ (8001168 <PCD_EP_ISR_Handler+0x3a4>)
 8000fb0:	4332      	orrs	r2, r6
 8000fb2:	b292      	uxth	r2, r2
 8000fb4:	8002      	strh	r2, [r0, #0]
        if (ep->type == EP_TYPE_ISOC)
 8000fb6:	195b      	adds	r3, r3, r5
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	18e3      	adds	r3, r4, r3
 8000fbc:	7cdb      	ldrb	r3, [r3, #19]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d100      	bne.n	8000fc4 <PCD_EP_ISR_Handler+0x200>
 8000fc2:	e109      	b.n	80011d8 <PCD_EP_ISR_Handler+0x414>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8000fc4:	05fb      	lsls	r3, r7, #23
 8000fc6:	d500      	bpl.n	8000fca <PCD_EP_ISR_Handler+0x206>
 8000fc8:	e19c      	b.n	8001304 <PCD_EP_ISR_Handler+0x540>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000fca:	6820      	ldr	r0, [r4, #0]
 8000fcc:	2350      	movs	r3, #80	@ 0x50
 8000fce:	5ac3      	ldrh	r3, [r0, r3]
 8000fd0:	00aa      	lsls	r2, r5, #2
 8000fd2:	1952      	adds	r2, r2, r5
 8000fd4:	00d2      	lsls	r2, r2, #3
 8000fd6:	18a2      	adds	r2, r4, r2
 8000fd8:	7c16      	ldrb	r6, [r2, #16]
 8000fda:	00f2      	lsls	r2, r6, #3
 8000fdc:	189b      	adds	r3, r3, r2
 8000fde:	181b      	adds	r3, r3, r0
 8000fe0:	4a65      	ldr	r2, [pc, #404]	@ (8001178 <PCD_EP_ISR_Handler+0x3b4>)
 8000fe2:	4694      	mov	ip, r2
 8000fe4:	4463      	add	r3, ip
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	059b      	lsls	r3, r3, #22
 8000fea:	0d9b      	lsrs	r3, r3, #22
            if (ep->xfer_len > TxPctSize)
 8000fec:	1c6f      	adds	r7, r5, #1
 8000fee:	00ba      	lsls	r2, r7, #2
 8000ff0:	19d2      	adds	r2, r2, r7
 8000ff2:	00d2      	lsls	r2, r2, #3
 8000ff4:	5912      	ldr	r2, [r2, r4]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d800      	bhi.n	8000ffc <PCD_EP_ISR_Handler+0x238>
 8000ffa:	e167      	b.n	80012cc <PCD_EP_ISR_Handler+0x508>
              ep->xfer_len -= TxPctSize;
 8000ffc:	46bc      	mov	ip, r7
 8000ffe:	00bf      	lsls	r7, r7, #2
 8001000:	4467      	add	r7, ip
 8001002:	00ff      	lsls	r7, r7, #3
 8001004:	1ad2      	subs	r2, r2, r3
 8001006:	513a      	str	r2, [r7, r4]
            if (ep->xfer_len == 0U)
 8001008:	1c6f      	adds	r7, r5, #1
 800100a:	00ba      	lsls	r2, r7, #2
 800100c:	19d2      	adds	r2, r2, r7
 800100e:	00d2      	lsls	r2, r2, #3
 8001010:	5912      	ldr	r2, [r2, r4]
 8001012:	2a00      	cmp	r2, #0
 8001014:	d000      	beq.n	8001018 <PCD_EP_ISR_Handler+0x254>
 8001016:	e160      	b.n	80012da <PCD_EP_ISR_Handler+0x516>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001018:	0031      	movs	r1, r6
 800101a:	0020      	movs	r0, r4
 800101c:	f003 f95a 	bl	80042d4 <HAL_PCD_DataInStageCallback>
 8001020:	e6d5      	b.n	8000dce <PCD_EP_ISR_Handler+0xa>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001022:	8803      	ldrh	r3, [r0, #0]
 8001024:	4a4e      	ldr	r2, [pc, #312]	@ (8001160 <PCD_EP_ISR_Handler+0x39c>)
 8001026:	4013      	ands	r3, r2
 8001028:	2280      	movs	r2, #128	@ 0x80
 800102a:	4313      	orrs	r3, r2
 800102c:	b29b      	uxth	r3, r3
 800102e:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001030:	1972      	adds	r2, r6, r5
 8001032:	00d2      	lsls	r2, r2, #3
 8001034:	3251      	adds	r2, #81	@ 0x51
 8001036:	32ff      	adds	r2, #255	@ 0xff
 8001038:	4690      	mov	r8, r2
 800103a:	44a0      	add	r8, r4
        if (ep->doublebuffer == 0U)
 800103c:	1973      	adds	r3, r6, r5
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	18e3      	adds	r3, r4, r3
 8001042:	335d      	adds	r3, #93	@ 0x5d
 8001044:	33ff      	adds	r3, #255	@ 0xff
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d14b      	bne.n	80010e4 <PCD_EP_ISR_Handler+0x320>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800104c:	6820      	ldr	r0, [r4, #0]
 800104e:	3350      	adds	r3, #80	@ 0x50
 8001050:	5ac2      	ldrh	r2, [r0, r3]
 8001052:	1973      	adds	r3, r6, r5
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	18e3      	adds	r3, r4, r3
 8001058:	3351      	adds	r3, #81	@ 0x51
 800105a:	33ff      	adds	r3, #255	@ 0xff
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	18d3      	adds	r3, r2, r3
 8001062:	181b      	adds	r3, r3, r0
 8001064:	4a3f      	ldr	r2, [pc, #252]	@ (8001164 <PCD_EP_ISR_Handler+0x3a0>)
 8001066:	4694      	mov	ip, r2
 8001068:	4463      	add	r3, ip
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	059b      	lsls	r3, r3, #22
 800106e:	0d9a      	lsrs	r2, r3, #22
 8001070:	4691      	mov	r9, r2
          if (count != 0U)
 8001072:	2b00      	cmp	r3, #0
 8001074:	d128      	bne.n	80010c8 <PCD_EP_ISR_Handler+0x304>
        ep->xfer_count += count;
 8001076:	00aa      	lsls	r2, r5, #2
 8001078:	1952      	adds	r2, r2, r5
 800107a:	00d2      	lsls	r2, r2, #3
 800107c:	18a2      	adds	r2, r4, r2
 800107e:	0010      	movs	r0, r2
 8001080:	306d      	adds	r0, #109	@ 0x6d
 8001082:	30ff      	adds	r0, #255	@ 0xff
 8001084:	6803      	ldr	r3, [r0, #0]
 8001086:	4649      	mov	r1, r9
 8001088:	444b      	add	r3, r9
 800108a:	6003      	str	r3, [r0, #0]
        ep->xfer_buff += count;
 800108c:	3808      	subs	r0, #8
 800108e:	6803      	ldr	r3, [r0, #0]
 8001090:	444b      	add	r3, r9
 8001092:	6003      	str	r3, [r0, #0]
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001094:	3269      	adds	r2, #105	@ 0x69
 8001096:	32ff      	adds	r2, #255	@ 0xff
 8001098:	6813      	ldr	r3, [r2, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d009      	beq.n	80010b2 <PCD_EP_ISR_Handler+0x2ee>
 800109e:	00ab      	lsls	r3, r5, #2
 80010a0:	195b      	adds	r3, r3, r5
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	18e3      	adds	r3, r4, r3
 80010a6:	3361      	adds	r3, #97	@ 0x61
 80010a8:	33ff      	adds	r3, #255	@ 0xff
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4299      	cmp	r1, r3
 80010ae:	d300      	bcc.n	80010b2 <PCD_EP_ISR_Handler+0x2ee>
 80010b0:	e08d      	b.n	80011ce <PCD_EP_ISR_Handler+0x40a>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80010b2:	00ab      	lsls	r3, r5, #2
 80010b4:	195b      	adds	r3, r3, r5
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	18e3      	adds	r3, r4, r3
 80010ba:	3351      	adds	r3, #81	@ 0x51
 80010bc:	33ff      	adds	r3, #255	@ 0xff
 80010be:	7819      	ldrb	r1, [r3, #0]
 80010c0:	0020      	movs	r0, r4
 80010c2:	f003 f8f8 	bl	80042b6 <HAL_PCD_DataOutStageCallback>
 80010c6:	e765      	b.n	8000f94 <PCD_EP_ISR_Handler+0x1d0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80010c8:	1973      	adds	r3, r6, r5
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	18e3      	adds	r3, r4, r3
 80010ce:	001a      	movs	r2, r3
 80010d0:	3257      	adds	r2, #87	@ 0x57
 80010d2:	32ff      	adds	r2, #255	@ 0xff
 80010d4:	8812      	ldrh	r2, [r2, #0]
 80010d6:	3365      	adds	r3, #101	@ 0x65
 80010d8:	33ff      	adds	r3, #255	@ 0xff
 80010da:	6819      	ldr	r1, [r3, #0]
 80010dc:	464b      	mov	r3, r9
 80010de:	f002 f83b 	bl	8003158 <USB_ReadPMA>
 80010e2:	e7c8      	b.n	8001076 <PCD_EP_ISR_Handler+0x2b2>
          if (ep->type == EP_TYPE_BULK)
 80010e4:	00ab      	lsls	r3, r5, #2
 80010e6:	195b      	adds	r3, r3, r5
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	18e3      	adds	r3, r4, r3
 80010ec:	3354      	adds	r3, #84	@ 0x54
 80010ee:	33ff      	adds	r3, #255	@ 0xff
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d046      	beq.n	8001184 <PCD_EP_ISR_Handler+0x3c0>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80010f6:	6821      	ldr	r1, [r4, #0]
 80010f8:	00ab      	lsls	r3, r5, #2
 80010fa:	195b      	adds	r3, r3, r5
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	18e3      	adds	r3, r4, r3
 8001100:	3351      	adds	r3, #81	@ 0x51
 8001102:	33ff      	adds	r3, #255	@ 0xff
 8001104:	781a      	ldrb	r2, [r3, #0]
 8001106:	0092      	lsls	r2, r2, #2
 8001108:	1889      	adds	r1, r1, r2
 800110a:	8808      	ldrh	r0, [r1, #0]
 800110c:	4a1b      	ldr	r2, [pc, #108]	@ (800117c <PCD_EP_ISR_Handler+0x3b8>)
 800110e:	4010      	ands	r0, r2
 8001110:	4a1b      	ldr	r2, [pc, #108]	@ (8001180 <PCD_EP_ISR_Handler+0x3bc>)
 8001112:	4302      	orrs	r2, r0
 8001114:	b292      	uxth	r2, r2
 8001116:	800a      	strh	r2, [r1, #0]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001118:	6820      	ldr	r0, [r4, #0]
 800111a:	781a      	ldrb	r2, [r3, #0]
 800111c:	0093      	lsls	r3, r2, #2
 800111e:	18c3      	adds	r3, r0, r3
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	045b      	lsls	r3, r3, #17
 8001124:	d535      	bpl.n	8001192 <PCD_EP_ISR_Handler+0x3ce>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001126:	2350      	movs	r3, #80	@ 0x50
 8001128:	5ac3      	ldrh	r3, [r0, r3]
 800112a:	00d2      	lsls	r2, r2, #3
 800112c:	189b      	adds	r3, r3, r2
 800112e:	181b      	adds	r3, r3, r0
 8001130:	4a11      	ldr	r2, [pc, #68]	@ (8001178 <PCD_EP_ISR_Handler+0x3b4>)
 8001132:	4694      	mov	ip, r2
 8001134:	4463      	add	r3, ip
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	059b      	lsls	r3, r3, #22
 800113a:	0d9a      	lsrs	r2, r3, #22
 800113c:	4691      	mov	r9, r2
              if (count != 0U)
 800113e:	2b00      	cmp	r3, #0
 8001140:	d099      	beq.n	8001076 <PCD_EP_ISR_Handler+0x2b2>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001142:	00ab      	lsls	r3, r5, #2
 8001144:	195b      	adds	r3, r3, r5
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	18e3      	adds	r3, r4, r3
 800114a:	001a      	movs	r2, r3
 800114c:	3259      	adds	r2, #89	@ 0x59
 800114e:	32ff      	adds	r2, #255	@ 0xff
 8001150:	8812      	ldrh	r2, [r2, #0]
 8001152:	3365      	adds	r3, #101	@ 0x65
 8001154:	33ff      	adds	r3, #255	@ 0xff
 8001156:	6819      	ldr	r1, [r3, #0]
 8001158:	464b      	mov	r3, r9
 800115a:	f001 fffd 	bl	8003158 <USB_ReadPMA>
 800115e:	e78a      	b.n	8001076 <PCD_EP_ISR_Handler+0x2b2>
 8001160:	00000f8f 	.word	0x00000f8f
 8001164:	00000406 	.word	0x00000406
 8001168:	ffff8000 	.word	0xffff8000
 800116c:	ffffbf8f 	.word	0xffffbf8f
 8001170:	ffff8080 	.word	0xffff8080
 8001174:	ffff8f0f 	.word	0xffff8f0f
 8001178:	00000402 	.word	0x00000402
 800117c:	ffff8f8f 	.word	0xffff8f8f
 8001180:	ffff80c0 	.word	0xffff80c0
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001184:	003a      	movs	r2, r7
 8001186:	4641      	mov	r1, r8
 8001188:	0020      	movs	r0, r4
 800118a:	f7ff fb2f 	bl	80007ec <HAL_PCD_EP_DB_Receive>
 800118e:	4681      	mov	r9, r0
 8001190:	e771      	b.n	8001076 <PCD_EP_ISR_Handler+0x2b2>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001192:	2350      	movs	r3, #80	@ 0x50
 8001194:	5ac3      	ldrh	r3, [r0, r3]
 8001196:	00d2      	lsls	r2, r2, #3
 8001198:	189b      	adds	r3, r3, r2
 800119a:	181b      	adds	r3, r3, r0
 800119c:	4a5e      	ldr	r2, [pc, #376]	@ (8001318 <PCD_EP_ISR_Handler+0x554>)
 800119e:	4694      	mov	ip, r2
 80011a0:	4463      	add	r3, ip
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	059b      	lsls	r3, r3, #22
 80011a6:	0d9a      	lsrs	r2, r3, #22
 80011a8:	4691      	mov	r9, r2
              if (count != 0U)
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d100      	bne.n	80011b0 <PCD_EP_ISR_Handler+0x3ec>
 80011ae:	e762      	b.n	8001076 <PCD_EP_ISR_Handler+0x2b2>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80011b0:	00ab      	lsls	r3, r5, #2
 80011b2:	195b      	adds	r3, r3, r5
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	18e3      	adds	r3, r4, r3
 80011b8:	001a      	movs	r2, r3
 80011ba:	325b      	adds	r2, #91	@ 0x5b
 80011bc:	32ff      	adds	r2, #255	@ 0xff
 80011be:	8812      	ldrh	r2, [r2, #0]
 80011c0:	3365      	adds	r3, #101	@ 0x65
 80011c2:	33ff      	adds	r3, #255	@ 0xff
 80011c4:	6819      	ldr	r1, [r3, #0]
 80011c6:	464b      	mov	r3, r9
 80011c8:	f001 ffc6 	bl	8003158 <USB_ReadPMA>
 80011cc:	e753      	b.n	8001076 <PCD_EP_ISR_Handler+0x2b2>
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011ce:	6820      	ldr	r0, [r4, #0]
 80011d0:	4641      	mov	r1, r8
 80011d2:	f001 fc27 	bl	8002a24 <USB_EPStartXfer>
 80011d6:	e6dd      	b.n	8000f94 <PCD_EP_ISR_Handler+0x1d0>
          ep->xfer_len = 0U;
 80011d8:	1c6a      	adds	r2, r5, #1
 80011da:	0093      	lsls	r3, r2, #2
 80011dc:	189b      	adds	r3, r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	2200      	movs	r2, #0
 80011e2:	511a      	str	r2, [r3, r4]
          if (ep->doublebuffer != 0U)
 80011e4:	00ab      	lsls	r3, r5, #2
 80011e6:	195b      	adds	r3, r3, r5
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	18e3      	adds	r3, r4, r3
 80011ec:	7f1b      	ldrb	r3, [r3, #28]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d01f      	beq.n	8001232 <PCD_EP_ISR_Handler+0x46e>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80011f2:	067f      	lsls	r7, r7, #25
 80011f4:	d539      	bpl.n	800126a <PCD_EP_ISR_Handler+0x4a6>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80011f6:	00ab      	lsls	r3, r5, #2
 80011f8:	195b      	adds	r3, r3, r5
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	18e3      	adds	r3, r4, r3
 80011fe:	7c5b      	ldrb	r3, [r3, #17]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d11f      	bne.n	8001244 <PCD_EP_ISR_Handler+0x480>
 8001204:	6823      	ldr	r3, [r4, #0]
 8001206:	3250      	adds	r2, #80	@ 0x50
 8001208:	5a9a      	ldrh	r2, [r3, r2]
 800120a:	189a      	adds	r2, r3, r2
 800120c:	00ab      	lsls	r3, r5, #2
 800120e:	195b      	adds	r3, r3, r5
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	18e3      	adds	r3, r4, r3
 8001214:	7c1b      	ldrb	r3, [r3, #16]
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	189b      	adds	r3, r3, r2
 800121a:	4a40      	ldr	r2, [pc, #256]	@ (800131c <PCD_EP_ISR_Handler+0x558>)
 800121c:	4694      	mov	ip, r2
 800121e:	4463      	add	r3, ip
 8001220:	881a      	ldrh	r2, [r3, #0]
 8001222:	0592      	lsls	r2, r2, #22
 8001224:	0d92      	lsrs	r2, r2, #22
 8001226:	801a      	strh	r2, [r3, #0]
 8001228:	881a      	ldrh	r2, [r3, #0]
 800122a:	493d      	ldr	r1, [pc, #244]	@ (8001320 <PCD_EP_ISR_Handler+0x55c>)
 800122c:	430a      	orrs	r2, r1
 800122e:	b292      	uxth	r2, r2
 8001230:	801a      	strh	r2, [r3, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001232:	00ab      	lsls	r3, r5, #2
 8001234:	195b      	adds	r3, r3, r5
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	18e3      	adds	r3, r4, r3
 800123a:	7c19      	ldrb	r1, [r3, #16]
 800123c:	0020      	movs	r0, r4
 800123e:	f003 f849 	bl	80042d4 <HAL_PCD_DataInStageCallback>
 8001242:	e5c4      	b.n	8000dce <PCD_EP_ISR_Handler+0xa>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001244:	2b01      	cmp	r3, #1
 8001246:	d1f4      	bne.n	8001232 <PCD_EP_ISR_Handler+0x46e>
 8001248:	6823      	ldr	r3, [r4, #0]
 800124a:	2250      	movs	r2, #80	@ 0x50
 800124c:	5a9a      	ldrh	r2, [r3, r2]
 800124e:	189a      	adds	r2, r3, r2
 8001250:	00ab      	lsls	r3, r5, #2
 8001252:	195b      	adds	r3, r3, r5
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	18e3      	adds	r3, r4, r3
 8001258:	7c1b      	ldrb	r3, [r3, #16]
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	189b      	adds	r3, r3, r2
 800125e:	4a2f      	ldr	r2, [pc, #188]	@ (800131c <PCD_EP_ISR_Handler+0x558>)
 8001260:	4694      	mov	ip, r2
 8001262:	4463      	add	r3, ip
 8001264:	2200      	movs	r2, #0
 8001266:	801a      	strh	r2, [r3, #0]
 8001268:	e7e3      	b.n	8001232 <PCD_EP_ISR_Handler+0x46e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800126a:	6822      	ldr	r2, [r4, #0]
 800126c:	00ab      	lsls	r3, r5, #2
 800126e:	195b      	adds	r3, r3, r5
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	18e3      	adds	r3, r4, r3
 8001274:	7c5b      	ldrb	r3, [r3, #17]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d116      	bne.n	80012a8 <PCD_EP_ISR_Handler+0x4e4>
 800127a:	3350      	adds	r3, #80	@ 0x50
 800127c:	5ad3      	ldrh	r3, [r2, r3]
 800127e:	18d2      	adds	r2, r2, r3
 8001280:	00ab      	lsls	r3, r5, #2
 8001282:	195b      	adds	r3, r3, r5
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	18e3      	adds	r3, r4, r3
 8001288:	7c1b      	ldrb	r3, [r3, #16]
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	189b      	adds	r3, r3, r2
 800128e:	4a22      	ldr	r2, [pc, #136]	@ (8001318 <PCD_EP_ISR_Handler+0x554>)
 8001290:	4694      	mov	ip, r2
 8001292:	4463      	add	r3, ip
 8001294:	881a      	ldrh	r2, [r3, #0]
 8001296:	0592      	lsls	r2, r2, #22
 8001298:	0d92      	lsrs	r2, r2, #22
 800129a:	801a      	strh	r2, [r3, #0]
 800129c:	881a      	ldrh	r2, [r3, #0]
 800129e:	4920      	ldr	r1, [pc, #128]	@ (8001320 <PCD_EP_ISR_Handler+0x55c>)
 80012a0:	430a      	orrs	r2, r1
 80012a2:	b292      	uxth	r2, r2
 80012a4:	801a      	strh	r2, [r3, #0]
 80012a6:	e7c4      	b.n	8001232 <PCD_EP_ISR_Handler+0x46e>
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d1c2      	bne.n	8001232 <PCD_EP_ISR_Handler+0x46e>
 80012ac:	334f      	adds	r3, #79	@ 0x4f
 80012ae:	5ad3      	ldrh	r3, [r2, r3]
 80012b0:	18d2      	adds	r2, r2, r3
 80012b2:	00ab      	lsls	r3, r5, #2
 80012b4:	195b      	adds	r3, r3, r5
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	18e3      	adds	r3, r4, r3
 80012ba:	7c1b      	ldrb	r3, [r3, #16]
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	189b      	adds	r3, r3, r2
 80012c0:	4a15      	ldr	r2, [pc, #84]	@ (8001318 <PCD_EP_ISR_Handler+0x554>)
 80012c2:	4694      	mov	ip, r2
 80012c4:	4463      	add	r3, ip
 80012c6:	2200      	movs	r2, #0
 80012c8:	801a      	strh	r2, [r3, #0]
 80012ca:	e7b2      	b.n	8001232 <PCD_EP_ISR_Handler+0x46e>
              ep->xfer_len = 0U;
 80012cc:	1c6f      	adds	r7, r5, #1
 80012ce:	00ba      	lsls	r2, r7, #2
 80012d0:	19d2      	adds	r2, r2, r7
 80012d2:	00d2      	lsls	r2, r2, #3
 80012d4:	2700      	movs	r7, #0
 80012d6:	5117      	str	r7, [r2, r4]
 80012d8:	e696      	b.n	8001008 <PCD_EP_ISR_Handler+0x244>
              ep->xfer_buff += TxPctSize;
 80012da:	00aa      	lsls	r2, r5, #2
 80012dc:	1952      	adds	r2, r2, r5
 80012de:	00d2      	lsls	r2, r2, #3
 80012e0:	18a2      	adds	r2, r4, r2
 80012e2:	6a56      	ldr	r6, [r2, #36]	@ 0x24
 80012e4:	18f6      	adds	r6, r6, r3
 80012e6:	6256      	str	r6, [r2, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 80012e8:	3501      	adds	r5, #1
 80012ea:	00aa      	lsls	r2, r5, #2
 80012ec:	1956      	adds	r6, r2, r5
 80012ee:	00f6      	lsls	r6, r6, #3
 80012f0:	19a6      	adds	r6, r4, r6
 80012f2:	6876      	ldr	r6, [r6, #4]
 80012f4:	1952      	adds	r2, r2, r5
 80012f6:	00d2      	lsls	r2, r2, #3
 80012f8:	18a2      	adds	r2, r4, r2
 80012fa:	199b      	adds	r3, r3, r6
 80012fc:	6053      	str	r3, [r2, #4]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012fe:	f001 fb91 	bl	8002a24 <USB_EPStartXfer>
 8001302:	e564      	b.n	8000dce <PCD_EP_ISR_Handler+0xa>
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001304:	003a      	movs	r2, r7
 8001306:	0020      	movs	r0, r4
 8001308:	f7ff fb70 	bl	80009ec <HAL_PCD_EP_DB_Transmit>
 800130c:	e55f      	b.n	8000dce <PCD_EP_ISR_Handler+0xa>
}
 800130e:	2000      	movs	r0, #0
 8001310:	bcc0      	pop	{r6, r7}
 8001312:	46b9      	mov	r9, r7
 8001314:	46b0      	mov	r8, r6
 8001316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001318:	00000406 	.word	0x00000406
 800131c:	00000402 	.word	0x00000402
 8001320:	ffff8000 	.word	0xffff8000

08001324 <HAL_PCD_SetAddress>:
{
 8001324:	b570      	push	{r4, r5, r6, lr}
 8001326:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8001328:	23a4      	movs	r3, #164	@ 0xa4
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	5cc3      	ldrb	r3, [r0, r3]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d00b      	beq.n	800134a <HAL_PCD_SetAddress+0x26>
 8001332:	25a4      	movs	r5, #164	@ 0xa4
 8001334:	00ad      	lsls	r5, r5, #2
 8001336:	2301      	movs	r3, #1
 8001338:	5543      	strb	r3, [r0, r5]
  hpcd->USB_Address = address;
 800133a:	7301      	strb	r1, [r0, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800133c:	6800      	ldr	r0, [r0, #0]
 800133e:	f001 fb47 	bl	80029d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001342:	2300      	movs	r3, #0
 8001344:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8001346:	2000      	movs	r0, #0
}
 8001348:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 800134a:	2002      	movs	r0, #2
 800134c:	e7fc      	b.n	8001348 <HAL_PCD_SetAddress+0x24>
	...

08001350 <HAL_PCD_IRQHandler>:
{
 8001350:	b570      	push	{r4, r5, r6, lr}
 8001352:	0004      	movs	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001354:	6800      	ldr	r0, [r0, #0]
 8001356:	f001 fb4d 	bl	80029f4 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800135a:	0403      	lsls	r3, r0, #16
 800135c:	d418      	bmi.n	8001390 <HAL_PCD_IRQHandler+0x40>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800135e:	0543      	lsls	r3, r0, #21
 8001360:	d41a      	bmi.n	8001398 <HAL_PCD_IRQHandler+0x48>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001362:	0443      	lsls	r3, r0, #17
 8001364:	d426      	bmi.n	80013b4 <HAL_PCD_IRQHandler+0x64>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001366:	0483      	lsls	r3, r0, #18
 8001368:	d42b      	bmi.n	80013c2 <HAL_PCD_IRQHandler+0x72>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800136a:	04c3      	lsls	r3, r0, #19
 800136c:	d430      	bmi.n	80013d0 <HAL_PCD_IRQHandler+0x80>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800136e:	0503      	lsls	r3, r0, #20
 8001370:	d451      	bmi.n	8001416 <HAL_PCD_IRQHandler+0xc6>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001372:	0603      	lsls	r3, r0, #24
 8001374:	d500      	bpl.n	8001378 <HAL_PCD_IRQHandler+0x28>
 8001376:	e065      	b.n	8001444 <HAL_PCD_IRQHandler+0xf4>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001378:	0583      	lsls	r3, r0, #22
 800137a:	d500      	bpl.n	800137e <HAL_PCD_IRQHandler+0x2e>
 800137c:	e090      	b.n	80014a0 <HAL_PCD_IRQHandler+0x150>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800137e:	05c0      	lsls	r0, r0, #23
 8001380:	d51e      	bpl.n	80013c0 <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001382:	6821      	ldr	r1, [r4, #0]
 8001384:	2244      	movs	r2, #68	@ 0x44
 8001386:	5a8b      	ldrh	r3, [r1, r2]
 8001388:	484a      	ldr	r0, [pc, #296]	@ (80014b4 <HAL_PCD_IRQHandler+0x164>)
 800138a:	4003      	ands	r3, r0
 800138c:	528b      	strh	r3, [r1, r2]
    return;
 800138e:	e017      	b.n	80013c0 <HAL_PCD_IRQHandler+0x70>
    (void)PCD_EP_ISR_Handler(hpcd);
 8001390:	0020      	movs	r0, r4
 8001392:	f7ff fd17 	bl	8000dc4 <PCD_EP_ISR_Handler>
    return;
 8001396:	e013      	b.n	80013c0 <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001398:	6821      	ldr	r1, [r4, #0]
 800139a:	2244      	movs	r2, #68	@ 0x44
 800139c:	5a8b      	ldrh	r3, [r1, r2]
 800139e:	4846      	ldr	r0, [pc, #280]	@ (80014b8 <HAL_PCD_IRQHandler+0x168>)
 80013a0:	4003      	ands	r3, r0
 80013a2:	528b      	strh	r3, [r1, r2]
    HAL_PCD_ResetCallback(hpcd);
 80013a4:	0020      	movs	r0, r4
 80013a6:	f002 ffa9 	bl	80042fc <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80013aa:	2100      	movs	r1, #0
 80013ac:	0020      	movs	r0, r4
 80013ae:	f7ff ffb9 	bl	8001324 <HAL_PCD_SetAddress>
    return;
 80013b2:	e005      	b.n	80013c0 <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80013b4:	6821      	ldr	r1, [r4, #0]
 80013b6:	2244      	movs	r2, #68	@ 0x44
 80013b8:	5a8b      	ldrh	r3, [r1, r2]
 80013ba:	4840      	ldr	r0, [pc, #256]	@ (80014bc <HAL_PCD_IRQHandler+0x16c>)
 80013bc:	4003      	ands	r3, r0
 80013be:	528b      	strh	r3, [r1, r2]
}
 80013c0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80013c2:	6821      	ldr	r1, [r4, #0]
 80013c4:	2244      	movs	r2, #68	@ 0x44
 80013c6:	5a8b      	ldrh	r3, [r1, r2]
 80013c8:	483d      	ldr	r0, [pc, #244]	@ (80014c0 <HAL_PCD_IRQHandler+0x170>)
 80013ca:	4003      	ands	r3, r0
 80013cc:	528b      	strh	r3, [r1, r2]
    return;
 80013ce:	e7f7      	b.n	80013c0 <HAL_PCD_IRQHandler+0x70>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80013d0:	6821      	ldr	r1, [r4, #0]
 80013d2:	2340      	movs	r3, #64	@ 0x40
 80013d4:	5aca      	ldrh	r2, [r1, r3]
 80013d6:	2004      	movs	r0, #4
 80013d8:	4382      	bics	r2, r0
 80013da:	52ca      	strh	r2, [r1, r3]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80013dc:	6821      	ldr	r1, [r4, #0]
 80013de:	5aca      	ldrh	r2, [r1, r3]
 80013e0:	3004      	adds	r0, #4
 80013e2:	4382      	bics	r2, r0
 80013e4:	52ca      	strh	r2, [r1, r3]
    if (hpcd->LPM_State == LPM_L1)
 80013e6:	23b2      	movs	r3, #178	@ 0xb2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	5ce3      	ldrb	r3, [r4, r3]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d009      	beq.n	8001404 <HAL_PCD_IRQHandler+0xb4>
    HAL_PCD_ResumeCallback(hpcd);
 80013f0:	0020      	movs	r0, r4
 80013f2:	f002 ffa7 	bl	8004344 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80013f6:	6821      	ldr	r1, [r4, #0]
 80013f8:	2244      	movs	r2, #68	@ 0x44
 80013fa:	5a8b      	ldrh	r3, [r1, r2]
 80013fc:	4831      	ldr	r0, [pc, #196]	@ (80014c4 <HAL_PCD_IRQHandler+0x174>)
 80013fe:	4003      	ands	r3, r0
 8001400:	528b      	strh	r3, [r1, r2]
    return;
 8001402:	e7dd      	b.n	80013c0 <HAL_PCD_IRQHandler+0x70>
      hpcd->LPM_State = LPM_L0;
 8001404:	23b2      	movs	r3, #178	@ 0xb2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	2200      	movs	r2, #0
 800140a:	54e2      	strb	r2, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800140c:	2100      	movs	r1, #0
 800140e:	0020      	movs	r0, r4
 8001410:	f000 f9e1 	bl	80017d6 <HAL_PCDEx_LPM_Callback>
 8001414:	e7ec      	b.n	80013f0 <HAL_PCD_IRQHandler+0xa0>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001416:	6821      	ldr	r1, [r4, #0]
 8001418:	2240      	movs	r2, #64	@ 0x40
 800141a:	5a8b      	ldrh	r3, [r1, r2]
 800141c:	2008      	movs	r0, #8
 800141e:	4303      	orrs	r3, r0
 8001420:	b29b      	uxth	r3, r3
 8001422:	528b      	strh	r3, [r1, r2]
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001424:	6820      	ldr	r0, [r4, #0]
 8001426:	2144      	movs	r1, #68	@ 0x44
 8001428:	5a43      	ldrh	r3, [r0, r1]
 800142a:	4d27      	ldr	r5, [pc, #156]	@ (80014c8 <HAL_PCD_IRQHandler+0x178>)
 800142c:	402b      	ands	r3, r5
 800142e:	5243      	strh	r3, [r0, r1]
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001430:	6821      	ldr	r1, [r4, #0]
 8001432:	5a8b      	ldrh	r3, [r1, r2]
 8001434:	2004      	movs	r0, #4
 8001436:	4303      	orrs	r3, r0
 8001438:	b29b      	uxth	r3, r3
 800143a:	528b      	strh	r3, [r1, r2]
    HAL_PCD_SuspendCallback(hpcd);
 800143c:	0020      	movs	r0, r4
 800143e:	f002 ff6f 	bl	8004320 <HAL_PCD_SuspendCallback>
    return;
 8001442:	e7bd      	b.n	80013c0 <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001444:	6821      	ldr	r1, [r4, #0]
 8001446:	2244      	movs	r2, #68	@ 0x44
 8001448:	5a8b      	ldrh	r3, [r1, r2]
 800144a:	2080      	movs	r0, #128	@ 0x80
 800144c:	4383      	bics	r3, r0
 800144e:	528b      	strh	r3, [r1, r2]
    if (hpcd->LPM_State == LPM_L0)
 8001450:	23b2      	movs	r3, #178	@ 0xb2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	5ce3      	ldrb	r3, [r4, r3]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d11e      	bne.n	8001498 <HAL_PCD_IRQHandler+0x148>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800145a:	6821      	ldr	r1, [r4, #0]
 800145c:	3a04      	subs	r2, #4
 800145e:	5a8b      	ldrh	r3, [r1, r2]
 8001460:	2004      	movs	r0, #4
 8001462:	4303      	orrs	r3, r0
 8001464:	b29b      	uxth	r3, r3
 8001466:	528b      	strh	r3, [r1, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001468:	6821      	ldr	r1, [r4, #0]
 800146a:	5a8b      	ldrh	r3, [r1, r2]
 800146c:	2008      	movs	r0, #8
 800146e:	4303      	orrs	r3, r0
 8001470:	b29b      	uxth	r3, r3
 8001472:	528b      	strh	r3, [r1, r2]
      hpcd->LPM_State = LPM_L1;
 8001474:	23b2      	movs	r3, #178	@ 0xb2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	3a3f      	subs	r2, #63	@ 0x3f
 800147a:	54e2      	strb	r2, [r4, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800147c:	6822      	ldr	r2, [r4, #0]
 800147e:	2354      	movs	r3, #84	@ 0x54
 8001480:	5ad2      	ldrh	r2, [r2, r3]
 8001482:	0892      	lsrs	r2, r2, #2
 8001484:	3b18      	subs	r3, #24
 8001486:	4013      	ands	r3, r2
 8001488:	22b3      	movs	r2, #179	@ 0xb3
 800148a:	0092      	lsls	r2, r2, #2
 800148c:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800148e:	2101      	movs	r1, #1
 8001490:	0020      	movs	r0, r4
 8001492:	f000 f9a0 	bl	80017d6 <HAL_PCDEx_LPM_Callback>
 8001496:	e793      	b.n	80013c0 <HAL_PCD_IRQHandler+0x70>
      HAL_PCD_SuspendCallback(hpcd);
 8001498:	0020      	movs	r0, r4
 800149a:	f002 ff41 	bl	8004320 <HAL_PCD_SuspendCallback>
    return;
 800149e:	e78f      	b.n	80013c0 <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80014a0:	6821      	ldr	r1, [r4, #0]
 80014a2:	2244      	movs	r2, #68	@ 0x44
 80014a4:	5a8b      	ldrh	r3, [r1, r2]
 80014a6:	4809      	ldr	r0, [pc, #36]	@ (80014cc <HAL_PCD_IRQHandler+0x17c>)
 80014a8:	4003      	ands	r3, r0
 80014aa:	528b      	strh	r3, [r1, r2]
    HAL_PCD_SOFCallback(hpcd);
 80014ac:	0020      	movs	r0, r4
 80014ae:	f002 ff1e 	bl	80042ee <HAL_PCD_SOFCallback>
    return;
 80014b2:	e785      	b.n	80013c0 <HAL_PCD_IRQHandler+0x70>
 80014b4:	fffffeff 	.word	0xfffffeff
 80014b8:	fffffbff 	.word	0xfffffbff
 80014bc:	ffffbfff 	.word	0xffffbfff
 80014c0:	ffffdfff 	.word	0xffffdfff
 80014c4:	ffffefff 	.word	0xffffefff
 80014c8:	fffff7ff 	.word	0xfffff7ff
 80014cc:	fffffdff 	.word	0xfffffdff

080014d0 <HAL_PCD_EP_Open>:
{
 80014d0:	b570      	push	{r4, r5, r6, lr}
 80014d2:	0004      	movs	r4, r0
 80014d4:	000d      	movs	r5, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80014d6:	b249      	sxtb	r1, r1
 80014d8:	2900      	cmp	r1, #0
 80014da:	db25      	blt.n	8001528 <HAL_PCD_EP_Open+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014dc:	2607      	movs	r6, #7
 80014de:	402e      	ands	r6, r5
 80014e0:	00b0      	lsls	r0, r6, #2
 80014e2:	1981      	adds	r1, r0, r6
 80014e4:	00c9      	lsls	r1, r1, #3
 80014e6:	3151      	adds	r1, #81	@ 0x51
 80014e8:	31ff      	adds	r1, #255	@ 0xff
 80014ea:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 80014ec:	1980      	adds	r0, r0, r6
 80014ee:	00c0      	lsls	r0, r0, #3
 80014f0:	1820      	adds	r0, r4, r0
 80014f2:	3052      	adds	r0, #82	@ 0x52
 80014f4:	30ff      	adds	r0, #255	@ 0xff
 80014f6:	2600      	movs	r6, #0
 80014f8:	7006      	strb	r6, [r0, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014fa:	2007      	movs	r0, #7
 80014fc:	4028      	ands	r0, r5
 80014fe:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = ep_mps;
 8001500:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8001502:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 8001504:	2b02      	cmp	r3, #2
 8001506:	d01c      	beq.n	8001542 <HAL_PCD_EP_Open+0x72>
  __HAL_LOCK(hpcd);
 8001508:	23a4      	movs	r3, #164	@ 0xa4
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	5ce3      	ldrb	r3, [r4, r3]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d01a      	beq.n	8001548 <HAL_PCD_EP_Open+0x78>
 8001512:	25a4      	movs	r5, #164	@ 0xa4
 8001514:	00ad      	lsls	r5, r5, #2
 8001516:	2301      	movs	r3, #1
 8001518:	5563      	strb	r3, [r4, r5]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800151a:	6820      	ldr	r0, [r4, #0]
 800151c:	f000 ff9a 	bl	8002454 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001520:	2300      	movs	r3, #0
 8001522:	5563      	strb	r3, [r4, r5]
  return ret;
 8001524:	2000      	movs	r0, #0
}
 8001526:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001528:	2607      	movs	r6, #7
 800152a:	402e      	ands	r6, r5
 800152c:	00b0      	lsls	r0, r6, #2
 800152e:	1981      	adds	r1, r0, r6
 8001530:	00c9      	lsls	r1, r1, #3
 8001532:	3110      	adds	r1, #16
 8001534:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8001536:	1980      	adds	r0, r0, r6
 8001538:	00c0      	lsls	r0, r0, #3
 800153a:	1820      	adds	r0, r4, r0
 800153c:	2601      	movs	r6, #1
 800153e:	7446      	strb	r6, [r0, #17]
 8001540:	e7db      	b.n	80014fa <HAL_PCD_EP_Open+0x2a>
    ep->data_pid_start = 0U;
 8001542:	2300      	movs	r3, #0
 8001544:	710b      	strb	r3, [r1, #4]
 8001546:	e7df      	b.n	8001508 <HAL_PCD_EP_Open+0x38>
  __HAL_LOCK(hpcd);
 8001548:	2002      	movs	r0, #2
 800154a:	e7ec      	b.n	8001526 <HAL_PCD_EP_Open+0x56>

0800154c <HAL_PCD_EP_Close>:
{
 800154c:	b570      	push	{r4, r5, r6, lr}
 800154e:	0004      	movs	r4, r0
 8001550:	000a      	movs	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001552:	b24b      	sxtb	r3, r1
 8001554:	2b00      	cmp	r3, #0
 8001556:	db21      	blt.n	800159c <HAL_PCD_EP_Close+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001558:	2007      	movs	r0, #7
 800155a:	4008      	ands	r0, r1
 800155c:	0083      	lsls	r3, r0, #2
 800155e:	1819      	adds	r1, r3, r0
 8001560:	00c9      	lsls	r1, r1, #3
 8001562:	3151      	adds	r1, #81	@ 0x51
 8001564:	31ff      	adds	r1, #255	@ 0xff
 8001566:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8001568:	181b      	adds	r3, r3, r0
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	18e3      	adds	r3, r4, r3
 800156e:	3352      	adds	r3, #82	@ 0x52
 8001570:	33ff      	adds	r3, #255	@ 0xff
 8001572:	2000      	movs	r0, #0
 8001574:	7018      	strb	r0, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001576:	2307      	movs	r3, #7
 8001578:	4013      	ands	r3, r2
 800157a:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800157c:	23a4      	movs	r3, #164	@ 0xa4
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	5ce3      	ldrb	r3, [r4, r3]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d017      	beq.n	80015b6 <HAL_PCD_EP_Close+0x6a>
 8001586:	25a4      	movs	r5, #164	@ 0xa4
 8001588:	00ad      	lsls	r5, r5, #2
 800158a:	2301      	movs	r3, #1
 800158c:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800158e:	6820      	ldr	r0, [r4, #0]
 8001590:	f001 f8f2 	bl	8002778 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001594:	2300      	movs	r3, #0
 8001596:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8001598:	2000      	movs	r0, #0
}
 800159a:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800159c:	2007      	movs	r0, #7
 800159e:	4008      	ands	r0, r1
 80015a0:	0083      	lsls	r3, r0, #2
 80015a2:	1819      	adds	r1, r3, r0
 80015a4:	00c9      	lsls	r1, r1, #3
 80015a6:	3110      	adds	r1, #16
 80015a8:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 80015aa:	181b      	adds	r3, r3, r0
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	18e3      	adds	r3, r4, r3
 80015b0:	2001      	movs	r0, #1
 80015b2:	7458      	strb	r0, [r3, #17]
 80015b4:	e7df      	b.n	8001576 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 80015b6:	2002      	movs	r0, #2
 80015b8:	e7ef      	b.n	800159a <HAL_PCD_EP_Close+0x4e>

080015ba <HAL_PCD_EP_Receive>:
{
 80015ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015bc:	2607      	movs	r6, #7
 80015be:	400e      	ands	r6, r1
 80015c0:	00b4      	lsls	r4, r6, #2
 80015c2:	19a1      	adds	r1, r4, r6
 80015c4:	00c9      	lsls	r1, r1, #3
 80015c6:	3151      	adds	r1, #81	@ 0x51
 80015c8:	31ff      	adds	r1, #255	@ 0xff
 80015ca:	1841      	adds	r1, r0, r1
  ep->xfer_buff = pBuf;
 80015cc:	19a5      	adds	r5, r4, r6
 80015ce:	00ed      	lsls	r5, r5, #3
 80015d0:	1945      	adds	r5, r0, r5
 80015d2:	002f      	movs	r7, r5
 80015d4:	3765      	adds	r7, #101	@ 0x65
 80015d6:	37ff      	adds	r7, #255	@ 0xff
 80015d8:	603a      	str	r2, [r7, #0]
  ep->xfer_len = len;
 80015da:	002a      	movs	r2, r5
 80015dc:	3269      	adds	r2, #105	@ 0x69
 80015de:	32ff      	adds	r2, #255	@ 0xff
 80015e0:	6013      	str	r3, [r2, #0]
  ep->xfer_count = 0U;
 80015e2:	3204      	adds	r2, #4
 80015e4:	2300      	movs	r3, #0
 80015e6:	6013      	str	r3, [r2, #0]
  ep->is_in = 0U;
 80015e8:	3552      	adds	r5, #82	@ 0x52
 80015ea:	35ff      	adds	r5, #255	@ 0xff
 80015ec:	702b      	strb	r3, [r5, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015ee:	19a4      	adds	r4, r4, r6
 80015f0:	00e4      	lsls	r4, r4, #3
 80015f2:	1904      	adds	r4, r0, r4
 80015f4:	3451      	adds	r4, #81	@ 0x51
 80015f6:	34ff      	adds	r4, #255	@ 0xff
 80015f8:	7026      	strb	r6, [r4, #0]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015fa:	6800      	ldr	r0, [r0, #0]
 80015fc:	f001 fa12 	bl	8002a24 <USB_EPStartXfer>
}
 8001600:	2000      	movs	r0, #0
 8001602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001604 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001604:	2307      	movs	r3, #7
 8001606:	400b      	ands	r3, r1
 8001608:	0099      	lsls	r1, r3, #2
 800160a:	18c9      	adds	r1, r1, r3
 800160c:	00c9      	lsls	r1, r1, #3
 800160e:	1840      	adds	r0, r0, r1
 8001610:	306d      	adds	r0, #109	@ 0x6d
 8001612:	30ff      	adds	r0, #255	@ 0xff
 8001614:	6800      	ldr	r0, [r0, #0]
}
 8001616:	4770      	bx	lr

08001618 <HAL_PCD_EP_Transmit>:
{
 8001618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800161a:	46d6      	mov	lr, sl
 800161c:	464f      	mov	r7, r9
 800161e:	4646      	mov	r6, r8
 8001620:	b5c0      	push	{r6, r7, lr}
 8001622:	4699      	mov	r9, r3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001624:	2507      	movs	r5, #7
 8001626:	400d      	ands	r5, r1
 8001628:	00ac      	lsls	r4, r5, #2
 800162a:	1961      	adds	r1, r4, r5
 800162c:	00c9      	lsls	r1, r1, #3
 800162e:	3110      	adds	r1, #16
 8001630:	468a      	mov	sl, r1
 8001632:	4482      	add	sl, r0
  ep->xfer_buff = pBuf;
 8001634:	1966      	adds	r6, r4, r5
 8001636:	00f6      	lsls	r6, r6, #3
 8001638:	1986      	adds	r6, r0, r6
 800163a:	6272      	str	r2, [r6, #36]	@ 0x24
  ep->xfer_len = len;
 800163c:	1c6f      	adds	r7, r5, #1
 800163e:	00ba      	lsls	r2, r7, #2
 8001640:	19d1      	adds	r1, r2, r7
 8001642:	00c9      	lsls	r1, r1, #3
 8001644:	500b      	str	r3, [r1, r0]
  ep->xfer_fill_db = 1U;
 8001646:	2134      	movs	r1, #52	@ 0x34
 8001648:	4688      	mov	r8, r1
 800164a:	44b0      	add	r8, r6
 800164c:	3933      	subs	r1, #51	@ 0x33
 800164e:	468c      	mov	ip, r1
 8001650:	4641      	mov	r1, r8
 8001652:	4663      	mov	r3, ip
 8001654:	700b      	strb	r3, [r1, #0]
  ep->xfer_len_db = len;
 8001656:	464b      	mov	r3, r9
 8001658:	6333      	str	r3, [r6, #48]	@ 0x30
  ep->xfer_count = 0U;
 800165a:	19d2      	adds	r2, r2, r7
 800165c:	00d2      	lsls	r2, r2, #3
 800165e:	1882      	adds	r2, r0, r2
 8001660:	2300      	movs	r3, #0
 8001662:	6053      	str	r3, [r2, #4]
  ep->is_in = 1U;
 8001664:	4663      	mov	r3, ip
 8001666:	7473      	strb	r3, [r6, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001668:	7435      	strb	r5, [r6, #16]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800166a:	6800      	ldr	r0, [r0, #0]
 800166c:	4651      	mov	r1, sl
 800166e:	f001 f9d9 	bl	8002a24 <USB_EPStartXfer>
}
 8001672:	2000      	movs	r0, #0
 8001674:	bce0      	pop	{r5, r6, r7}
 8001676:	46ba      	mov	sl, r7
 8001678:	46b1      	mov	r9, r6
 800167a:	46a8      	mov	r8, r5
 800167c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800167e <HAL_PCD_EP_SetStall>:
{
 800167e:	b570      	push	{r4, r5, r6, lr}
 8001680:	0004      	movs	r4, r0
 8001682:	000b      	movs	r3, r1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001684:	2207      	movs	r2, #7
 8001686:	400a      	ands	r2, r1
 8001688:	7901      	ldrb	r1, [r0, #4]
 800168a:	4291      	cmp	r1, r2
 800168c:	d32d      	bcc.n	80016ea <HAL_PCD_EP_SetStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 800168e:	b259      	sxtb	r1, r3
 8001690:	2900      	cmp	r1, #0
 8001692:	db1f      	blt.n	80016d4 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8001694:	0098      	lsls	r0, r3, #2
 8001696:	18c1      	adds	r1, r0, r3
 8001698:	00c9      	lsls	r1, r1, #3
 800169a:	3151      	adds	r1, #81	@ 0x51
 800169c:	31ff      	adds	r1, #255	@ 0xff
 800169e:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 80016a0:	18c0      	adds	r0, r0, r3
 80016a2:	00c0      	lsls	r0, r0, #3
 80016a4:	1820      	adds	r0, r4, r0
 80016a6:	3052      	adds	r0, #82	@ 0x52
 80016a8:	30ff      	adds	r0, #255	@ 0xff
 80016aa:	2300      	movs	r3, #0
 80016ac:	7003      	strb	r3, [r0, #0]
  ep->is_stall = 1U;
 80016ae:	2301      	movs	r3, #1
 80016b0:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016b2:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80016b4:	23a4      	movs	r3, #164	@ 0xa4
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	5ce3      	ldrb	r3, [r4, r3]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d017      	beq.n	80016ee <HAL_PCD_EP_SetStall+0x70>
 80016be:	25a4      	movs	r5, #164	@ 0xa4
 80016c0:	00ad      	lsls	r5, r5, #2
 80016c2:	2301      	movs	r3, #1
 80016c4:	5563      	strb	r3, [r4, r5]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80016c6:	6820      	ldr	r0, [r4, #0]
 80016c8:	f001 f90e 	bl	80028e8 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 80016cc:	2300      	movs	r3, #0
 80016ce:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80016d0:	2000      	movs	r0, #0
}
 80016d2:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016d4:	0093      	lsls	r3, r2, #2
 80016d6:	1899      	adds	r1, r3, r2
 80016d8:	00c9      	lsls	r1, r1, #3
 80016da:	3110      	adds	r1, #16
 80016dc:	1841      	adds	r1, r0, r1
    ep->is_in = 1U;
 80016de:	189b      	adds	r3, r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	18c3      	adds	r3, r0, r3
 80016e4:	2001      	movs	r0, #1
 80016e6:	7458      	strb	r0, [r3, #17]
 80016e8:	e7e1      	b.n	80016ae <HAL_PCD_EP_SetStall+0x30>
    return HAL_ERROR;
 80016ea:	2001      	movs	r0, #1
 80016ec:	e7f1      	b.n	80016d2 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 80016ee:	2002      	movs	r0, #2
 80016f0:	e7ef      	b.n	80016d2 <HAL_PCD_EP_SetStall+0x54>

080016f2 <HAL_PCD_EP_ClrStall>:
{
 80016f2:	b570      	push	{r4, r5, r6, lr}
 80016f4:	0004      	movs	r4, r0
 80016f6:	000b      	movs	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80016f8:	7901      	ldrb	r1, [r0, #4]
 80016fa:	220f      	movs	r2, #15
 80016fc:	401a      	ands	r2, r3
 80016fe:	4291      	cmp	r1, r2
 8001700:	d333      	bcc.n	800176a <HAL_PCD_EP_ClrStall+0x78>
  if ((0x80U & ep_addr) == 0x80U)
 8001702:	b25a      	sxtb	r2, r3
 8001704:	2a00      	cmp	r2, #0
 8001706:	db23      	blt.n	8001750 <HAL_PCD_EP_ClrStall+0x5e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001708:	2007      	movs	r0, #7
 800170a:	4018      	ands	r0, r3
 800170c:	0082      	lsls	r2, r0, #2
 800170e:	1811      	adds	r1, r2, r0
 8001710:	00c9      	lsls	r1, r1, #3
 8001712:	3151      	adds	r1, #81	@ 0x51
 8001714:	31ff      	adds	r1, #255	@ 0xff
 8001716:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8001718:	1812      	adds	r2, r2, r0
 800171a:	00d2      	lsls	r2, r2, #3
 800171c:	18a2      	adds	r2, r4, r2
 800171e:	3252      	adds	r2, #82	@ 0x52
 8001720:	32ff      	adds	r2, #255	@ 0xff
 8001722:	2000      	movs	r0, #0
 8001724:	7010      	strb	r0, [r2, #0]
  ep->is_stall = 0U;
 8001726:	2200      	movs	r2, #0
 8001728:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800172a:	3207      	adds	r2, #7
 800172c:	4013      	ands	r3, r2
 800172e:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8001730:	23a4      	movs	r3, #164	@ 0xa4
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	5ce3      	ldrb	r3, [r4, r3]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d019      	beq.n	800176e <HAL_PCD_EP_ClrStall+0x7c>
 800173a:	25a4      	movs	r5, #164	@ 0xa4
 800173c:	00ad      	lsls	r5, r5, #2
 800173e:	2301      	movs	r3, #1
 8001740:	5563      	strb	r3, [r4, r5]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001742:	6820      	ldr	r0, [r4, #0]
 8001744:	f001 f8f6 	bl	8002934 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001748:	2300      	movs	r3, #0
 800174a:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800174c:	2000      	movs	r0, #0
}
 800174e:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001750:	2007      	movs	r0, #7
 8001752:	4018      	ands	r0, r3
 8001754:	0082      	lsls	r2, r0, #2
 8001756:	1811      	adds	r1, r2, r0
 8001758:	00c9      	lsls	r1, r1, #3
 800175a:	3110      	adds	r1, #16
 800175c:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 800175e:	1812      	adds	r2, r2, r0
 8001760:	00d2      	lsls	r2, r2, #3
 8001762:	18a2      	adds	r2, r4, r2
 8001764:	2001      	movs	r0, #1
 8001766:	7450      	strb	r0, [r2, #17]
 8001768:	e7dd      	b.n	8001726 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 800176a:	2001      	movs	r0, #1
 800176c:	e7ef      	b.n	800174e <HAL_PCD_EP_ClrStall+0x5c>
  __HAL_LOCK(hpcd);
 800176e:	2002      	movs	r0, #2
 8001770:	e7ed      	b.n	800174e <HAL_PCD_EP_ClrStall+0x5c>

08001772 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8001772:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001774:	060c      	lsls	r4, r1, #24
 8001776:	d50c      	bpl.n	8001792 <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001778:	2407      	movs	r4, #7
 800177a:	400c      	ands	r4, r1
 800177c:	00a1      	lsls	r1, r4, #2
 800177e:	1909      	adds	r1, r1, r4
 8001780:	00c9      	lsls	r1, r1, #3
 8001782:	3110      	adds	r1, #16
 8001784:	1840      	adds	r0, r0, r1
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001786:	2a00      	cmp	r2, #0
 8001788:	d10a      	bne.n	80017a0 <HAL_PCDEx_PMAConfig+0x2e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800178a:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800178c:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800178e:	2000      	movs	r0, #0
 8001790:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8001792:	008c      	lsls	r4, r1, #2
 8001794:	1861      	adds	r1, r4, r1
 8001796:	00c9      	lsls	r1, r1, #3
 8001798:	3151      	adds	r1, #81	@ 0x51
 800179a:	31ff      	adds	r1, #255	@ 0xff
 800179c:	1840      	adds	r0, r0, r1
 800179e:	e7f2      	b.n	8001786 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 80017a0:	2201      	movs	r2, #1
 80017a2:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80017a4:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80017a6:	0c1b      	lsrs	r3, r3, #16
 80017a8:	8143      	strh	r3, [r0, #10]
 80017aa:	e7f0      	b.n	800178e <HAL_PCDEx_PMAConfig+0x1c>

080017ac <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 80017ac:	6801      	ldr	r1, [r0, #0]
  hpcd->lpm_active = 1U;
 80017ae:	23b4      	movs	r3, #180	@ 0xb4
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	2201      	movs	r2, #1
 80017b4:	50c2      	str	r2, [r0, r3]
  hpcd->LPM_State = LPM_L0;
 80017b6:	3b08      	subs	r3, #8
 80017b8:	2200      	movs	r2, #0
 80017ba:	54c2      	strb	r2, [r0, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80017bc:	3254      	adds	r2, #84	@ 0x54
 80017be:	5a8b      	ldrh	r3, [r1, r2]
 80017c0:	2001      	movs	r0, #1
 80017c2:	4303      	orrs	r3, r0
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	528b      	strh	r3, [r1, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80017c8:	5a8b      	ldrh	r3, [r1, r2]
 80017ca:	2002      	movs	r0, #2
 80017cc:	4303      	orrs	r3, r0
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	528b      	strh	r3, [r1, r2]

  return HAL_OK;
}
 80017d2:	2000      	movs	r0, #0
 80017d4:	4770      	bx	lr

080017d6 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80017d6:	4770      	bx	lr

080017d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d8:	b570      	push	{r4, r5, r6, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017de:	d100      	bne.n	80017e2 <HAL_RCC_OscConfig+0xa>
 80017e0:	e238      	b.n	8001c54 <HAL_RCC_OscConfig+0x47c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e2:	6803      	ldr	r3, [r0, #0]
 80017e4:	07db      	lsls	r3, r3, #31
 80017e6:	d52b      	bpl.n	8001840 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017e8:	4bb3      	ldr	r3, [pc, #716]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	230c      	movs	r3, #12
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	d01d      	beq.n	8001830 <HAL_RCC_OscConfig+0x58>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017f4:	4bb0      	ldr	r3, [pc, #704]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	230c      	movs	r3, #12
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b08      	cmp	r3, #8
 80017fe:	d00e      	beq.n	800181e <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001800:	6863      	ldr	r3, [r4, #4]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d041      	beq.n	800188a <HAL_RCC_OscConfig+0xb2>
 8001806:	2b00      	cmp	r3, #0
 8001808:	d156      	bne.n	80018b8 <HAL_RCC_OscConfig+0xe0>
 800180a:	4bab      	ldr	r3, [pc, #684]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	49ab      	ldr	r1, [pc, #684]	@ (8001abc <HAL_RCC_OscConfig+0x2e4>)
 8001810:	400a      	ands	r2, r1
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	49aa      	ldr	r1, [pc, #680]	@ (8001ac0 <HAL_RCC_OscConfig+0x2e8>)
 8001818:	400a      	ands	r2, r1
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	e03b      	b.n	8001896 <HAL_RCC_OscConfig+0xbe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800181e:	4ba6      	ldr	r3, [pc, #664]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	22c0      	movs	r2, #192	@ 0xc0
 8001824:	0252      	lsls	r2, r2, #9
 8001826:	4013      	ands	r3, r2
 8001828:	2280      	movs	r2, #128	@ 0x80
 800182a:	0252      	lsls	r2, r2, #9
 800182c:	4293      	cmp	r3, r2
 800182e:	d1e7      	bne.n	8001800 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	4ba1      	ldr	r3, [pc, #644]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	039b      	lsls	r3, r3, #14
 8001836:	d503      	bpl.n	8001840 <HAL_RCC_OscConfig+0x68>
 8001838:	6863      	ldr	r3, [r4, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d100      	bne.n	8001840 <HAL_RCC_OscConfig+0x68>
 800183e:	e20c      	b.n	8001c5a <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001840:	6823      	ldr	r3, [r4, #0]
 8001842:	079b      	lsls	r3, r3, #30
 8001844:	d577      	bpl.n	8001936 <HAL_RCC_OscConfig+0x15e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001846:	4b9c      	ldr	r3, [pc, #624]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	220c      	movs	r2, #12
 800184c:	421a      	tst	r2, r3
 800184e:	d062      	beq.n	8001916 <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001850:	4b99      	ldr	r3, [pc, #612]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	230c      	movs	r3, #12
 8001856:	4013      	ands	r3, r2
 8001858:	2b08      	cmp	r3, #8
 800185a:	d053      	beq.n	8001904 <HAL_RCC_OscConfig+0x12c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800185c:	68e3      	ldr	r3, [r4, #12]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d100      	bne.n	8001864 <HAL_RCC_OscConfig+0x8c>
 8001862:	e08a      	b.n	800197a <HAL_RCC_OscConfig+0x1a2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001864:	4a94      	ldr	r2, [pc, #592]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 8001866:	6813      	ldr	r3, [r2, #0]
 8001868:	2101      	movs	r1, #1
 800186a:	430b      	orrs	r3, r1
 800186c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186e:	f7fe fe8d 	bl	800058c <HAL_GetTick>
 8001872:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001874:	4b90      	ldr	r3, [pc, #576]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	079b      	lsls	r3, r3, #30
 800187a:	d475      	bmi.n	8001968 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800187c:	f7fe fe86 	bl	800058c <HAL_GetTick>
 8001880:	1b40      	subs	r0, r0, r5
 8001882:	2802      	cmp	r0, #2
 8001884:	d9f6      	bls.n	8001874 <HAL_RCC_OscConfig+0x9c>
          {
            return HAL_TIMEOUT;
 8001886:	2003      	movs	r0, #3
 8001888:	e1e5      	b.n	8001c56 <HAL_RCC_OscConfig+0x47e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188a:	4a8b      	ldr	r2, [pc, #556]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 800188c:	6811      	ldr	r1, [r2, #0]
 800188e:	2380      	movs	r3, #128	@ 0x80
 8001890:	025b      	lsls	r3, r3, #9
 8001892:	430b      	orrs	r3, r1
 8001894:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001896:	6863      	ldr	r3, [r4, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d025      	beq.n	80018e8 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 800189c:	f7fe fe76 	bl	800058c <HAL_GetTick>
 80018a0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a2:	4b85      	ldr	r3, [pc, #532]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	039b      	lsls	r3, r3, #14
 80018a8:	d4ca      	bmi.n	8001840 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018aa:	f7fe fe6f 	bl	800058c <HAL_GetTick>
 80018ae:	1b40      	subs	r0, r0, r5
 80018b0:	2864      	cmp	r0, #100	@ 0x64
 80018b2:	d9f6      	bls.n	80018a2 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80018b4:	2003      	movs	r0, #3
 80018b6:	e1ce      	b.n	8001c56 <HAL_RCC_OscConfig+0x47e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b8:	2b05      	cmp	r3, #5
 80018ba:	d009      	beq.n	80018d0 <HAL_RCC_OscConfig+0xf8>
 80018bc:	4b7e      	ldr	r3, [pc, #504]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	497e      	ldr	r1, [pc, #504]	@ (8001abc <HAL_RCC_OscConfig+0x2e4>)
 80018c2:	400a      	ands	r2, r1
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	497d      	ldr	r1, [pc, #500]	@ (8001ac0 <HAL_RCC_OscConfig+0x2e8>)
 80018ca:	400a      	ands	r2, r1
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	e7e2      	b.n	8001896 <HAL_RCC_OscConfig+0xbe>
 80018d0:	4b79      	ldr	r3, [pc, #484]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 80018d2:	6819      	ldr	r1, [r3, #0]
 80018d4:	2280      	movs	r2, #128	@ 0x80
 80018d6:	02d2      	lsls	r2, r2, #11
 80018d8:	430a      	orrs	r2, r1
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	6819      	ldr	r1, [r3, #0]
 80018de:	2280      	movs	r2, #128	@ 0x80
 80018e0:	0252      	lsls	r2, r2, #9
 80018e2:	430a      	orrs	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	e7d6      	b.n	8001896 <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 80018e8:	f7fe fe50 	bl	800058c <HAL_GetTick>
 80018ec:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ee:	4b72      	ldr	r3, [pc, #456]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	039b      	lsls	r3, r3, #14
 80018f4:	d5a4      	bpl.n	8001840 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f6:	f7fe fe49 	bl	800058c <HAL_GetTick>
 80018fa:	1b40      	subs	r0, r0, r5
 80018fc:	2864      	cmp	r0, #100	@ 0x64
 80018fe:	d9f6      	bls.n	80018ee <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8001900:	2003      	movs	r0, #3
 8001902:	e1a8      	b.n	8001c56 <HAL_RCC_OscConfig+0x47e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001904:	4b6c      	ldr	r3, [pc, #432]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	22c0      	movs	r2, #192	@ 0xc0
 800190a:	0252      	lsls	r2, r2, #9
 800190c:	4013      	ands	r3, r2
 800190e:	2280      	movs	r2, #128	@ 0x80
 8001910:	0212      	lsls	r2, r2, #8
 8001912:	4293      	cmp	r3, r2
 8001914:	d1a2      	bne.n	800185c <HAL_RCC_OscConfig+0x84>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001916:	4b68      	ldr	r3, [pc, #416]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	079b      	lsls	r3, r3, #30
 800191c:	d503      	bpl.n	8001926 <HAL_RCC_OscConfig+0x14e>
 800191e:	68e3      	ldr	r3, [r4, #12]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d000      	beq.n	8001926 <HAL_RCC_OscConfig+0x14e>
 8001924:	e19b      	b.n	8001c5e <HAL_RCC_OscConfig+0x486>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001926:	4964      	ldr	r1, [pc, #400]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 8001928:	680b      	ldr	r3, [r1, #0]
 800192a:	22f8      	movs	r2, #248	@ 0xf8
 800192c:	4393      	bics	r3, r2
 800192e:	6922      	ldr	r2, [r4, #16]
 8001930:	00d2      	lsls	r2, r2, #3
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001936:	6823      	ldr	r3, [r4, #0]
 8001938:	071b      	lsls	r3, r3, #28
 800193a:	d544      	bpl.n	80019c6 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800193c:	69e3      	ldr	r3, [r4, #28]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d02e      	beq.n	80019a0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001942:	4a5d      	ldr	r2, [pc, #372]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 8001944:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8001946:	2101      	movs	r1, #1
 8001948:	430b      	orrs	r3, r1
 800194a:	6253      	str	r3, [r2, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194c:	f7fe fe1e 	bl	800058c <HAL_GetTick>
 8001950:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001952:	4b59      	ldr	r3, [pc, #356]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 8001954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001956:	079b      	lsls	r3, r3, #30
 8001958:	d435      	bmi.n	80019c6 <HAL_RCC_OscConfig+0x1ee>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800195a:	f7fe fe17 	bl	800058c <HAL_GetTick>
 800195e:	1b40      	subs	r0, r0, r5
 8001960:	2802      	cmp	r0, #2
 8001962:	d9f6      	bls.n	8001952 <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001964:	2003      	movs	r0, #3
 8001966:	e176      	b.n	8001c56 <HAL_RCC_OscConfig+0x47e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001968:	4953      	ldr	r1, [pc, #332]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 800196a:	680b      	ldr	r3, [r1, #0]
 800196c:	22f8      	movs	r2, #248	@ 0xf8
 800196e:	4393      	bics	r3, r2
 8001970:	6922      	ldr	r2, [r4, #16]
 8001972:	00d2      	lsls	r2, r2, #3
 8001974:	4313      	orrs	r3, r2
 8001976:	600b      	str	r3, [r1, #0]
 8001978:	e7dd      	b.n	8001936 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 800197a:	4a4f      	ldr	r2, [pc, #316]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 800197c:	6813      	ldr	r3, [r2, #0]
 800197e:	2101      	movs	r1, #1
 8001980:	438b      	bics	r3, r1
 8001982:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001984:	f7fe fe02 	bl	800058c <HAL_GetTick>
 8001988:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198a:	4b4b      	ldr	r3, [pc, #300]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	079b      	lsls	r3, r3, #30
 8001990:	d5d1      	bpl.n	8001936 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001992:	f7fe fdfb 	bl	800058c <HAL_GetTick>
 8001996:	1b40      	subs	r0, r0, r5
 8001998:	2802      	cmp	r0, #2
 800199a:	d9f6      	bls.n	800198a <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 800199c:	2003      	movs	r0, #3
 800199e:	e15a      	b.n	8001c56 <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a0:	4a45      	ldr	r2, [pc, #276]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 80019a2:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80019a4:	2101      	movs	r1, #1
 80019a6:	438b      	bics	r3, r1
 80019a8:	6253      	str	r3, [r2, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019aa:	f7fe fdef 	bl	800058c <HAL_GetTick>
 80019ae:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b0:	4b41      	ldr	r3, [pc, #260]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 80019b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b4:	079b      	lsls	r3, r3, #30
 80019b6:	d506      	bpl.n	80019c6 <HAL_RCC_OscConfig+0x1ee>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019b8:	f7fe fde8 	bl	800058c <HAL_GetTick>
 80019bc:	1b40      	subs	r0, r0, r5
 80019be:	2802      	cmp	r0, #2
 80019c0:	d9f6      	bls.n	80019b0 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 80019c2:	2003      	movs	r0, #3
 80019c4:	e147      	b.n	8001c56 <HAL_RCC_OscConfig+0x47e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c6:	6823      	ldr	r3, [r4, #0]
 80019c8:	075b      	lsls	r3, r3, #29
 80019ca:	d400      	bmi.n	80019ce <HAL_RCC_OscConfig+0x1f6>
 80019cc:	e080      	b.n	8001ad0 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ce:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	d41d      	bmi.n	8001a12 <HAL_RCC_OscConfig+0x23a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d6:	4b38      	ldr	r3, [pc, #224]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 80019d8:	69da      	ldr	r2, [r3, #28]
 80019da:	2180      	movs	r1, #128	@ 0x80
 80019dc:	0549      	lsls	r1, r1, #21
 80019de:	430a      	orrs	r2, r1
 80019e0:	61da      	str	r2, [r3, #28]
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	400b      	ands	r3, r1
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80019ea:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ec:	4b35      	ldr	r3, [pc, #212]	@ (8001ac4 <HAL_RCC_OscConfig+0x2ec>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	05db      	lsls	r3, r3, #23
 80019f2:	d510      	bpl.n	8001a16 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f4:	68a3      	ldr	r3, [r4, #8]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d021      	beq.n	8001a3e <HAL_RCC_OscConfig+0x266>
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d136      	bne.n	8001a6c <HAL_RCC_OscConfig+0x294>
 80019fe:	4b2e      	ldr	r3, [pc, #184]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 8001a00:	6a1a      	ldr	r2, [r3, #32]
 8001a02:	2101      	movs	r1, #1
 8001a04:	438a      	bics	r2, r1
 8001a06:	621a      	str	r2, [r3, #32]
 8001a08:	6a1a      	ldr	r2, [r3, #32]
 8001a0a:	3103      	adds	r1, #3
 8001a0c:	438a      	bics	r2, r1
 8001a0e:	621a      	str	r2, [r3, #32]
 8001a10:	e01a      	b.n	8001a48 <HAL_RCC_OscConfig+0x270>
    FlagStatus       pwrclkchanged = RESET;
 8001a12:	2500      	movs	r5, #0
 8001a14:	e7ea      	b.n	80019ec <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a16:	4a2b      	ldr	r2, [pc, #172]	@ (8001ac4 <HAL_RCC_OscConfig+0x2ec>)
 8001a18:	6811      	ldr	r1, [r2, #0]
 8001a1a:	2380      	movs	r3, #128	@ 0x80
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	430b      	orrs	r3, r1
 8001a20:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001a22:	f7fe fdb3 	bl	800058c <HAL_GetTick>
 8001a26:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a28:	4b26      	ldr	r3, [pc, #152]	@ (8001ac4 <HAL_RCC_OscConfig+0x2ec>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	05db      	lsls	r3, r3, #23
 8001a2e:	d4e1      	bmi.n	80019f4 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a30:	f7fe fdac 	bl	800058c <HAL_GetTick>
 8001a34:	1b80      	subs	r0, r0, r6
 8001a36:	2864      	cmp	r0, #100	@ 0x64
 8001a38:	d9f6      	bls.n	8001a28 <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 8001a3a:	2003      	movs	r0, #3
 8001a3c:	e10b      	b.n	8001c56 <HAL_RCC_OscConfig+0x47e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 8001a40:	6a13      	ldr	r3, [r2, #32]
 8001a42:	2101      	movs	r1, #1
 8001a44:	430b      	orrs	r3, r1
 8001a46:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a48:	68a3      	ldr	r3, [r4, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d024      	beq.n	8001a98 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4e:	f7fe fd9d 	bl	800058c <HAL_GetTick>
 8001a52:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a54:	4b18      	ldr	r3, [pc, #96]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	079b      	lsls	r3, r3, #30
 8001a5a:	d437      	bmi.n	8001acc <HAL_RCC_OscConfig+0x2f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a5c:	f7fe fd96 	bl	800058c <HAL_GetTick>
 8001a60:	1b80      	subs	r0, r0, r6
 8001a62:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <HAL_RCC_OscConfig+0x2f0>)
 8001a64:	4298      	cmp	r0, r3
 8001a66:	d9f5      	bls.n	8001a54 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001a68:	2003      	movs	r0, #3
 8001a6a:	e0f4      	b.n	8001c56 <HAL_RCC_OscConfig+0x47e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6c:	2b05      	cmp	r3, #5
 8001a6e:	d009      	beq.n	8001a84 <HAL_RCC_OscConfig+0x2ac>
 8001a70:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 8001a72:	6a1a      	ldr	r2, [r3, #32]
 8001a74:	2101      	movs	r1, #1
 8001a76:	438a      	bics	r2, r1
 8001a78:	621a      	str	r2, [r3, #32]
 8001a7a:	6a1a      	ldr	r2, [r3, #32]
 8001a7c:	3103      	adds	r1, #3
 8001a7e:	438a      	bics	r2, r1
 8001a80:	621a      	str	r2, [r3, #32]
 8001a82:	e7e1      	b.n	8001a48 <HAL_RCC_OscConfig+0x270>
 8001a84:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 8001a86:	6a1a      	ldr	r2, [r3, #32]
 8001a88:	2104      	movs	r1, #4
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	621a      	str	r2, [r3, #32]
 8001a8e:	6a1a      	ldr	r2, [r3, #32]
 8001a90:	3903      	subs	r1, #3
 8001a92:	430a      	orrs	r2, r1
 8001a94:	621a      	str	r2, [r3, #32]
 8001a96:	e7d7      	b.n	8001a48 <HAL_RCC_OscConfig+0x270>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a98:	f7fe fd78 	bl	800058c <HAL_GetTick>
 8001a9c:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9e:	4b06      	ldr	r3, [pc, #24]	@ (8001ab8 <HAL_RCC_OscConfig+0x2e0>)
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	079b      	lsls	r3, r3, #30
 8001aa4:	d512      	bpl.n	8001acc <HAL_RCC_OscConfig+0x2f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa6:	f7fe fd71 	bl	800058c <HAL_GetTick>
 8001aaa:	1b80      	subs	r0, r0, r6
 8001aac:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <HAL_RCC_OscConfig+0x2f0>)
 8001aae:	4298      	cmp	r0, r3
 8001ab0:	d9f5      	bls.n	8001a9e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8001ab2:	2003      	movs	r0, #3
 8001ab4:	e0cf      	b.n	8001c56 <HAL_RCC_OscConfig+0x47e>
 8001ab6:	46c0      	nop			@ (mov r8, r8)
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	fffeffff 	.word	0xfffeffff
 8001ac0:	fffbffff 	.word	0xfffbffff
 8001ac4:	40007000 	.word	0x40007000
 8001ac8:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001acc:	2d01      	cmp	r5, #1
 8001ace:	d033      	beq.n	8001b38 <HAL_RCC_OscConfig+0x360>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001ad0:	6823      	ldr	r3, [r4, #0]
 8001ad2:	06db      	lsls	r3, r3, #27
 8001ad4:	d510      	bpl.n	8001af8 <HAL_RCC_OscConfig+0x320>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001ad6:	6963      	ldr	r3, [r4, #20]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d033      	beq.n	8001b44 <HAL_RCC_OscConfig+0x36c>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001adc:	3305      	adds	r3, #5
 8001ade:	d151      	bne.n	8001b84 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ae0:	4a65      	ldr	r2, [pc, #404]	@ (8001c78 <HAL_RCC_OscConfig+0x4a0>)
 8001ae2:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8001ae4:	2104      	movs	r1, #4
 8001ae6:	438b      	bics	r3, r1
 8001ae8:	6353      	str	r3, [r2, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001aea:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8001aec:	31f4      	adds	r1, #244	@ 0xf4
 8001aee:	438b      	bics	r3, r1
 8001af0:	69a1      	ldr	r1, [r4, #24]
 8001af2:	00c9      	lsls	r1, r1, #3
 8001af4:	430b      	orrs	r3, r1
 8001af6:	6353      	str	r3, [r2, #52]	@ 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af8:	6a23      	ldr	r3, [r4, #32]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d100      	bne.n	8001b00 <HAL_RCC_OscConfig+0x328>
 8001afe:	e0b0      	b.n	8001c62 <HAL_RCC_OscConfig+0x48a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b00:	4a5d      	ldr	r2, [pc, #372]	@ (8001c78 <HAL_RCC_OscConfig+0x4a0>)
 8001b02:	6851      	ldr	r1, [r2, #4]
 8001b04:	220c      	movs	r2, #12
 8001b06:	400a      	ands	r2, r1
 8001b08:	2a08      	cmp	r2, #8
 8001b0a:	d100      	bne.n	8001b0e <HAL_RCC_OscConfig+0x336>
 8001b0c:	e08a      	b.n	8001c24 <HAL_RCC_OscConfig+0x44c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d04f      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x3da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b12:	4a59      	ldr	r2, [pc, #356]	@ (8001c78 <HAL_RCC_OscConfig+0x4a0>)
 8001b14:	6813      	ldr	r3, [r2, #0]
 8001b16:	4959      	ldr	r1, [pc, #356]	@ (8001c7c <HAL_RCC_OscConfig+0x4a4>)
 8001b18:	400b      	ands	r3, r1
 8001b1a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7fe fd36 	bl	800058c <HAL_GetTick>
 8001b20:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b22:	4b55      	ldr	r3, [pc, #340]	@ (8001c78 <HAL_RCC_OscConfig+0x4a0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	019b      	lsls	r3, r3, #6
 8001b28:	d57a      	bpl.n	8001c20 <HAL_RCC_OscConfig+0x448>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2a:	f7fe fd2f 	bl	800058c <HAL_GetTick>
 8001b2e:	1b00      	subs	r0, r0, r4
 8001b30:	2802      	cmp	r0, #2
 8001b32:	d9f6      	bls.n	8001b22 <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 8001b34:	2003      	movs	r0, #3
 8001b36:	e08e      	b.n	8001c56 <HAL_RCC_OscConfig+0x47e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b38:	4a4f      	ldr	r2, [pc, #316]	@ (8001c78 <HAL_RCC_OscConfig+0x4a0>)
 8001b3a:	69d3      	ldr	r3, [r2, #28]
 8001b3c:	4950      	ldr	r1, [pc, #320]	@ (8001c80 <HAL_RCC_OscConfig+0x4a8>)
 8001b3e:	400b      	ands	r3, r1
 8001b40:	61d3      	str	r3, [r2, #28]
 8001b42:	e7c5      	b.n	8001ad0 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b44:	4b4c      	ldr	r3, [pc, #304]	@ (8001c78 <HAL_RCC_OscConfig+0x4a0>)
 8001b46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b48:	2104      	movs	r1, #4
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001b4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b50:	3903      	subs	r1, #3
 8001b52:	430a      	orrs	r2, r1
 8001b54:	635a      	str	r2, [r3, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8001b56:	f7fe fd19 	bl	800058c <HAL_GetTick>
 8001b5a:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b5c:	4b46      	ldr	r3, [pc, #280]	@ (8001c78 <HAL_RCC_OscConfig+0x4a0>)
 8001b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b60:	079b      	lsls	r3, r3, #30
 8001b62:	d406      	bmi.n	8001b72 <HAL_RCC_OscConfig+0x39a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b64:	f7fe fd12 	bl	800058c <HAL_GetTick>
 8001b68:	1b40      	subs	r0, r0, r5
 8001b6a:	2802      	cmp	r0, #2
 8001b6c:	d9f6      	bls.n	8001b5c <HAL_RCC_OscConfig+0x384>
          return HAL_TIMEOUT;
 8001b6e:	2003      	movs	r0, #3
 8001b70:	e071      	b.n	8001c56 <HAL_RCC_OscConfig+0x47e>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b72:	4941      	ldr	r1, [pc, #260]	@ (8001c78 <HAL_RCC_OscConfig+0x4a0>)
 8001b74:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8001b76:	22f8      	movs	r2, #248	@ 0xf8
 8001b78:	4393      	bics	r3, r2
 8001b7a:	69a2      	ldr	r2, [r4, #24]
 8001b7c:	00d2      	lsls	r2, r2, #3
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	634b      	str	r3, [r1, #52]	@ 0x34
 8001b82:	e7b9      	b.n	8001af8 <HAL_RCC_OscConfig+0x320>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b84:	4b3c      	ldr	r3, [pc, #240]	@ (8001c78 <HAL_RCC_OscConfig+0x4a0>)
 8001b86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b88:	2104      	movs	r1, #4
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001b8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b90:	3903      	subs	r1, #3
 8001b92:	438a      	bics	r2, r1
 8001b94:	635a      	str	r2, [r3, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8001b96:	f7fe fcf9 	bl	800058c <HAL_GetTick>
 8001b9a:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b9c:	4b36      	ldr	r3, [pc, #216]	@ (8001c78 <HAL_RCC_OscConfig+0x4a0>)
 8001b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ba0:	079b      	lsls	r3, r3, #30
 8001ba2:	d5a9      	bpl.n	8001af8 <HAL_RCC_OscConfig+0x320>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ba4:	f7fe fcf2 	bl	800058c <HAL_GetTick>
 8001ba8:	1b40      	subs	r0, r0, r5
 8001baa:	2802      	cmp	r0, #2
 8001bac:	d9f6      	bls.n	8001b9c <HAL_RCC_OscConfig+0x3c4>
          return HAL_TIMEOUT;
 8001bae:	2003      	movs	r0, #3
 8001bb0:	e051      	b.n	8001c56 <HAL_RCC_OscConfig+0x47e>
        __HAL_RCC_PLL_DISABLE();
 8001bb2:	4a31      	ldr	r2, [pc, #196]	@ (8001c78 <HAL_RCC_OscConfig+0x4a0>)
 8001bb4:	6813      	ldr	r3, [r2, #0]
 8001bb6:	4931      	ldr	r1, [pc, #196]	@ (8001c7c <HAL_RCC_OscConfig+0x4a4>)
 8001bb8:	400b      	ands	r3, r1
 8001bba:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001bbc:	f7fe fce6 	bl	800058c <HAL_GetTick>
 8001bc0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8001c78 <HAL_RCC_OscConfig+0x4a0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	019b      	lsls	r3, r3, #6
 8001bc8:	d506      	bpl.n	8001bd8 <HAL_RCC_OscConfig+0x400>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bca:	f7fe fcdf 	bl	800058c <HAL_GetTick>
 8001bce:	1b40      	subs	r0, r0, r5
 8001bd0:	2802      	cmp	r0, #2
 8001bd2:	d9f6      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x3ea>
            return HAL_TIMEOUT;
 8001bd4:	2003      	movs	r0, #3
 8001bd6:	e03e      	b.n	8001c56 <HAL_RCC_OscConfig+0x47e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd8:	4b27      	ldr	r3, [pc, #156]	@ (8001c78 <HAL_RCC_OscConfig+0x4a0>)
 8001bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bdc:	210f      	movs	r1, #15
 8001bde:	438a      	bics	r2, r1
 8001be0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001be2:	430a      	orrs	r2, r1
 8001be4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	4926      	ldr	r1, [pc, #152]	@ (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001bea:	400a      	ands	r2, r1
 8001bec:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001bee:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001bf0:	4301      	orrs	r1, r0
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8001bf6:	6819      	ldr	r1, [r3, #0]
 8001bf8:	2280      	movs	r2, #128	@ 0x80
 8001bfa:	0452      	lsls	r2, r2, #17
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c00:	f7fe fcc4 	bl	800058c <HAL_GetTick>
 8001c04:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c06:	4b1c      	ldr	r3, [pc, #112]	@ (8001c78 <HAL_RCC_OscConfig+0x4a0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	019b      	lsls	r3, r3, #6
 8001c0c:	d406      	bmi.n	8001c1c <HAL_RCC_OscConfig+0x444>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c0e:	f7fe fcbd 	bl	800058c <HAL_GetTick>
 8001c12:	1b00      	subs	r0, r0, r4
 8001c14:	2802      	cmp	r0, #2
 8001c16:	d9f6      	bls.n	8001c06 <HAL_RCC_OscConfig+0x42e>
            return HAL_TIMEOUT;
 8001c18:	2003      	movs	r0, #3
 8001c1a:	e01c      	b.n	8001c56 <HAL_RCC_OscConfig+0x47e>
        }
      }
    }
  }

  return HAL_OK;
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	e01a      	b.n	8001c56 <HAL_RCC_OscConfig+0x47e>
 8001c20:	2000      	movs	r0, #0
 8001c22:	e018      	b.n	8001c56 <HAL_RCC_OscConfig+0x47e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d01e      	beq.n	8001c66 <HAL_RCC_OscConfig+0x48e>
        pll_config  = RCC->CFGR;
 8001c28:	4b13      	ldr	r3, [pc, #76]	@ (8001c78 <HAL_RCC_OscConfig+0x4a0>)
 8001c2a:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 8001c2c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2e:	23c0      	movs	r3, #192	@ 0xc0
 8001c30:	025b      	lsls	r3, r3, #9
 8001c32:	4013      	ands	r3, r2
 8001c34:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001c36:	428b      	cmp	r3, r1
 8001c38:	d117      	bne.n	8001c6a <HAL_RCC_OscConfig+0x492>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c3a:	230f      	movs	r3, #15
 8001c3c:	4003      	ands	r3, r0
 8001c3e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c40:	428b      	cmp	r3, r1
 8001c42:	d114      	bne.n	8001c6e <HAL_RCC_OscConfig+0x496>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001c44:	23f0      	movs	r3, #240	@ 0xf0
 8001c46:	039b      	lsls	r3, r3, #14
 8001c48:	401a      	ands	r2, r3
 8001c4a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d110      	bne.n	8001c72 <HAL_RCC_OscConfig+0x49a>
  return HAL_OK;
 8001c50:	2000      	movs	r0, #0
 8001c52:	e000      	b.n	8001c56 <HAL_RCC_OscConfig+0x47e>
    return HAL_ERROR;
 8001c54:	2001      	movs	r0, #1
}
 8001c56:	b002      	add	sp, #8
 8001c58:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	e7fb      	b.n	8001c56 <HAL_RCC_OscConfig+0x47e>
        return HAL_ERROR;
 8001c5e:	2001      	movs	r0, #1
 8001c60:	e7f9      	b.n	8001c56 <HAL_RCC_OscConfig+0x47e>
  return HAL_OK;
 8001c62:	2000      	movs	r0, #0
 8001c64:	e7f7      	b.n	8001c56 <HAL_RCC_OscConfig+0x47e>
        return HAL_ERROR;
 8001c66:	2001      	movs	r0, #1
 8001c68:	e7f5      	b.n	8001c56 <HAL_RCC_OscConfig+0x47e>
          return HAL_ERROR;
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	e7f3      	b.n	8001c56 <HAL_RCC_OscConfig+0x47e>
 8001c6e:	2001      	movs	r0, #1
 8001c70:	e7f1      	b.n	8001c56 <HAL_RCC_OscConfig+0x47e>
 8001c72:	2001      	movs	r0, #1
 8001c74:	e7ef      	b.n	8001c56 <HAL_RCC_OscConfig+0x47e>
 8001c76:	46c0      	nop			@ (mov r8, r8)
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	feffffff 	.word	0xfeffffff
 8001c80:	efffffff 	.word	0xefffffff
 8001c84:	ffc27fff 	.word	0xffc27fff

08001c88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c88:	b510      	push	{r4, lr}
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001c8a:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x50>)
 8001c8c:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c8e:	230c      	movs	r3, #12
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d01c      	beq.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x48>
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d11c      	bne.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x4c>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c9a:	0c91      	lsrs	r1, r2, #18
 8001c9c:	3307      	adds	r3, #7
 8001c9e:	4019      	ands	r1, r3
 8001ca0:	480e      	ldr	r0, [pc, #56]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x54>)
 8001ca2:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ca4:	490c      	ldr	r1, [pc, #48]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x50>)
 8001ca6:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 8001ca8:	400b      	ands	r3, r1
 8001caa:	490d      	ldr	r1, [pc, #52]	@ (8001ce0 <HAL_RCC_GetSysClockFreq+0x58>)
 8001cac:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001cae:	23c0      	movs	r3, #192	@ 0xc0
 8001cb0:	025b      	lsls	r3, r3, #9
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	2380      	movs	r3, #128	@ 0x80
 8001cb6:	025b      	lsls	r3, r3, #9
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d004      	beq.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x3e>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001cbc:	4809      	ldr	r0, [pc, #36]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001cbe:	f7fe fa23 	bl	8000108 <__udivsi3>
 8001cc2:	4360      	muls	r0, r4
 8001cc4:	e005      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001cc6:	4808      	ldr	r0, [pc, #32]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x60>)
 8001cc8:	f7fe fa1e 	bl	8000108 <__udivsi3>
 8001ccc:	4360      	muls	r0, r4
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x4a>
  switch (tmpreg & RCC_CFGR_SWS)
 8001cd0:	4805      	ldr	r0, [pc, #20]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001cd2:	bd10      	pop	{r4, pc}
      sysclockfreq = HSI_VALUE;
 8001cd4:	4803      	ldr	r0, [pc, #12]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8001cd6:	e7fc      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x4a>
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	080045d8 	.word	0x080045d8
 8001ce0:	080045c8 	.word	0x080045c8
 8001ce4:	007a1200 	.word	0x007a1200
 8001ce8:	00f42400 	.word	0x00f42400

08001cec <HAL_RCC_ClockConfig>:
{
 8001cec:	b570      	push	{r4, r5, r6, lr}
 8001cee:	0004      	movs	r4, r0
 8001cf0:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001cf2:	2800      	cmp	r0, #0
 8001cf4:	d100      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xc>
 8001cf6:	e07e      	b.n	8001df6 <HAL_RCC_ClockConfig+0x10a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf8:	4b43      	ldr	r3, [pc, #268]	@ (8001e08 <HAL_RCC_ClockConfig+0x11c>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	4013      	ands	r3, r2
 8001d00:	428b      	cmp	r3, r1
 8001d02:	d20a      	bcs.n	8001d1a <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d04:	4940      	ldr	r1, [pc, #256]	@ (8001e08 <HAL_RCC_ClockConfig+0x11c>)
 8001d06:	680b      	ldr	r3, [r1, #0]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4393      	bics	r3, r2
 8001d0c:	432b      	orrs	r3, r5
 8001d0e:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d10:	680b      	ldr	r3, [r1, #0]
 8001d12:	401a      	ands	r2, r3
 8001d14:	42aa      	cmp	r2, r5
 8001d16:	d000      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x2e>
 8001d18:	e06f      	b.n	8001dfa <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	079a      	lsls	r2, r3, #30
 8001d1e:	d50e      	bpl.n	8001d3e <HAL_RCC_ClockConfig+0x52>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d20:	075b      	lsls	r3, r3, #29
 8001d22:	d505      	bpl.n	8001d30 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d24:	4a39      	ldr	r2, [pc, #228]	@ (8001e0c <HAL_RCC_ClockConfig+0x120>)
 8001d26:	6851      	ldr	r1, [r2, #4]
 8001d28:	23e0      	movs	r3, #224	@ 0xe0
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	430b      	orrs	r3, r1
 8001d2e:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d30:	4a36      	ldr	r2, [pc, #216]	@ (8001e0c <HAL_RCC_ClockConfig+0x120>)
 8001d32:	6853      	ldr	r3, [r2, #4]
 8001d34:	21f0      	movs	r1, #240	@ 0xf0
 8001d36:	438b      	bics	r3, r1
 8001d38:	68a1      	ldr	r1, [r4, #8]
 8001d3a:	430b      	orrs	r3, r1
 8001d3c:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d3e:	6823      	ldr	r3, [r4, #0]
 8001d40:	07db      	lsls	r3, r3, #31
 8001d42:	d52d      	bpl.n	8001da0 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d44:	6863      	ldr	r3, [r4, #4]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d01e      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x9c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d022      	beq.n	8001d94 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4e:	4a2f      	ldr	r2, [pc, #188]	@ (8001e0c <HAL_RCC_ClockConfig+0x120>)
 8001d50:	6812      	ldr	r2, [r2, #0]
 8001d52:	0792      	lsls	r2, r2, #30
 8001d54:	d553      	bpl.n	8001dfe <HAL_RCC_ClockConfig+0x112>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d56:	492d      	ldr	r1, [pc, #180]	@ (8001e0c <HAL_RCC_ClockConfig+0x120>)
 8001d58:	684a      	ldr	r2, [r1, #4]
 8001d5a:	2003      	movs	r0, #3
 8001d5c:	4382      	bics	r2, r0
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001d62:	f7fe fc13 	bl	800058c <HAL_GetTick>
 8001d66:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d68:	4b28      	ldr	r3, [pc, #160]	@ (8001e0c <HAL_RCC_ClockConfig+0x120>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	220c      	movs	r2, #12
 8001d6e:	401a      	ands	r2, r3
 8001d70:	6863      	ldr	r3, [r4, #4]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d013      	beq.n	8001da0 <HAL_RCC_ClockConfig+0xb4>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d78:	f7fe fc08 	bl	800058c <HAL_GetTick>
 8001d7c:	1b80      	subs	r0, r0, r6
 8001d7e:	4b24      	ldr	r3, [pc, #144]	@ (8001e10 <HAL_RCC_ClockConfig+0x124>)
 8001d80:	4298      	cmp	r0, r3
 8001d82:	d9f1      	bls.n	8001d68 <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 8001d84:	2003      	movs	r0, #3
 8001d86:	e035      	b.n	8001df4 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d88:	4a20      	ldr	r2, [pc, #128]	@ (8001e0c <HAL_RCC_ClockConfig+0x120>)
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	0392      	lsls	r2, r2, #14
 8001d8e:	d4e2      	bmi.n	8001d56 <HAL_RCC_ClockConfig+0x6a>
        return HAL_ERROR;
 8001d90:	2001      	movs	r0, #1
 8001d92:	e02f      	b.n	8001df4 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d94:	4a1d      	ldr	r2, [pc, #116]	@ (8001e0c <HAL_RCC_ClockConfig+0x120>)
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	0192      	lsls	r2, r2, #6
 8001d9a:	d4dc      	bmi.n	8001d56 <HAL_RCC_ClockConfig+0x6a>
        return HAL_ERROR;
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	e029      	b.n	8001df4 <HAL_RCC_ClockConfig+0x108>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da0:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <HAL_RCC_ClockConfig+0x11c>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2301      	movs	r3, #1
 8001da6:	4013      	ands	r3, r2
 8001da8:	42ab      	cmp	r3, r5
 8001daa:	d909      	bls.n	8001dc0 <HAL_RCC_ClockConfig+0xd4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dac:	4916      	ldr	r1, [pc, #88]	@ (8001e08 <HAL_RCC_ClockConfig+0x11c>)
 8001dae:	680b      	ldr	r3, [r1, #0]
 8001db0:	2201      	movs	r2, #1
 8001db2:	4393      	bics	r3, r2
 8001db4:	432b      	orrs	r3, r5
 8001db6:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db8:	680b      	ldr	r3, [r1, #0]
 8001dba:	401a      	ands	r2, r3
 8001dbc:	42aa      	cmp	r2, r5
 8001dbe:	d120      	bne.n	8001e02 <HAL_RCC_ClockConfig+0x116>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc0:	6823      	ldr	r3, [r4, #0]
 8001dc2:	075b      	lsls	r3, r3, #29
 8001dc4:	d506      	bpl.n	8001dd4 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc6:	4a11      	ldr	r2, [pc, #68]	@ (8001e0c <HAL_RCC_ClockConfig+0x120>)
 8001dc8:	6853      	ldr	r3, [r2, #4]
 8001dca:	4912      	ldr	r1, [pc, #72]	@ (8001e14 <HAL_RCC_ClockConfig+0x128>)
 8001dcc:	400b      	ands	r3, r1
 8001dce:	68e1      	ldr	r1, [r4, #12]
 8001dd0:	430b      	orrs	r3, r1
 8001dd2:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001dd4:	f7ff ff58 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e0c <HAL_RCC_ClockConfig+0x120>)
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	0912      	lsrs	r2, r2, #4
 8001dde:	230f      	movs	r3, #15
 8001de0:	4013      	ands	r3, r2
 8001de2:	4a0d      	ldr	r2, [pc, #52]	@ (8001e18 <HAL_RCC_ClockConfig+0x12c>)
 8001de4:	5cd3      	ldrb	r3, [r2, r3]
 8001de6:	40d8      	lsrs	r0, r3
 8001de8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e1c <HAL_RCC_ClockConfig+0x130>)
 8001dea:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001dec:	2003      	movs	r0, #3
 8001dee:	f7fe fb89 	bl	8000504 <HAL_InitTick>
  return HAL_OK;
 8001df2:	2000      	movs	r0, #0
}
 8001df4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001df6:	2001      	movs	r0, #1
 8001df8:	e7fc      	b.n	8001df4 <HAL_RCC_ClockConfig+0x108>
      return HAL_ERROR;
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	e7fa      	b.n	8001df4 <HAL_RCC_ClockConfig+0x108>
        return HAL_ERROR;
 8001dfe:	2001      	movs	r0, #1
 8001e00:	e7f8      	b.n	8001df4 <HAL_RCC_ClockConfig+0x108>
      return HAL_ERROR;
 8001e02:	2001      	movs	r0, #1
 8001e04:	e7f6      	b.n	8001df4 <HAL_RCC_ClockConfig+0x108>
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	40022000 	.word	0x40022000
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	00001388 	.word	0x00001388
 8001e14:	fffff8ff 	.word	0xfffff8ff
 8001e18:	080045b8 	.word	0x080045b8
 8001e1c:	20000000 	.word	0x20000000

08001e20 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001e20:	4b01      	ldr	r3, [pc, #4]	@ (8001e28 <HAL_RCC_GetHCLKFreq+0x8>)
 8001e22:	6818      	ldr	r0, [r3, #0]
}
 8001e24:	4770      	bx	lr
 8001e26:	46c0      	nop			@ (mov r8, r8)
 8001e28:	20000000 	.word	0x20000000

08001e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e2c:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001e2e:	f7ff fff7 	bl	8001e20 <HAL_RCC_GetHCLKFreq>
 8001e32:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	0a12      	lsrs	r2, r2, #8
 8001e38:	2307      	movs	r3, #7
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	4a02      	ldr	r2, [pc, #8]	@ (8001e48 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001e3e:	5cd3      	ldrb	r3, [r2, r3]
 8001e40:	40d8      	lsrs	r0, r3
}    
 8001e42:	bd10      	pop	{r4, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	080045b0 	.word	0x080045b0

08001e4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e4c:	b570      	push	{r4, r5, r6, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e52:	6803      	ldr	r3, [r0, #0]
 8001e54:	03db      	lsls	r3, r3, #15
 8001e56:	d539      	bpl.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e58:	4b43      	ldr	r3, [pc, #268]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	d455      	bmi.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e60:	4b41      	ldr	r3, [pc, #260]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001e62:	69da      	ldr	r2, [r3, #28]
 8001e64:	2180      	movs	r1, #128	@ 0x80
 8001e66:	0549      	lsls	r1, r1, #21
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	61da      	str	r2, [r3, #28]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	400b      	ands	r3, r1
 8001e70:	9301      	str	r3, [sp, #4]
 8001e72:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001e74:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e76:	4b3d      	ldr	r3, [pc, #244]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	05db      	lsls	r3, r3, #23
 8001e7c:	d548      	bpl.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e7e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001e80:	6a1a      	ldr	r2, [r3, #32]
 8001e82:	23c0      	movs	r3, #192	@ 0xc0
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	0011      	movs	r1, r2
 8001e88:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e8a:	421a      	tst	r2, r3
 8001e8c:	d015      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8001e8e:	6863      	ldr	r3, [r4, #4]
 8001e90:	22c0      	movs	r2, #192	@ 0xc0
 8001e92:	0092      	lsls	r2, r2, #2
 8001e94:	4013      	ands	r3, r2
 8001e96:	428b      	cmp	r3, r1
 8001e98:	d00f      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e9a:	4b33      	ldr	r3, [pc, #204]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001e9c:	6a1a      	ldr	r2, [r3, #32]
 8001e9e:	4934      	ldr	r1, [pc, #208]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001ea0:	4011      	ands	r1, r2
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ea2:	6a1e      	ldr	r6, [r3, #32]
 8001ea4:	2080      	movs	r0, #128	@ 0x80
 8001ea6:	0240      	lsls	r0, r0, #9
 8001ea8:	4330      	orrs	r0, r6
 8001eaa:	6218      	str	r0, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eac:	6a18      	ldr	r0, [r3, #32]
 8001eae:	4e31      	ldr	r6, [pc, #196]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001eb0:	4030      	ands	r0, r6
 8001eb2:	6218      	str	r0, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001eb4:	6219      	str	r1, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001eb6:	07d2      	lsls	r2, r2, #31
 8001eb8:	d43e      	bmi.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0xec>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eba:	4a2b      	ldr	r2, [pc, #172]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001ebc:	6a13      	ldr	r3, [r2, #32]
 8001ebe:	492c      	ldr	r1, [pc, #176]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001ec0:	400b      	ands	r3, r1
 8001ec2:	6861      	ldr	r1, [r4, #4]
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ec8:	2d01      	cmp	r5, #1
 8001eca:	d044      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x10a>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ecc:	6823      	ldr	r3, [r4, #0]
 8001ece:	07db      	lsls	r3, r3, #31
 8001ed0:	d506      	bpl.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ed2:	4a25      	ldr	r2, [pc, #148]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001ed4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8001ed6:	2103      	movs	r1, #3
 8001ed8:	438b      	bics	r3, r1
 8001eda:	68a1      	ldr	r1, [r4, #8]
 8001edc:	430b      	orrs	r3, r1
 8001ede:	6313      	str	r3, [r2, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ee0:	6823      	ldr	r3, [r4, #0]
 8001ee2:	069b      	lsls	r3, r3, #26
 8001ee4:	d506      	bpl.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ee6:	4a20      	ldr	r2, [pc, #128]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001ee8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8001eea:	2110      	movs	r1, #16
 8001eec:	438b      	bics	r3, r1
 8001eee:	68e1      	ldr	r1, [r4, #12]
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	6313      	str	r3, [r2, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ef4:	6823      	ldr	r3, [r4, #0]
 8001ef6:	039b      	lsls	r3, r3, #14
 8001ef8:	d532      	bpl.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001efa:	4a1b      	ldr	r2, [pc, #108]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001efc:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8001efe:	2180      	movs	r1, #128	@ 0x80
 8001f00:	438b      	bics	r3, r1
 8001f02:	6921      	ldr	r1, [r4, #16]
 8001f04:	430b      	orrs	r3, r1
 8001f06:	6313      	str	r3, [r2, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001f08:	2000      	movs	r0, #0
 8001f0a:	e02a      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x116>
    FlagStatus       pwrclkchanged = RESET;
 8001f0c:	2500      	movs	r5, #0
 8001f0e:	e7b2      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f10:	4a16      	ldr	r2, [pc, #88]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001f12:	6811      	ldr	r1, [r2, #0]
 8001f14:	2380      	movs	r3, #128	@ 0x80
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001f1c:	f7fe fb36 	bl	800058c <HAL_GetTick>
 8001f20:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f22:	4b12      	ldr	r3, [pc, #72]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	05db      	lsls	r3, r3, #23
 8001f28:	d4a9      	bmi.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2a:	f7fe fb2f 	bl	800058c <HAL_GetTick>
 8001f2e:	1b80      	subs	r0, r0, r6
 8001f30:	2864      	cmp	r0, #100	@ 0x64
 8001f32:	d9f6      	bls.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          return HAL_TIMEOUT;
 8001f34:	2003      	movs	r0, #3
 8001f36:	e014      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x116>
        tickstart = HAL_GetTick();
 8001f38:	f7fe fb28 	bl	800058c <HAL_GetTick>
 8001f3c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	079b      	lsls	r3, r3, #30
 8001f44:	d4b9      	bmi.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7fe fb21 	bl	800058c <HAL_GetTick>
 8001f4a:	1b80      	subs	r0, r0, r6
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001f4e:	4298      	cmp	r0, r3
 8001f50:	d9f5      	bls.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0xf2>
            return HAL_TIMEOUT;
 8001f52:	2003      	movs	r0, #3
 8001f54:	e005      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x116>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f56:	69d3      	ldr	r3, [r2, #28]
 8001f58:	4908      	ldr	r1, [pc, #32]	@ (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f5a:	400b      	ands	r3, r1
 8001f5c:	61d3      	str	r3, [r2, #28]
 8001f5e:	e7b5      	b.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x80>
  return HAL_OK;
 8001f60:	2000      	movs	r0, #0
}
 8001f62:	b002      	add	sp, #8
 8001f64:	bd70      	pop	{r4, r5, r6, pc}
 8001f66:	46c0      	nop			@ (mov r8, r8)
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40007000 	.word	0x40007000
 8001f70:	fffffcff 	.word	0xfffffcff
 8001f74:	fffeffff 	.word	0xfffeffff
 8001f78:	00001388 	.word	0x00001388
 8001f7c:	efffffff 	.word	0xefffffff

08001f80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f80:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f82:	f3ef 8c10 	mrs	ip, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f86:	2201      	movs	r2, #1
 8001f88:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f8c:	6801      	ldr	r1, [r0, #0]
 8001f8e:	680b      	ldr	r3, [r1, #0]
 8001f90:	4c12      	ldr	r4, [pc, #72]	@ (8001fdc <UART_EndRxTransfer+0x5c>)
 8001f92:	4023      	ands	r3, r4
 8001f94:	600b      	str	r3, [r1, #0]
 8001f96:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f9a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f9e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fa2:	6801      	ldr	r1, [r0, #0]
 8001fa4:	688b      	ldr	r3, [r1, #8]
 8001fa6:	4393      	bics	r3, r2
 8001fa8:	608b      	str	r3, [r1, #8]
 8001faa:	f38c 8810 	msr	PRIMASK, ip

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fae:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d006      	beq.n	8001fc2 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001fb4:	2380      	movs	r3, #128	@ 0x80
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001fbe:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8001fc0:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fc2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fc6:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fca:	6802      	ldr	r2, [r0, #0]
 8001fcc:	6813      	ldr	r3, [r2, #0]
 8001fce:	3432      	adds	r4, #50	@ 0x32
 8001fd0:	34ff      	adds	r4, #255	@ 0xff
 8001fd2:	43a3      	bics	r3, r4
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	f381 8810 	msr	PRIMASK, r1
}
 8001fda:	e7eb      	b.n	8001fb4 <UART_EndRxTransfer+0x34>
 8001fdc:	fffffedf 	.word	0xfffffedf

08001fe0 <UART_SetConfig>:
{
 8001fe0:	b510      	push	{r4, lr}
 8001fe2:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fe4:	6883      	ldr	r3, [r0, #8]
 8001fe6:	6902      	ldr	r2, [r0, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	6942      	ldr	r2, [r0, #20]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	69c2      	ldr	r2, [r0, #28]
 8001ff0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001ff2:	6801      	ldr	r1, [r0, #0]
 8001ff4:	680a      	ldr	r2, [r1, #0]
 8001ff6:	484e      	ldr	r0, [pc, #312]	@ (8002130 <UART_SetConfig+0x150>)
 8001ff8:	4002      	ands	r2, r0
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ffe:	6822      	ldr	r2, [r4, #0]
 8002000:	6853      	ldr	r3, [r2, #4]
 8002002:	494c      	ldr	r1, [pc, #304]	@ (8002134 <UART_SetConfig+0x154>)
 8002004:	400b      	ands	r3, r1
 8002006:	68e1      	ldr	r1, [r4, #12]
 8002008:	430b      	orrs	r3, r1
 800200a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800200c:	69a3      	ldr	r3, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 800200e:	6a22      	ldr	r2, [r4, #32]
 8002010:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002012:	6821      	ldr	r1, [r4, #0]
 8002014:	688b      	ldr	r3, [r1, #8]
 8002016:	4848      	ldr	r0, [pc, #288]	@ (8002138 <UART_SetConfig+0x158>)
 8002018:	4003      	ands	r3, r0
 800201a:	4313      	orrs	r3, r2
 800201c:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	4a46      	ldr	r2, [pc, #280]	@ (800213c <UART_SetConfig+0x15c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d011      	beq.n	800204a <UART_SetConfig+0x6a>
 8002026:	4a46      	ldr	r2, [pc, #280]	@ (8002140 <UART_SetConfig+0x160>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d01f      	beq.n	800206c <UART_SetConfig+0x8c>
 800202c:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800202e:	69e0      	ldr	r0, [r4, #28]
 8002030:	2280      	movs	r2, #128	@ 0x80
 8002032:	0212      	lsls	r2, r2, #8
 8002034:	4290      	cmp	r0, r2
 8002036:	d023      	beq.n	8002080 <UART_SetConfig+0xa0>
    switch (clocksource)
 8002038:	2b04      	cmp	r3, #4
 800203a:	d06a      	beq.n	8002112 <UART_SetConfig+0x132>
 800203c:	d84e      	bhi.n	80020dc <UART_SetConfig+0xfc>
 800203e:	2b00      	cmp	r3, #0
 8002040:	d053      	beq.n	80020ea <UART_SetConfig+0x10a>
 8002042:	2b02      	cmp	r3, #2
 8002044:	d148      	bne.n	80020d8 <UART_SetConfig+0xf8>
 8002046:	483f      	ldr	r0, [pc, #252]	@ (8002144 <UART_SetConfig+0x164>)
 8002048:	e053      	b.n	80020f2 <UART_SetConfig+0x112>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800204a:	4b3f      	ldr	r3, [pc, #252]	@ (8002148 <UART_SetConfig+0x168>)
 800204c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800204e:	2303      	movs	r3, #3
 8002050:	4013      	ands	r3, r2
 8002052:	2b02      	cmp	r3, #2
 8002054:	d00c      	beq.n	8002070 <UART_SetConfig+0x90>
 8002056:	d805      	bhi.n	8002064 <UART_SetConfig+0x84>
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00b      	beq.n	8002074 <UART_SetConfig+0x94>
 800205c:	2b01      	cmp	r3, #1
 800205e:	d10b      	bne.n	8002078 <UART_SetConfig+0x98>
 8002060:	3303      	adds	r3, #3
 8002062:	e7e4      	b.n	800202e <UART_SetConfig+0x4e>
 8002064:	2b03      	cmp	r3, #3
 8002066:	d109      	bne.n	800207c <UART_SetConfig+0x9c>
 8002068:	3b01      	subs	r3, #1
 800206a:	e7e0      	b.n	800202e <UART_SetConfig+0x4e>
 800206c:	2300      	movs	r3, #0
 800206e:	e7de      	b.n	800202e <UART_SetConfig+0x4e>
 8002070:	2308      	movs	r3, #8
 8002072:	e7dc      	b.n	800202e <UART_SetConfig+0x4e>
 8002074:	2300      	movs	r3, #0
 8002076:	e7da      	b.n	800202e <UART_SetConfig+0x4e>
 8002078:	2310      	movs	r3, #16
 800207a:	e7d8      	b.n	800202e <UART_SetConfig+0x4e>
 800207c:	2310      	movs	r3, #16
 800207e:	e7d6      	b.n	800202e <UART_SetConfig+0x4e>
    switch (clocksource)
 8002080:	2b04      	cmp	r3, #4
 8002082:	d026      	beq.n	80020d2 <UART_SetConfig+0xf2>
 8002084:	d807      	bhi.n	8002096 <UART_SetConfig+0xb6>
 8002086:	2b00      	cmp	r3, #0
 8002088:	d009      	beq.n	800209e <UART_SetConfig+0xbe>
 800208a:	2b02      	cmp	r3, #2
 800208c:	d101      	bne.n	8002092 <UART_SetConfig+0xb2>
        pclk = (uint32_t) HSI_VALUE;
 800208e:	482d      	ldr	r0, [pc, #180]	@ (8002144 <UART_SetConfig+0x164>)
 8002090:	e009      	b.n	80020a6 <UART_SetConfig+0xc6>
    switch (clocksource)
 8002092:	2001      	movs	r0, #1
 8002094:	e047      	b.n	8002126 <UART_SetConfig+0x146>
 8002096:	2b08      	cmp	r3, #8
 8002098:	d005      	beq.n	80020a6 <UART_SetConfig+0xc6>
 800209a:	2001      	movs	r0, #1
 800209c:	e043      	b.n	8002126 <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetPCLK1Freq();
 800209e:	f7ff fec5 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80020a2:	2800      	cmp	r0, #0
 80020a4:	d038      	beq.n	8002118 <UART_SetConfig+0x138>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80020a6:	0040      	lsls	r0, r0, #1
 80020a8:	6861      	ldr	r1, [r4, #4]
 80020aa:	084b      	lsrs	r3, r1, #1
 80020ac:	18c0      	adds	r0, r0, r3
 80020ae:	f7fe f82b 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020b2:	0002      	movs	r2, r0
 80020b4:	3a10      	subs	r2, #16
 80020b6:	4b25      	ldr	r3, [pc, #148]	@ (800214c <UART_SetConfig+0x16c>)
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d82f      	bhi.n	800211c <UART_SetConfig+0x13c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80020bc:	b282      	uxth	r2, r0
 80020be:	230f      	movs	r3, #15
 80020c0:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80020c2:	0840      	lsrs	r0, r0, #1
 80020c4:	3b08      	subs	r3, #8
 80020c6:	4003      	ands	r3, r0
 80020c8:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80020ca:	6822      	ldr	r2, [r4, #0]
 80020cc:	60d3      	str	r3, [r2, #12]
 80020ce:	2000      	movs	r0, #0
 80020d0:	e029      	b.n	8002126 <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetSysClockFreq();
 80020d2:	f7ff fdd9 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
        break;
 80020d6:	e7e4      	b.n	80020a2 <UART_SetConfig+0xc2>
    switch (clocksource)
 80020d8:	2001      	movs	r0, #1
 80020da:	e024      	b.n	8002126 <UART_SetConfig+0x146>
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d102      	bne.n	80020e6 <UART_SetConfig+0x106>
        pclk = (uint32_t) LSE_VALUE;
 80020e0:	2080      	movs	r0, #128	@ 0x80
 80020e2:	0200      	lsls	r0, r0, #8
 80020e4:	e005      	b.n	80020f2 <UART_SetConfig+0x112>
    switch (clocksource)
 80020e6:	2001      	movs	r0, #1
 80020e8:	e01d      	b.n	8002126 <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetPCLK1Freq();
 80020ea:	f7ff fe9f 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80020ee:	2800      	cmp	r0, #0
 80020f0:	d016      	beq.n	8002120 <UART_SetConfig+0x140>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80020f2:	6861      	ldr	r1, [r4, #4]
 80020f4:	084b      	lsrs	r3, r1, #1
 80020f6:	1818      	adds	r0, r3, r0
 80020f8:	f7fe f806 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020fc:	0002      	movs	r2, r0
 80020fe:	3a10      	subs	r2, #16
 8002100:	4b12      	ldr	r3, [pc, #72]	@ (800214c <UART_SetConfig+0x16c>)
 8002102:	429a      	cmp	r2, r3
 8002104:	d80e      	bhi.n	8002124 <UART_SetConfig+0x144>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	0400      	lsls	r0, r0, #16
 800210a:	0c00      	lsrs	r0, r0, #16
 800210c:	60d8      	str	r0, [r3, #12]
 800210e:	2000      	movs	r0, #0
 8002110:	e009      	b.n	8002126 <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetSysClockFreq();
 8002112:	f7ff fdb9 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
        break;
 8002116:	e7ea      	b.n	80020ee <UART_SetConfig+0x10e>
 8002118:	2000      	movs	r0, #0
 800211a:	e004      	b.n	8002126 <UART_SetConfig+0x146>
        ret = HAL_ERROR;
 800211c:	2001      	movs	r0, #1
 800211e:	e002      	b.n	8002126 <UART_SetConfig+0x146>
 8002120:	2000      	movs	r0, #0
 8002122:	e000      	b.n	8002126 <UART_SetConfig+0x146>
        ret = HAL_ERROR;
 8002124:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8002126:	2300      	movs	r3, #0
 8002128:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800212a:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 800212c:	bd10      	pop	{r4, pc}
 800212e:	46c0      	nop			@ (mov r8, r8)
 8002130:	efff69f3 	.word	0xefff69f3
 8002134:	ffffcfff 	.word	0xffffcfff
 8002138:	fffff4ff 	.word	0xfffff4ff
 800213c:	40013800 	.word	0x40013800
 8002140:	40004400 	.word	0x40004400
 8002144:	007a1200 	.word	0x007a1200
 8002148:	40021000 	.word	0x40021000
 800214c:	0000ffef 	.word	0x0000ffef

08002150 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002150:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002152:	071b      	lsls	r3, r3, #28
 8002154:	d506      	bpl.n	8002164 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002156:	6802      	ldr	r2, [r0, #0]
 8002158:	6853      	ldr	r3, [r2, #4]
 800215a:	492c      	ldr	r1, [pc, #176]	@ (800220c <UART_AdvFeatureConfig+0xbc>)
 800215c:	400b      	ands	r3, r1
 800215e:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8002160:	430b      	orrs	r3, r1
 8002162:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002164:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002166:	07db      	lsls	r3, r3, #31
 8002168:	d506      	bpl.n	8002178 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800216a:	6802      	ldr	r2, [r0, #0]
 800216c:	6853      	ldr	r3, [r2, #4]
 800216e:	4928      	ldr	r1, [pc, #160]	@ (8002210 <UART_AdvFeatureConfig+0xc0>)
 8002170:	400b      	ands	r3, r1
 8002172:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8002174:	430b      	orrs	r3, r1
 8002176:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002178:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800217a:	079b      	lsls	r3, r3, #30
 800217c:	d506      	bpl.n	800218c <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800217e:	6802      	ldr	r2, [r0, #0]
 8002180:	6853      	ldr	r3, [r2, #4]
 8002182:	4924      	ldr	r1, [pc, #144]	@ (8002214 <UART_AdvFeatureConfig+0xc4>)
 8002184:	400b      	ands	r3, r1
 8002186:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8002188:	430b      	orrs	r3, r1
 800218a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800218c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800218e:	075b      	lsls	r3, r3, #29
 8002190:	d506      	bpl.n	80021a0 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002192:	6802      	ldr	r2, [r0, #0]
 8002194:	6853      	ldr	r3, [r2, #4]
 8002196:	4920      	ldr	r1, [pc, #128]	@ (8002218 <UART_AdvFeatureConfig+0xc8>)
 8002198:	400b      	ands	r3, r1
 800219a:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800219c:	430b      	orrs	r3, r1
 800219e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80021a0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80021a2:	06db      	lsls	r3, r3, #27
 80021a4:	d506      	bpl.n	80021b4 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80021a6:	6802      	ldr	r2, [r0, #0]
 80021a8:	6893      	ldr	r3, [r2, #8]
 80021aa:	491c      	ldr	r1, [pc, #112]	@ (800221c <UART_AdvFeatureConfig+0xcc>)
 80021ac:	400b      	ands	r3, r1
 80021ae:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80021b0:	430b      	orrs	r3, r1
 80021b2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80021b4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80021b6:	069b      	lsls	r3, r3, #26
 80021b8:	d506      	bpl.n	80021c8 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80021ba:	6802      	ldr	r2, [r0, #0]
 80021bc:	6893      	ldr	r3, [r2, #8]
 80021be:	4918      	ldr	r1, [pc, #96]	@ (8002220 <UART_AdvFeatureConfig+0xd0>)
 80021c0:	400b      	ands	r3, r1
 80021c2:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80021c4:	430b      	orrs	r3, r1
 80021c6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80021c8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80021ca:	065b      	lsls	r3, r3, #25
 80021cc:	d50b      	bpl.n	80021e6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80021ce:	6802      	ldr	r2, [r0, #0]
 80021d0:	6853      	ldr	r3, [r2, #4]
 80021d2:	4914      	ldr	r1, [pc, #80]	@ (8002224 <UART_AdvFeatureConfig+0xd4>)
 80021d4:	400b      	ands	r3, r1
 80021d6:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80021d8:	430b      	orrs	r3, r1
 80021da:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80021dc:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80021de:	2380      	movs	r3, #128	@ 0x80
 80021e0:	035b      	lsls	r3, r3, #13
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d00a      	beq.n	80021fc <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80021e6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80021e8:	061b      	lsls	r3, r3, #24
 80021ea:	d506      	bpl.n	80021fa <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80021ec:	6802      	ldr	r2, [r0, #0]
 80021ee:	6853      	ldr	r3, [r2, #4]
 80021f0:	490d      	ldr	r1, [pc, #52]	@ (8002228 <UART_AdvFeatureConfig+0xd8>)
 80021f2:	400b      	ands	r3, r1
 80021f4:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80021f6:	430b      	orrs	r3, r1
 80021f8:	6053      	str	r3, [r2, #4]
}
 80021fa:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80021fc:	6802      	ldr	r2, [r0, #0]
 80021fe:	6853      	ldr	r3, [r2, #4]
 8002200:	490a      	ldr	r1, [pc, #40]	@ (800222c <UART_AdvFeatureConfig+0xdc>)
 8002202:	400b      	ands	r3, r1
 8002204:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8002206:	430b      	orrs	r3, r1
 8002208:	6053      	str	r3, [r2, #4]
 800220a:	e7ec      	b.n	80021e6 <UART_AdvFeatureConfig+0x96>
 800220c:	ffff7fff 	.word	0xffff7fff
 8002210:	fffdffff 	.word	0xfffdffff
 8002214:	fffeffff 	.word	0xfffeffff
 8002218:	fffbffff 	.word	0xfffbffff
 800221c:	ffffefff 	.word	0xffffefff
 8002220:	ffffdfff 	.word	0xffffdfff
 8002224:	ffefffff 	.word	0xffefffff
 8002228:	fff7ffff 	.word	0xfff7ffff
 800222c:	ff9fffff 	.word	0xff9fffff

08002230 <UART_WaitOnFlagUntilTimeout>:
{
 8002230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002232:	46ce      	mov	lr, r9
 8002234:	4647      	mov	r7, r8
 8002236:	b580      	push	{r7, lr}
 8002238:	0006      	movs	r6, r0
 800223a:	000d      	movs	r5, r1
 800223c:	0017      	movs	r7, r2
 800223e:	4699      	mov	r9, r3
 8002240:	9b08      	ldr	r3, [sp, #32]
 8002242:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002244:	6833      	ldr	r3, [r6, #0]
 8002246:	69dc      	ldr	r4, [r3, #28]
 8002248:	402c      	ands	r4, r5
 800224a:	1b64      	subs	r4, r4, r5
 800224c:	4263      	negs	r3, r4
 800224e:	415c      	adcs	r4, r3
 8002250:	42bc      	cmp	r4, r7
 8002252:	d133      	bne.n	80022bc <UART_WaitOnFlagUntilTimeout+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 8002254:	4643      	mov	r3, r8
 8002256:	3301      	adds	r3, #1
 8002258:	d0f4      	beq.n	8002244 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800225a:	f7fe f997 	bl	800058c <HAL_GetTick>
 800225e:	464b      	mov	r3, r9
 8002260:	1ac0      	subs	r0, r0, r3
 8002262:	4540      	cmp	r0, r8
 8002264:	d82f      	bhi.n	80022c6 <UART_WaitOnFlagUntilTimeout+0x96>
 8002266:	4643      	mov	r3, r8
 8002268:	2b00      	cmp	r3, #0
 800226a:	d02e      	beq.n	80022ca <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800226c:	6832      	ldr	r2, [r6, #0]
 800226e:	6813      	ldr	r3, [r2, #0]
 8002270:	075b      	lsls	r3, r3, #29
 8002272:	d5e7      	bpl.n	8002244 <UART_WaitOnFlagUntilTimeout+0x14>
 8002274:	2d80      	cmp	r5, #128	@ 0x80
 8002276:	d0e5      	beq.n	8002244 <UART_WaitOnFlagUntilTimeout+0x14>
 8002278:	2d40      	cmp	r5, #64	@ 0x40
 800227a:	d0e3      	beq.n	8002244 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800227c:	69d3      	ldr	r3, [r2, #28]
 800227e:	071b      	lsls	r3, r3, #28
 8002280:	d410      	bmi.n	80022a4 <UART_WaitOnFlagUntilTimeout+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002282:	69d3      	ldr	r3, [r2, #28]
 8002284:	051b      	lsls	r3, r3, #20
 8002286:	d5dd      	bpl.n	8002244 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002288:	2380      	movs	r3, #128	@ 0x80
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	6213      	str	r3, [r2, #32]
          UART_EndRxTransfer(huart);
 800228e:	0030      	movs	r0, r6
 8002290:	f7ff fe76 	bl	8001f80 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002294:	2384      	movs	r3, #132	@ 0x84
 8002296:	2220      	movs	r2, #32
 8002298:	50f2      	str	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 800229a:	3b0c      	subs	r3, #12
 800229c:	2200      	movs	r2, #0
 800229e:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80022a0:	2003      	movs	r0, #3
 80022a2:	e00c      	b.n	80022be <UART_WaitOnFlagUntilTimeout+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80022a4:	2408      	movs	r4, #8
 80022a6:	6214      	str	r4, [r2, #32]
          UART_EndRxTransfer(huart);
 80022a8:	0030      	movs	r0, r6
 80022aa:	f7ff fe69 	bl	8001f80 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80022ae:	2384      	movs	r3, #132	@ 0x84
 80022b0:	50f4      	str	r4, [r6, r3]
          __HAL_UNLOCK(huart);
 80022b2:	3b0c      	subs	r3, #12
 80022b4:	2200      	movs	r2, #0
 80022b6:	54f2      	strb	r2, [r6, r3]
          return HAL_ERROR;
 80022b8:	2001      	movs	r0, #1
 80022ba:	e000      	b.n	80022be <UART_WaitOnFlagUntilTimeout+0x8e>
  return HAL_OK;
 80022bc:	2000      	movs	r0, #0
}
 80022be:	bcc0      	pop	{r6, r7}
 80022c0:	46b9      	mov	r9, r7
 80022c2:	46b0      	mov	r8, r6
 80022c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80022c6:	2003      	movs	r0, #3
 80022c8:	e7f9      	b.n	80022be <UART_WaitOnFlagUntilTimeout+0x8e>
 80022ca:	2003      	movs	r0, #3
 80022cc:	e7f7      	b.n	80022be <UART_WaitOnFlagUntilTimeout+0x8e>
	...

080022d0 <UART_CheckIdleState>:
{
 80022d0:	b530      	push	{r4, r5, lr}
 80022d2:	b083      	sub	sp, #12
 80022d4:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d6:	2384      	movs	r3, #132	@ 0x84
 80022d8:	2200      	movs	r2, #0
 80022da:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80022dc:	f7fe f956 	bl	800058c <HAL_GetTick>
 80022e0:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	071b      	lsls	r3, r3, #28
 80022e8:	d40f      	bmi.n	800230a <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80022ea:	6823      	ldr	r3, [r4, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	075b      	lsls	r3, r3, #29
 80022f0:	d429      	bmi.n	8002346 <UART_CheckIdleState+0x76>
  huart->gState = HAL_UART_STATE_READY;
 80022f2:	2320      	movs	r3, #32
 80022f4:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80022f6:	2280      	movs	r2, #128	@ 0x80
 80022f8:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022fa:	2300      	movs	r3, #0
 80022fc:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022fe:	6663      	str	r3, [r4, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 8002300:	3a08      	subs	r2, #8
 8002302:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8002304:	2000      	movs	r0, #0
}
 8002306:	b003      	add	sp, #12
 8002308:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800230a:	2180      	movs	r1, #128	@ 0x80
 800230c:	4b22      	ldr	r3, [pc, #136]	@ (8002398 <UART_CheckIdleState+0xc8>)
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	0003      	movs	r3, r0
 8002312:	2200      	movs	r2, #0
 8002314:	0389      	lsls	r1, r1, #14
 8002316:	0020      	movs	r0, r4
 8002318:	f7ff ff8a 	bl	8002230 <UART_WaitOnFlagUntilTimeout>
 800231c:	2800      	cmp	r0, #0
 800231e:	d0e4      	beq.n	80022ea <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002320:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002324:	2301      	movs	r3, #1
 8002326:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800232a:	6822      	ldr	r2, [r4, #0]
 800232c:	6813      	ldr	r3, [r2, #0]
 800232e:	2080      	movs	r0, #128	@ 0x80
 8002330:	4383      	bics	r3, r0
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8002338:	2320      	movs	r3, #32
 800233a:	67e3      	str	r3, [r4, #124]	@ 0x7c
      __HAL_UNLOCK(huart);
 800233c:	3358      	adds	r3, #88	@ 0x58
 800233e:	2200      	movs	r2, #0
 8002340:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8002342:	387d      	subs	r0, #125	@ 0x7d
 8002344:	e7df      	b.n	8002306 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002346:	2180      	movs	r1, #128	@ 0x80
 8002348:	4b13      	ldr	r3, [pc, #76]	@ (8002398 <UART_CheckIdleState+0xc8>)
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	002b      	movs	r3, r5
 800234e:	2200      	movs	r2, #0
 8002350:	03c9      	lsls	r1, r1, #15
 8002352:	0020      	movs	r0, r4
 8002354:	f7ff ff6c 	bl	8002230 <UART_WaitOnFlagUntilTimeout>
 8002358:	2800      	cmp	r0, #0
 800235a:	d0ca      	beq.n	80022f2 <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800235c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002360:	2201      	movs	r2, #1
 8002362:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002366:	6821      	ldr	r1, [r4, #0]
 8002368:	680b      	ldr	r3, [r1, #0]
 800236a:	4d0c      	ldr	r5, [pc, #48]	@ (800239c <UART_CheckIdleState+0xcc>)
 800236c:	402b      	ands	r3, r5
 800236e:	600b      	str	r3, [r1, #0]
 8002370:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002374:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002378:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800237c:	6821      	ldr	r1, [r4, #0]
 800237e:	688b      	ldr	r3, [r1, #8]
 8002380:	4393      	bics	r3, r2
 8002382:	608b      	str	r3, [r1, #8]
 8002384:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8002388:	2380      	movs	r3, #128	@ 0x80
 800238a:	321f      	adds	r2, #31
 800238c:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 800238e:	3b08      	subs	r3, #8
 8002390:	2200      	movs	r2, #0
 8002392:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8002394:	2003      	movs	r0, #3
 8002396:	e7b6      	b.n	8002306 <UART_CheckIdleState+0x36>
 8002398:	01ffffff 	.word	0x01ffffff
 800239c:	fffffedf 	.word	0xfffffedf

080023a0 <HAL_UART_Init>:
{
 80023a0:	b510      	push	{r4, lr}
 80023a2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80023a4:	d02e      	beq.n	8002404 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 80023a6:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d021      	beq.n	80023f0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80023ac:	2324      	movs	r3, #36	@ 0x24
 80023ae:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 80023b0:	6822      	ldr	r2, [r4, #0]
 80023b2:	6813      	ldr	r3, [r2, #0]
 80023b4:	2101      	movs	r1, #1
 80023b6:	438b      	bics	r3, r1
 80023b8:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d11d      	bne.n	80023fc <HAL_UART_Init+0x5c>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023c0:	0020      	movs	r0, r4
 80023c2:	f7ff fe0d 	bl	8001fe0 <UART_SetConfig>
 80023c6:	2801      	cmp	r0, #1
 80023c8:	d011      	beq.n	80023ee <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80023ca:	6822      	ldr	r2, [r4, #0]
 80023cc:	6853      	ldr	r3, [r2, #4]
 80023ce:	490e      	ldr	r1, [pc, #56]	@ (8002408 <HAL_UART_Init+0x68>)
 80023d0:	400b      	ands	r3, r1
 80023d2:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80023d4:	6822      	ldr	r2, [r4, #0]
 80023d6:	6893      	ldr	r3, [r2, #8]
 80023d8:	2108      	movs	r1, #8
 80023da:	438b      	bics	r3, r1
 80023dc:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80023de:	6822      	ldr	r2, [r4, #0]
 80023e0:	6813      	ldr	r3, [r2, #0]
 80023e2:	3907      	subs	r1, #7
 80023e4:	430b      	orrs	r3, r1
 80023e6:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80023e8:	0020      	movs	r0, r4
 80023ea:	f7ff ff71 	bl	80022d0 <UART_CheckIdleState>
}
 80023ee:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80023f0:	3378      	adds	r3, #120	@ 0x78
 80023f2:	2200      	movs	r2, #0
 80023f4:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80023f6:	f7fd ffff 	bl	80003f8 <HAL_UART_MspInit>
 80023fa:	e7d7      	b.n	80023ac <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80023fc:	0020      	movs	r0, r4
 80023fe:	f7ff fea7 	bl	8002150 <UART_AdvFeatureConfig>
 8002402:	e7dd      	b.n	80023c0 <HAL_UART_Init+0x20>
    return HAL_ERROR;
 8002404:	2001      	movs	r0, #1
 8002406:	e7f2      	b.n	80023ee <HAL_UART_Init+0x4e>
 8002408:	fffff7ff 	.word	0xfffff7ff

0800240c <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800240c:	2344      	movs	r3, #68	@ 0x44
 800240e:	2200      	movs	r2, #0
 8002410:	52c2      	strh	r2, [r0, r3]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002412:	3b04      	subs	r3, #4
 8002414:	4a01      	ldr	r2, [pc, #4]	@ (800241c <USB_EnableGlobalInt+0x10>)
 8002416:	52c2      	strh	r2, [r0, r3]

  return HAL_OK;
}
 8002418:	2000      	movs	r0, #0
 800241a:	4770      	bx	lr
 800241c:	ffffbf80 	.word	0xffffbf80

08002420 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002420:	2240      	movs	r2, #64	@ 0x40
 8002422:	5a83      	ldrh	r3, [r0, r2]
 8002424:	4902      	ldr	r1, [pc, #8]	@ (8002430 <USB_DisableGlobalInt+0x10>)
 8002426:	400b      	ands	r3, r1
 8002428:	5283      	strh	r3, [r0, r2]

  return HAL_OK;
}
 800242a:	2000      	movs	r0, #0
 800242c:	4770      	bx	lr
 800242e:	46c0      	nop			@ (mov r8, r8)
 8002430:	0000407f 	.word	0x0000407f

08002434 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002434:	b082      	sub	sp, #8
 8002436:	9100      	str	r1, [sp, #0]
 8002438:	9201      	str	r2, [sp, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800243a:	2240      	movs	r2, #64	@ 0x40
 800243c:	2301      	movs	r3, #1
 800243e:	5283      	strh	r3, [r0, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	5283      	strh	r3, [r0, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002444:	3204      	adds	r2, #4
 8002446:	5283      	strh	r3, [r0, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002448:	320c      	adds	r2, #12
 800244a:	5283      	strh	r3, [r0, r2]

  return HAL_OK;
}
 800244c:	2000      	movs	r0, #0
 800244e:	b002      	add	sp, #8
 8002450:	4770      	bx	lr
	...

08002454 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	0003      	movs	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002458:	780d      	ldrb	r5, [r1, #0]
 800245a:	00ad      	lsls	r5, r5, #2
 800245c:	1945      	adds	r5, r0, r5
 800245e:	882a      	ldrh	r2, [r5, #0]
 8002460:	48b9      	ldr	r0, [pc, #740]	@ (8002748 <USB_ActivateEndpoint+0x2f4>)
 8002462:	4002      	ands	r2, r0

  /* initialize Endpoint */
  switch (ep->type)
 8002464:	78c8      	ldrb	r0, [r1, #3]
 8002466:	2802      	cmp	r0, #2
 8002468:	d057      	beq.n	800251a <USB_ActivateEndpoint+0xc6>
 800246a:	d80a      	bhi.n	8002482 <USB_ActivateEndpoint+0x2e>
 800246c:	2800      	cmp	r0, #0
 800246e:	d011      	beq.n	8002494 <USB_ActivateEndpoint+0x40>
 8002470:	2801      	cmp	r0, #1
 8002472:	d104      	bne.n	800247e <USB_ActivateEndpoint+0x2a>
    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
      break;

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002474:	2080      	movs	r0, #128	@ 0x80
 8002476:	00c0      	lsls	r0, r0, #3
 8002478:	4302      	orrs	r2, r0
  HAL_StatusTypeDef ret = HAL_OK;
 800247a:	2000      	movs	r0, #0
      break;
 800247c:	e00d      	b.n	800249a <USB_ActivateEndpoint+0x46>

    default:
      ret = HAL_ERROR;
 800247e:	2001      	movs	r0, #1
 8002480:	e00b      	b.n	800249a <USB_ActivateEndpoint+0x46>
  switch (ep->type)
 8002482:	2803      	cmp	r0, #3
 8002484:	d104      	bne.n	8002490 <USB_ActivateEndpoint+0x3c>
      wEpRegVal |= USB_EP_INTERRUPT;
 8002486:	20c0      	movs	r0, #192	@ 0xc0
 8002488:	00c0      	lsls	r0, r0, #3
 800248a:	4302      	orrs	r2, r0
  HAL_StatusTypeDef ret = HAL_OK;
 800248c:	2000      	movs	r0, #0
      break;
 800248e:	e004      	b.n	800249a <USB_ActivateEndpoint+0x46>
      ret = HAL_ERROR;
 8002490:	2001      	movs	r0, #1
 8002492:	e002      	b.n	800249a <USB_ActivateEndpoint+0x46>
      wEpRegVal |= USB_EP_CONTROL;
 8002494:	2480      	movs	r4, #128	@ 0x80
 8002496:	00a4      	lsls	r4, r4, #2
 8002498:	4322      	orrs	r2, r4
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800249a:	4cac      	ldr	r4, [pc, #688]	@ (800274c <USB_ActivateEndpoint+0x2f8>)
 800249c:	4322      	orrs	r2, r4
 800249e:	b292      	uxth	r2, r2
 80024a0:	802a      	strh	r2, [r5, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80024a2:	780d      	ldrb	r5, [r1, #0]
 80024a4:	00aa      	lsls	r2, r5, #2
 80024a6:	189a      	adds	r2, r3, r2
 80024a8:	8816      	ldrh	r6, [r2, #0]
 80024aa:	4fa9      	ldr	r7, [pc, #676]	@ (8002750 <USB_ActivateEndpoint+0x2fc>)
 80024ac:	403e      	ands	r6, r7
 80024ae:	4335      	orrs	r5, r6
 80024b0:	432c      	orrs	r4, r5
 80024b2:	b2a4      	uxth	r4, r4
 80024b4:	8014      	strh	r4, [r2, #0]

  if (ep->doublebuffer == 0U)
 80024b6:	7b0a      	ldrb	r2, [r1, #12]
 80024b8:	2a00      	cmp	r2, #0
 80024ba:	d000      	beq.n	80024be <USB_ActivateEndpoint+0x6a>
 80024bc:	e09e      	b.n	80025fc <USB_ActivateEndpoint+0x1a8>
  {
    if (ep->is_in != 0U)
 80024be:	784a      	ldrb	r2, [r1, #1]
 80024c0:	2a00      	cmp	r2, #0
 80024c2:	d037      	beq.n	8002534 <USB_ActivateEndpoint+0xe0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80024c4:	2250      	movs	r2, #80	@ 0x50
 80024c6:	5a9c      	ldrh	r4, [r3, r2]
 80024c8:	191c      	adds	r4, r3, r4
 80024ca:	780a      	ldrb	r2, [r1, #0]
 80024cc:	00d2      	lsls	r2, r2, #3
 80024ce:	1912      	adds	r2, r2, r4
 80024d0:	2480      	movs	r4, #128	@ 0x80
 80024d2:	00e4      	lsls	r4, r4, #3
 80024d4:	46a4      	mov	ip, r4
 80024d6:	4462      	add	r2, ip
 80024d8:	88cc      	ldrh	r4, [r1, #6]
 80024da:	0864      	lsrs	r4, r4, #1
 80024dc:	0064      	lsls	r4, r4, #1
 80024de:	8014      	strh	r4, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80024e0:	780a      	ldrb	r2, [r1, #0]
 80024e2:	0092      	lsls	r2, r2, #2
 80024e4:	189a      	adds	r2, r3, r2
 80024e6:	8814      	ldrh	r4, [r2, #0]
 80024e8:	0664      	lsls	r4, r4, #25
 80024ea:	d505      	bpl.n	80024f8 <USB_ActivateEndpoint+0xa4>
 80024ec:	8815      	ldrh	r5, [r2, #0]
 80024ee:	403d      	ands	r5, r7
 80024f0:	4c98      	ldr	r4, [pc, #608]	@ (8002754 <USB_ActivateEndpoint+0x300>)
 80024f2:	432c      	orrs	r4, r5
 80024f4:	b2a4      	uxth	r4, r4
 80024f6:	8014      	strh	r4, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80024f8:	78ca      	ldrb	r2, [r1, #3]
 80024fa:	2a01      	cmp	r2, #1
 80024fc:	d00f      	beq.n	800251e <USB_ActivateEndpoint+0xca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80024fe:	780a      	ldrb	r2, [r1, #0]
 8002500:	0092      	lsls	r2, r2, #2
 8002502:	189a      	adds	r2, r3, r2
 8002504:	8813      	ldrh	r3, [r2, #0]
 8002506:	4994      	ldr	r1, [pc, #592]	@ (8002758 <USB_ActivateEndpoint+0x304>)
 8002508:	400b      	ands	r3, r1
 800250a:	2120      	movs	r1, #32
 800250c:	404b      	eors	r3, r1
 800250e:	b29b      	uxth	r3, r3
 8002510:	498e      	ldr	r1, [pc, #568]	@ (800274c <USB_ActivateEndpoint+0x2f8>)
 8002512:	430b      	orrs	r3, r1
 8002514:	b29b      	uxth	r3, r3
 8002516:	8013      	strh	r3, [r2, #0]
 8002518:	e0ca      	b.n	80026b0 <USB_ActivateEndpoint+0x25c>
  switch (ep->type)
 800251a:	2000      	movs	r0, #0
 800251c:	e7bd      	b.n	800249a <USB_ActivateEndpoint+0x46>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800251e:	780a      	ldrb	r2, [r1, #0]
 8002520:	0092      	lsls	r2, r2, #2
 8002522:	189b      	adds	r3, r3, r2
 8002524:	8819      	ldrh	r1, [r3, #0]
 8002526:	4a8c      	ldr	r2, [pc, #560]	@ (8002758 <USB_ActivateEndpoint+0x304>)
 8002528:	4011      	ands	r1, r2
 800252a:	4a88      	ldr	r2, [pc, #544]	@ (800274c <USB_ActivateEndpoint+0x2f8>)
 800252c:	430a      	orrs	r2, r1
 800252e:	b292      	uxth	r2, r2
 8002530:	801a      	strh	r2, [r3, #0]
 8002532:	e0bd      	b.n	80026b0 <USB_ActivateEndpoint+0x25c>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002534:	2550      	movs	r5, #80	@ 0x50
 8002536:	5b5c      	ldrh	r4, [r3, r5]
 8002538:	191c      	adds	r4, r3, r4
 800253a:	780a      	ldrb	r2, [r1, #0]
 800253c:	00d2      	lsls	r2, r2, #3
 800253e:	1912      	adds	r2, r2, r4
 8002540:	4c86      	ldr	r4, [pc, #536]	@ (800275c <USB_ActivateEndpoint+0x308>)
 8002542:	46a4      	mov	ip, r4
 8002544:	4462      	add	r2, ip
 8002546:	88cc      	ldrh	r4, [r1, #6]
 8002548:	0864      	lsrs	r4, r4, #1
 800254a:	0064      	lsls	r4, r4, #1
 800254c:	8014      	strh	r4, [r2, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800254e:	5b5c      	ldrh	r4, [r3, r5]
 8002550:	191c      	adds	r4, r3, r4
 8002552:	780a      	ldrb	r2, [r1, #0]
 8002554:	00d2      	lsls	r2, r2, #3
 8002556:	1912      	adds	r2, r2, r4
 8002558:	4c81      	ldr	r4, [pc, #516]	@ (8002760 <USB_ActivateEndpoint+0x30c>)
 800255a:	46a4      	mov	ip, r4
 800255c:	4462      	add	r2, ip
 800255e:	8814      	ldrh	r4, [r2, #0]
 8002560:	05a4      	lsls	r4, r4, #22
 8002562:	0da4      	lsrs	r4, r4, #22
 8002564:	8014      	strh	r4, [r2, #0]
 8002566:	690c      	ldr	r4, [r1, #16]
 8002568:	2c00      	cmp	r4, #0
 800256a:	d121      	bne.n	80025b0 <USB_ActivateEndpoint+0x15c>
 800256c:	8814      	ldrh	r4, [r2, #0]
 800256e:	4d7d      	ldr	r5, [pc, #500]	@ (8002764 <USB_ActivateEndpoint+0x310>)
 8002570:	432c      	orrs	r4, r5
 8002572:	b2a4      	uxth	r4, r4
 8002574:	8014      	strh	r4, [r2, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002576:	780a      	ldrb	r2, [r1, #0]
 8002578:	0092      	lsls	r2, r2, #2
 800257a:	189a      	adds	r2, r3, r2
 800257c:	8814      	ldrh	r4, [r2, #0]
 800257e:	0464      	lsls	r4, r4, #17
 8002580:	d506      	bpl.n	8002590 <USB_ActivateEndpoint+0x13c>
 8002582:	8815      	ldrh	r5, [r2, #0]
 8002584:	4c72      	ldr	r4, [pc, #456]	@ (8002750 <USB_ActivateEndpoint+0x2fc>)
 8002586:	4025      	ands	r5, r4
 8002588:	4c77      	ldr	r4, [pc, #476]	@ (8002768 <USB_ActivateEndpoint+0x314>)
 800258a:	432c      	orrs	r4, r5
 800258c:	b2a4      	uxth	r4, r4
 800258e:	8014      	strh	r4, [r2, #0]

      if (ep->num == 0U)
 8002590:	780a      	ldrb	r2, [r1, #0]
 8002592:	2a00      	cmp	r2, #0
 8002594:	d125      	bne.n	80025e2 <USB_ActivateEndpoint+0x18e>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002596:	0092      	lsls	r2, r2, #2
 8002598:	189a      	adds	r2, r3, r2
 800259a:	8813      	ldrh	r3, [r2, #0]
 800259c:	4973      	ldr	r1, [pc, #460]	@ (800276c <USB_ActivateEndpoint+0x318>)
 800259e:	400b      	ands	r3, r1
 80025a0:	21c0      	movs	r1, #192	@ 0xc0
 80025a2:	0189      	lsls	r1, r1, #6
 80025a4:	4059      	eors	r1, r3
 80025a6:	4b69      	ldr	r3, [pc, #420]	@ (800274c <USB_ActivateEndpoint+0x2f8>)
 80025a8:	430b      	orrs	r3, r1
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	8013      	strh	r3, [r2, #0]
 80025ae:	e07f      	b.n	80026b0 <USB_ActivateEndpoint+0x25c>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80025b0:	2c3e      	cmp	r4, #62	@ 0x3e
 80025b2:	d809      	bhi.n	80025c8 <USB_ActivateEndpoint+0x174>
 80025b4:	0865      	lsrs	r5, r4, #1
 80025b6:	07e4      	lsls	r4, r4, #31
 80025b8:	d500      	bpl.n	80025bc <USB_ActivateEndpoint+0x168>
 80025ba:	3501      	adds	r5, #1
 80025bc:	8814      	ldrh	r4, [r2, #0]
 80025be:	02ad      	lsls	r5, r5, #10
 80025c0:	b2ad      	uxth	r5, r5
 80025c2:	432c      	orrs	r4, r5
 80025c4:	8014      	strh	r4, [r2, #0]
 80025c6:	e7d6      	b.n	8002576 <USB_ActivateEndpoint+0x122>
 80025c8:	0965      	lsrs	r5, r4, #5
 80025ca:	06e4      	lsls	r4, r4, #27
 80025cc:	d100      	bne.n	80025d0 <USB_ActivateEndpoint+0x17c>
 80025ce:	3d01      	subs	r5, #1
 80025d0:	8814      	ldrh	r4, [r2, #0]
 80025d2:	02ad      	lsls	r5, r5, #10
 80025d4:	b2ad      	uxth	r5, r5
 80025d6:	4325      	orrs	r5, r4
 80025d8:	4c62      	ldr	r4, [pc, #392]	@ (8002764 <USB_ActivateEndpoint+0x310>)
 80025da:	432c      	orrs	r4, r5
 80025dc:	b2a4      	uxth	r4, r4
 80025de:	8014      	strh	r4, [r2, #0]
 80025e0:	e7c9      	b.n	8002576 <USB_ActivateEndpoint+0x122>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80025e2:	0092      	lsls	r2, r2, #2
 80025e4:	189a      	adds	r2, r3, r2
 80025e6:	8813      	ldrh	r3, [r2, #0]
 80025e8:	4960      	ldr	r1, [pc, #384]	@ (800276c <USB_ActivateEndpoint+0x318>)
 80025ea:	400b      	ands	r3, r1
 80025ec:	2180      	movs	r1, #128	@ 0x80
 80025ee:	0189      	lsls	r1, r1, #6
 80025f0:	4059      	eors	r1, r3
 80025f2:	4b56      	ldr	r3, [pc, #344]	@ (800274c <USB_ActivateEndpoint+0x2f8>)
 80025f4:	430b      	orrs	r3, r1
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	8013      	strh	r3, [r2, #0]
 80025fa:	e059      	b.n	80026b0 <USB_ActivateEndpoint+0x25c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80025fc:	78ca      	ldrb	r2, [r1, #3]
 80025fe:	2a02      	cmp	r2, #2
 8002600:	d057      	beq.n	80026b2 <USB_ActivateEndpoint+0x25e>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8002602:	780a      	ldrb	r2, [r1, #0]
 8002604:	0092      	lsls	r2, r2, #2
 8002606:	189a      	adds	r2, r3, r2
 8002608:	8815      	ldrh	r5, [r2, #0]
 800260a:	4c59      	ldr	r4, [pc, #356]	@ (8002770 <USB_ActivateEndpoint+0x31c>)
 800260c:	4025      	ands	r5, r4
 800260e:	4c4f      	ldr	r4, [pc, #316]	@ (800274c <USB_ActivateEndpoint+0x2f8>)
 8002610:	432c      	orrs	r4, r5
 8002612:	b2a4      	uxth	r4, r4
 8002614:	8014      	strh	r4, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002616:	2550      	movs	r5, #80	@ 0x50
 8002618:	5b5c      	ldrh	r4, [r3, r5]
 800261a:	191c      	adds	r4, r3, r4
 800261c:	780a      	ldrb	r2, [r1, #0]
 800261e:	00d2      	lsls	r2, r2, #3
 8002620:	1912      	adds	r2, r2, r4
 8002622:	2480      	movs	r4, #128	@ 0x80
 8002624:	00e4      	lsls	r4, r4, #3
 8002626:	46a4      	mov	ip, r4
 8002628:	4462      	add	r2, ip
 800262a:	890c      	ldrh	r4, [r1, #8]
 800262c:	0864      	lsrs	r4, r4, #1
 800262e:	0064      	lsls	r4, r4, #1
 8002630:	8014      	strh	r4, [r2, #0]
 8002632:	5b5c      	ldrh	r4, [r3, r5]
 8002634:	191c      	adds	r4, r3, r4
 8002636:	780a      	ldrb	r2, [r1, #0]
 8002638:	00d2      	lsls	r2, r2, #3
 800263a:	1912      	adds	r2, r2, r4
 800263c:	4c47      	ldr	r4, [pc, #284]	@ (800275c <USB_ActivateEndpoint+0x308>)
 800263e:	46a4      	mov	ip, r4
 8002640:	4462      	add	r2, ip
 8002642:	894c      	ldrh	r4, [r1, #10]
 8002644:	0864      	lsrs	r4, r4, #1
 8002646:	0064      	lsls	r4, r4, #1
 8002648:	8014      	strh	r4, [r2, #0]

    if (ep->is_in == 0U)
 800264a:	784a      	ldrb	r2, [r1, #1]
 800264c:	2a00      	cmp	r2, #0
 800264e:	d13b      	bne.n	80026c8 <USB_ActivateEndpoint+0x274>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002650:	780a      	ldrb	r2, [r1, #0]
 8002652:	0092      	lsls	r2, r2, #2
 8002654:	189a      	adds	r2, r3, r2
 8002656:	8814      	ldrh	r4, [r2, #0]
 8002658:	0464      	lsls	r4, r4, #17
 800265a:	d506      	bpl.n	800266a <USB_ActivateEndpoint+0x216>
 800265c:	8815      	ldrh	r5, [r2, #0]
 800265e:	4c3c      	ldr	r4, [pc, #240]	@ (8002750 <USB_ActivateEndpoint+0x2fc>)
 8002660:	4025      	ands	r5, r4
 8002662:	4c41      	ldr	r4, [pc, #260]	@ (8002768 <USB_ActivateEndpoint+0x314>)
 8002664:	432c      	orrs	r4, r5
 8002666:	b2a4      	uxth	r4, r4
 8002668:	8014      	strh	r4, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800266a:	780a      	ldrb	r2, [r1, #0]
 800266c:	0092      	lsls	r2, r2, #2
 800266e:	189a      	adds	r2, r3, r2
 8002670:	8814      	ldrh	r4, [r2, #0]
 8002672:	0664      	lsls	r4, r4, #25
 8002674:	d506      	bpl.n	8002684 <USB_ActivateEndpoint+0x230>
 8002676:	8815      	ldrh	r5, [r2, #0]
 8002678:	4c35      	ldr	r4, [pc, #212]	@ (8002750 <USB_ActivateEndpoint+0x2fc>)
 800267a:	4025      	ands	r5, r4
 800267c:	4c35      	ldr	r4, [pc, #212]	@ (8002754 <USB_ActivateEndpoint+0x300>)
 800267e:	432c      	orrs	r4, r5
 8002680:	b2a4      	uxth	r4, r4
 8002682:	8014      	strh	r4, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002684:	780c      	ldrb	r4, [r1, #0]
 8002686:	00a4      	lsls	r4, r4, #2
 8002688:	191c      	adds	r4, r3, r4
 800268a:	8825      	ldrh	r5, [r4, #0]
 800268c:	4a37      	ldr	r2, [pc, #220]	@ (800276c <USB_ActivateEndpoint+0x318>)
 800268e:	4015      	ands	r5, r2
 8002690:	22c0      	movs	r2, #192	@ 0xc0
 8002692:	0192      	lsls	r2, r2, #6
 8002694:	406a      	eors	r2, r5
 8002696:	4d2d      	ldr	r5, [pc, #180]	@ (800274c <USB_ActivateEndpoint+0x2f8>)
 8002698:	432a      	orrs	r2, r5
 800269a:	b292      	uxth	r2, r2
 800269c:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800269e:	780a      	ldrb	r2, [r1, #0]
 80026a0:	0092      	lsls	r2, r2, #2
 80026a2:	189b      	adds	r3, r3, r2
 80026a4:	881a      	ldrh	r2, [r3, #0]
 80026a6:	492c      	ldr	r1, [pc, #176]	@ (8002758 <USB_ActivateEndpoint+0x304>)
 80026a8:	400a      	ands	r2, r1
 80026aa:	432a      	orrs	r2, r5
 80026ac:	b292      	uxth	r2, r2
 80026ae:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 80026b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80026b2:	780a      	ldrb	r2, [r1, #0]
 80026b4:	0092      	lsls	r2, r2, #2
 80026b6:	189a      	adds	r2, r3, r2
 80026b8:	8815      	ldrh	r5, [r2, #0]
 80026ba:	4c25      	ldr	r4, [pc, #148]	@ (8002750 <USB_ActivateEndpoint+0x2fc>)
 80026bc:	4025      	ands	r5, r4
 80026be:	4c2d      	ldr	r4, [pc, #180]	@ (8002774 <USB_ActivateEndpoint+0x320>)
 80026c0:	432c      	orrs	r4, r5
 80026c2:	b2a4      	uxth	r4, r4
 80026c4:	8014      	strh	r4, [r2, #0]
 80026c6:	e7a6      	b.n	8002616 <USB_ActivateEndpoint+0x1c2>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80026c8:	780a      	ldrb	r2, [r1, #0]
 80026ca:	0092      	lsls	r2, r2, #2
 80026cc:	189a      	adds	r2, r3, r2
 80026ce:	8814      	ldrh	r4, [r2, #0]
 80026d0:	0464      	lsls	r4, r4, #17
 80026d2:	d506      	bpl.n	80026e2 <USB_ActivateEndpoint+0x28e>
 80026d4:	8815      	ldrh	r5, [r2, #0]
 80026d6:	4c1e      	ldr	r4, [pc, #120]	@ (8002750 <USB_ActivateEndpoint+0x2fc>)
 80026d8:	4025      	ands	r5, r4
 80026da:	4c23      	ldr	r4, [pc, #140]	@ (8002768 <USB_ActivateEndpoint+0x314>)
 80026dc:	432c      	orrs	r4, r5
 80026de:	b2a4      	uxth	r4, r4
 80026e0:	8014      	strh	r4, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80026e2:	780a      	ldrb	r2, [r1, #0]
 80026e4:	0092      	lsls	r2, r2, #2
 80026e6:	189a      	adds	r2, r3, r2
 80026e8:	8814      	ldrh	r4, [r2, #0]
 80026ea:	0664      	lsls	r4, r4, #25
 80026ec:	d506      	bpl.n	80026fc <USB_ActivateEndpoint+0x2a8>
 80026ee:	8815      	ldrh	r5, [r2, #0]
 80026f0:	4c17      	ldr	r4, [pc, #92]	@ (8002750 <USB_ActivateEndpoint+0x2fc>)
 80026f2:	4025      	ands	r5, r4
 80026f4:	4c17      	ldr	r4, [pc, #92]	@ (8002754 <USB_ActivateEndpoint+0x300>)
 80026f6:	432c      	orrs	r4, r5
 80026f8:	b2a4      	uxth	r4, r4
 80026fa:	8014      	strh	r4, [r2, #0]
      if (ep->type != EP_TYPE_ISOC)
 80026fc:	78ca      	ldrb	r2, [r1, #3]
 80026fe:	2a01      	cmp	r2, #1
 8002700:	d017      	beq.n	8002732 <USB_ActivateEndpoint+0x2de>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002702:	780c      	ldrb	r4, [r1, #0]
 8002704:	00a4      	lsls	r4, r4, #2
 8002706:	191c      	adds	r4, r3, r4
 8002708:	8822      	ldrh	r2, [r4, #0]
 800270a:	4d13      	ldr	r5, [pc, #76]	@ (8002758 <USB_ActivateEndpoint+0x304>)
 800270c:	402a      	ands	r2, r5
 800270e:	2520      	movs	r5, #32
 8002710:	406a      	eors	r2, r5
 8002712:	b292      	uxth	r2, r2
 8002714:	4d0d      	ldr	r5, [pc, #52]	@ (800274c <USB_ActivateEndpoint+0x2f8>)
 8002716:	432a      	orrs	r2, r5
 8002718:	b292      	uxth	r2, r2
 800271a:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800271c:	780a      	ldrb	r2, [r1, #0]
 800271e:	0092      	lsls	r2, r2, #2
 8002720:	189b      	adds	r3, r3, r2
 8002722:	8819      	ldrh	r1, [r3, #0]
 8002724:	4a11      	ldr	r2, [pc, #68]	@ (800276c <USB_ActivateEndpoint+0x318>)
 8002726:	4011      	ands	r1, r2
 8002728:	4a08      	ldr	r2, [pc, #32]	@ (800274c <USB_ActivateEndpoint+0x2f8>)
 800272a:	430a      	orrs	r2, r1
 800272c:	b292      	uxth	r2, r2
 800272e:	801a      	strh	r2, [r3, #0]
 8002730:	e7be      	b.n	80026b0 <USB_ActivateEndpoint+0x25c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002732:	780a      	ldrb	r2, [r1, #0]
 8002734:	0092      	lsls	r2, r2, #2
 8002736:	189a      	adds	r2, r3, r2
 8002738:	8815      	ldrh	r5, [r2, #0]
 800273a:	4c07      	ldr	r4, [pc, #28]	@ (8002758 <USB_ActivateEndpoint+0x304>)
 800273c:	4025      	ands	r5, r4
 800273e:	4c03      	ldr	r4, [pc, #12]	@ (800274c <USB_ActivateEndpoint+0x2f8>)
 8002740:	432c      	orrs	r4, r5
 8002742:	b2a4      	uxth	r4, r4
 8002744:	8014      	strh	r4, [r2, #0]
 8002746:	e7e9      	b.n	800271c <USB_ActivateEndpoint+0x2c8>
 8002748:	ffff898f 	.word	0xffff898f
 800274c:	ffff8080 	.word	0xffff8080
 8002750:	ffff8f8f 	.word	0xffff8f8f
 8002754:	ffff80c0 	.word	0xffff80c0
 8002758:	ffff8fbf 	.word	0xffff8fbf
 800275c:	00000404 	.word	0x00000404
 8002760:	00000406 	.word	0x00000406
 8002764:	ffff8000 	.word	0xffff8000
 8002768:	ffffc080 	.word	0xffffc080
 800276c:	ffffbf8f 	.word	0xffffbf8f
 8002770:	ffff8e8f 	.word	0xffff8e8f
 8002774:	ffff8180 	.word	0xffff8180

08002778 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002778:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 800277a:	7b0b      	ldrb	r3, [r1, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d133      	bne.n	80027e8 <USB_DeactivateEndpoint+0x70>
  {
    if (ep->is_in != 0U)
 8002780:	784b      	ldrb	r3, [r1, #1]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d018      	beq.n	80027b8 <USB_DeactivateEndpoint+0x40>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002786:	780b      	ldrb	r3, [r1, #0]
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	18c3      	adds	r3, r0, r3
 800278c:	881a      	ldrh	r2, [r3, #0]
 800278e:	0652      	lsls	r2, r2, #25
 8002790:	d506      	bpl.n	80027a0 <USB_DeactivateEndpoint+0x28>
 8002792:	881c      	ldrh	r4, [r3, #0]
 8002794:	4a4e      	ldr	r2, [pc, #312]	@ (80028d0 <USB_DeactivateEndpoint+0x158>)
 8002796:	4014      	ands	r4, r2
 8002798:	4a4e      	ldr	r2, [pc, #312]	@ (80028d4 <USB_DeactivateEndpoint+0x15c>)
 800279a:	4322      	orrs	r2, r4
 800279c:	b292      	uxth	r2, r2
 800279e:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80027a0:	780b      	ldrb	r3, [r1, #0]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	18c3      	adds	r3, r0, r3
 80027a6:	8819      	ldrh	r1, [r3, #0]
 80027a8:	4a4b      	ldr	r2, [pc, #300]	@ (80028d8 <USB_DeactivateEndpoint+0x160>)
 80027aa:	4011      	ands	r1, r2
 80027ac:	4a4b      	ldr	r2, [pc, #300]	@ (80028dc <USB_DeactivateEndpoint+0x164>)
 80027ae:	430a      	orrs	r2, r1
 80027b0:	b292      	uxth	r2, r2
 80027b2:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80027b4:	2000      	movs	r0, #0
 80027b6:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80027b8:	780b      	ldrb	r3, [r1, #0]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	18c3      	adds	r3, r0, r3
 80027be:	881a      	ldrh	r2, [r3, #0]
 80027c0:	0452      	lsls	r2, r2, #17
 80027c2:	d506      	bpl.n	80027d2 <USB_DeactivateEndpoint+0x5a>
 80027c4:	881c      	ldrh	r4, [r3, #0]
 80027c6:	4a42      	ldr	r2, [pc, #264]	@ (80028d0 <USB_DeactivateEndpoint+0x158>)
 80027c8:	4014      	ands	r4, r2
 80027ca:	4a45      	ldr	r2, [pc, #276]	@ (80028e0 <USB_DeactivateEndpoint+0x168>)
 80027cc:	4322      	orrs	r2, r4
 80027ce:	b292      	uxth	r2, r2
 80027d0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80027d2:	780b      	ldrb	r3, [r1, #0]
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	18c3      	adds	r3, r0, r3
 80027d8:	8819      	ldrh	r1, [r3, #0]
 80027da:	4a42      	ldr	r2, [pc, #264]	@ (80028e4 <USB_DeactivateEndpoint+0x16c>)
 80027dc:	4011      	ands	r1, r2
 80027de:	4a3f      	ldr	r2, [pc, #252]	@ (80028dc <USB_DeactivateEndpoint+0x164>)
 80027e0:	430a      	orrs	r2, r1
 80027e2:	b292      	uxth	r2, r2
 80027e4:	801a      	strh	r2, [r3, #0]
 80027e6:	e7e5      	b.n	80027b4 <USB_DeactivateEndpoint+0x3c>
    if (ep->is_in == 0U)
 80027e8:	784b      	ldrb	r3, [r1, #1]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d137      	bne.n	800285e <USB_DeactivateEndpoint+0xe6>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80027ee:	780b      	ldrb	r3, [r1, #0]
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	18c3      	adds	r3, r0, r3
 80027f4:	881a      	ldrh	r2, [r3, #0]
 80027f6:	0452      	lsls	r2, r2, #17
 80027f8:	d506      	bpl.n	8002808 <USB_DeactivateEndpoint+0x90>
 80027fa:	881c      	ldrh	r4, [r3, #0]
 80027fc:	4a34      	ldr	r2, [pc, #208]	@ (80028d0 <USB_DeactivateEndpoint+0x158>)
 80027fe:	4014      	ands	r4, r2
 8002800:	4a37      	ldr	r2, [pc, #220]	@ (80028e0 <USB_DeactivateEndpoint+0x168>)
 8002802:	4322      	orrs	r2, r4
 8002804:	b292      	uxth	r2, r2
 8002806:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002808:	780b      	ldrb	r3, [r1, #0]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	18c3      	adds	r3, r0, r3
 800280e:	881a      	ldrh	r2, [r3, #0]
 8002810:	0652      	lsls	r2, r2, #25
 8002812:	d506      	bpl.n	8002822 <USB_DeactivateEndpoint+0xaa>
 8002814:	881c      	ldrh	r4, [r3, #0]
 8002816:	4a2e      	ldr	r2, [pc, #184]	@ (80028d0 <USB_DeactivateEndpoint+0x158>)
 8002818:	4014      	ands	r4, r2
 800281a:	4a2e      	ldr	r2, [pc, #184]	@ (80028d4 <USB_DeactivateEndpoint+0x15c>)
 800281c:	4322      	orrs	r2, r4
 800281e:	b292      	uxth	r2, r2
 8002820:	801a      	strh	r2, [r3, #0]
      PCD_TX_DTOG(USBx, ep->num);
 8002822:	780b      	ldrb	r3, [r1, #0]
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	18c3      	adds	r3, r0, r3
 8002828:	881c      	ldrh	r4, [r3, #0]
 800282a:	4a29      	ldr	r2, [pc, #164]	@ (80028d0 <USB_DeactivateEndpoint+0x158>)
 800282c:	4014      	ands	r4, r2
 800282e:	4a29      	ldr	r2, [pc, #164]	@ (80028d4 <USB_DeactivateEndpoint+0x15c>)
 8002830:	4322      	orrs	r2, r4
 8002832:	b292      	uxth	r2, r2
 8002834:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002836:	780c      	ldrb	r4, [r1, #0]
 8002838:	00a4      	lsls	r4, r4, #2
 800283a:	1904      	adds	r4, r0, r4
 800283c:	8823      	ldrh	r3, [r4, #0]
 800283e:	4a29      	ldr	r2, [pc, #164]	@ (80028e4 <USB_DeactivateEndpoint+0x16c>)
 8002840:	4013      	ands	r3, r2
 8002842:	4a26      	ldr	r2, [pc, #152]	@ (80028dc <USB_DeactivateEndpoint+0x164>)
 8002844:	4313      	orrs	r3, r2
 8002846:	b29b      	uxth	r3, r3
 8002848:	8023      	strh	r3, [r4, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800284a:	780b      	ldrb	r3, [r1, #0]
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	18c3      	adds	r3, r0, r3
 8002850:	8819      	ldrh	r1, [r3, #0]
 8002852:	4821      	ldr	r0, [pc, #132]	@ (80028d8 <USB_DeactivateEndpoint+0x160>)
 8002854:	4001      	ands	r1, r0
 8002856:	430a      	orrs	r2, r1
 8002858:	b292      	uxth	r2, r2
 800285a:	801a      	strh	r2, [r3, #0]
 800285c:	e7aa      	b.n	80027b4 <USB_DeactivateEndpoint+0x3c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800285e:	780b      	ldrb	r3, [r1, #0]
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	18c3      	adds	r3, r0, r3
 8002864:	881a      	ldrh	r2, [r3, #0]
 8002866:	0452      	lsls	r2, r2, #17
 8002868:	d506      	bpl.n	8002878 <USB_DeactivateEndpoint+0x100>
 800286a:	881c      	ldrh	r4, [r3, #0]
 800286c:	4a18      	ldr	r2, [pc, #96]	@ (80028d0 <USB_DeactivateEndpoint+0x158>)
 800286e:	4014      	ands	r4, r2
 8002870:	4a1b      	ldr	r2, [pc, #108]	@ (80028e0 <USB_DeactivateEndpoint+0x168>)
 8002872:	4322      	orrs	r2, r4
 8002874:	b292      	uxth	r2, r2
 8002876:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002878:	780b      	ldrb	r3, [r1, #0]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	18c3      	adds	r3, r0, r3
 800287e:	881a      	ldrh	r2, [r3, #0]
 8002880:	0652      	lsls	r2, r2, #25
 8002882:	d506      	bpl.n	8002892 <USB_DeactivateEndpoint+0x11a>
 8002884:	881c      	ldrh	r4, [r3, #0]
 8002886:	4a12      	ldr	r2, [pc, #72]	@ (80028d0 <USB_DeactivateEndpoint+0x158>)
 8002888:	4014      	ands	r4, r2
 800288a:	4a12      	ldr	r2, [pc, #72]	@ (80028d4 <USB_DeactivateEndpoint+0x15c>)
 800288c:	4322      	orrs	r2, r4
 800288e:	b292      	uxth	r2, r2
 8002890:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002892:	780b      	ldrb	r3, [r1, #0]
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	18c3      	adds	r3, r0, r3
 8002898:	881c      	ldrh	r4, [r3, #0]
 800289a:	4a0d      	ldr	r2, [pc, #52]	@ (80028d0 <USB_DeactivateEndpoint+0x158>)
 800289c:	4014      	ands	r4, r2
 800289e:	4a10      	ldr	r2, [pc, #64]	@ (80028e0 <USB_DeactivateEndpoint+0x168>)
 80028a0:	4322      	orrs	r2, r4
 80028a2:	b292      	uxth	r2, r2
 80028a4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80028a6:	780c      	ldrb	r4, [r1, #0]
 80028a8:	00a4      	lsls	r4, r4, #2
 80028aa:	1904      	adds	r4, r0, r4
 80028ac:	8823      	ldrh	r3, [r4, #0]
 80028ae:	4a0a      	ldr	r2, [pc, #40]	@ (80028d8 <USB_DeactivateEndpoint+0x160>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	4a0a      	ldr	r2, [pc, #40]	@ (80028dc <USB_DeactivateEndpoint+0x164>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	8023      	strh	r3, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80028ba:	780b      	ldrb	r3, [r1, #0]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	18c0      	adds	r0, r0, r3
 80028c0:	8803      	ldrh	r3, [r0, #0]
 80028c2:	4908      	ldr	r1, [pc, #32]	@ (80028e4 <USB_DeactivateEndpoint+0x16c>)
 80028c4:	400b      	ands	r3, r1
 80028c6:	431a      	orrs	r2, r3
 80028c8:	b292      	uxth	r2, r2
 80028ca:	8002      	strh	r2, [r0, #0]
 80028cc:	e772      	b.n	80027b4 <USB_DeactivateEndpoint+0x3c>
 80028ce:	46c0      	nop			@ (mov r8, r8)
 80028d0:	ffff8f8f 	.word	0xffff8f8f
 80028d4:	ffff80c0 	.word	0xffff80c0
 80028d8:	ffff8fbf 	.word	0xffff8fbf
 80028dc:	ffff8080 	.word	0xffff8080
 80028e0:	ffffc080 	.word	0xffffc080
 80028e4:	ffffbf8f 	.word	0xffffbf8f

080028e8 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80028e8:	784b      	ldrb	r3, [r1, #1]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00e      	beq.n	800290c <USB_EPSetStall+0x24>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80028ee:	780b      	ldrb	r3, [r1, #0]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	18c0      	adds	r0, r0, r3
 80028f4:	8803      	ldrh	r3, [r0, #0]
 80028f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002928 <USB_EPSetStall+0x40>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	2210      	movs	r2, #16
 80028fc:	4053      	eors	r3, r2
 80028fe:	b29b      	uxth	r3, r3
 8002900:	4a0a      	ldr	r2, [pc, #40]	@ (800292c <USB_EPSetStall+0x44>)
 8002902:	4313      	orrs	r3, r2
 8002904:	b29b      	uxth	r3, r3
 8002906:	8003      	strh	r3, [r0, #0]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8002908:	2000      	movs	r0, #0
 800290a:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800290c:	780b      	ldrb	r3, [r1, #0]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	18c0      	adds	r0, r0, r3
 8002912:	8803      	ldrh	r3, [r0, #0]
 8002914:	4a06      	ldr	r2, [pc, #24]	@ (8002930 <USB_EPSetStall+0x48>)
 8002916:	4013      	ands	r3, r2
 8002918:	2280      	movs	r2, #128	@ 0x80
 800291a:	0152      	lsls	r2, r2, #5
 800291c:	405a      	eors	r2, r3
 800291e:	4b03      	ldr	r3, [pc, #12]	@ (800292c <USB_EPSetStall+0x44>)
 8002920:	4313      	orrs	r3, r2
 8002922:	b29b      	uxth	r3, r3
 8002924:	8003      	strh	r3, [r0, #0]
 8002926:	e7ef      	b.n	8002908 <USB_EPSetStall+0x20>
 8002928:	ffff8fbf 	.word	0xffff8fbf
 800292c:	ffff8080 	.word	0xffff8080
 8002930:	ffffbf8f 	.word	0xffffbf8f

08002934 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002934:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 8002936:	7b0b      	ldrb	r3, [r1, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d13a      	bne.n	80029b2 <USB_EPClearStall+0x7e>
  {
    if (ep->is_in != 0U)
 800293c:	784b      	ldrb	r3, [r1, #1]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d01d      	beq.n	800297e <USB_EPClearStall+0x4a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002942:	780b      	ldrb	r3, [r1, #0]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	18c3      	adds	r3, r0, r3
 8002948:	881a      	ldrh	r2, [r3, #0]
 800294a:	0652      	lsls	r2, r2, #25
 800294c:	d506      	bpl.n	800295c <USB_EPClearStall+0x28>
 800294e:	881c      	ldrh	r4, [r3, #0]
 8002950:	4a19      	ldr	r2, [pc, #100]	@ (80029b8 <USB_EPClearStall+0x84>)
 8002952:	4014      	ands	r4, r2
 8002954:	4a19      	ldr	r2, [pc, #100]	@ (80029bc <USB_EPClearStall+0x88>)
 8002956:	4322      	orrs	r2, r4
 8002958:	b292      	uxth	r2, r2
 800295a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800295c:	78cb      	ldrb	r3, [r1, #3]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d027      	beq.n	80029b2 <USB_EPClearStall+0x7e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002962:	780a      	ldrb	r2, [r1, #0]
 8002964:	0092      	lsls	r2, r2, #2
 8002966:	1882      	adds	r2, r0, r2
 8002968:	8813      	ldrh	r3, [r2, #0]
 800296a:	4915      	ldr	r1, [pc, #84]	@ (80029c0 <USB_EPClearStall+0x8c>)
 800296c:	400b      	ands	r3, r1
 800296e:	2120      	movs	r1, #32
 8002970:	404b      	eors	r3, r1
 8002972:	b29b      	uxth	r3, r3
 8002974:	4913      	ldr	r1, [pc, #76]	@ (80029c4 <USB_EPClearStall+0x90>)
 8002976:	430b      	orrs	r3, r1
 8002978:	b29b      	uxth	r3, r3
 800297a:	8013      	strh	r3, [r2, #0]
 800297c:	e019      	b.n	80029b2 <USB_EPClearStall+0x7e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800297e:	780b      	ldrb	r3, [r1, #0]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	18c3      	adds	r3, r0, r3
 8002984:	881a      	ldrh	r2, [r3, #0]
 8002986:	0452      	lsls	r2, r2, #17
 8002988:	d506      	bpl.n	8002998 <USB_EPClearStall+0x64>
 800298a:	881c      	ldrh	r4, [r3, #0]
 800298c:	4a0a      	ldr	r2, [pc, #40]	@ (80029b8 <USB_EPClearStall+0x84>)
 800298e:	4014      	ands	r4, r2
 8002990:	4a0d      	ldr	r2, [pc, #52]	@ (80029c8 <USB_EPClearStall+0x94>)
 8002992:	4322      	orrs	r2, r4
 8002994:	b292      	uxth	r2, r2
 8002996:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002998:	780b      	ldrb	r3, [r1, #0]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	18c0      	adds	r0, r0, r3
 800299e:	8803      	ldrh	r3, [r0, #0]
 80029a0:	4a0a      	ldr	r2, [pc, #40]	@ (80029cc <USB_EPClearStall+0x98>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	22c0      	movs	r2, #192	@ 0xc0
 80029a6:	0192      	lsls	r2, r2, #6
 80029a8:	405a      	eors	r2, r3
 80029aa:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <USB_EPClearStall+0x90>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	8003      	strh	r3, [r0, #0]
    }
  }

  return HAL_OK;
}
 80029b2:	2000      	movs	r0, #0
 80029b4:	bd10      	pop	{r4, pc}
 80029b6:	46c0      	nop			@ (mov r8, r8)
 80029b8:	ffff8f8f 	.word	0xffff8f8f
 80029bc:	ffff80c0 	.word	0xffff80c0
 80029c0:	ffff8fbf 	.word	0xffff8fbf
 80029c4:	ffff8080 	.word	0xffff8080
 80029c8:	ffffc080 	.word	0xffffc080
 80029cc:	ffffbf8f 	.word	0xffffbf8f

080029d0 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80029d0:	2900      	cmp	r1, #0
 80029d2:	d102      	bne.n	80029da <USB_SetDevAddress+0xa>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80029d4:	234c      	movs	r3, #76	@ 0x4c
 80029d6:	2280      	movs	r2, #128	@ 0x80
 80029d8:	52c2      	strh	r2, [r0, r3]
  }

  return HAL_OK;
}
 80029da:	2000      	movs	r0, #0
 80029dc:	4770      	bx	lr
	...

080029e0 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80029e0:	2258      	movs	r2, #88	@ 0x58
 80029e2:	5a83      	ldrh	r3, [r0, r2]
 80029e4:	4902      	ldr	r1, [pc, #8]	@ (80029f0 <USB_DevConnect+0x10>)
 80029e6:	430b      	orrs	r3, r1
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	5283      	strh	r3, [r0, r2]

  return HAL_OK;
}
 80029ec:	2000      	movs	r0, #0
 80029ee:	4770      	bx	lr
 80029f0:	ffff8000 	.word	0xffff8000

080029f4 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80029f4:	2344      	movs	r3, #68	@ 0x44
 80029f6:	5ac0      	ldrh	r0, [r0, r3]
 80029f8:	b280      	uxth	r0, r0
  return tmpreg;
}
 80029fa:	4770      	bx	lr

080029fc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80029fc:	b510      	push	{r4, lr}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80029fe:	3301      	adds	r3, #1
 8002a00:	085b      	lsrs	r3, r3, #1
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002a02:	1812      	adds	r2, r2, r0
 8002a04:	2080      	movs	r0, #128	@ 0x80
 8002a06:	00c0      	lsls	r0, r0, #3
 8002a08:	4684      	mov	ip, r0
 8002a0a:	4462      	add	r2, ip

  for (count = n; count != 0U; count--)
 8002a0c:	e007      	b.n	8002a1e <USB_WritePMA+0x22>
  {
    WrVal = pBuf[0];
 8002a0e:	780c      	ldrb	r4, [r1, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8002a10:	7848      	ldrb	r0, [r1, #1]
 8002a12:	0200      	lsls	r0, r0, #8
 8002a14:	4320      	orrs	r0, r4
    *pdwVal = (WrVal & 0xFFFFU);
 8002a16:	8010      	strh	r0, [r2, #0]
    pdwVal++;
 8002a18:	3202      	adds	r2, #2
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
 8002a1a:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f5      	bne.n	8002a0e <USB_WritePMA+0x12>
  }
}
 8002a22:	bd10      	pop	{r4, pc}

08002a24 <USB_EPStartXfer>:
{
 8002a24:	b570      	push	{r4, r5, r6, lr}
 8002a26:	0005      	movs	r5, r0
 8002a28:	000c      	movs	r4, r1
  if (ep->is_in == 1U)
 8002a2a:	784b      	ldrb	r3, [r1, #1]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d02e      	beq.n	8002a8e <USB_EPStartXfer+0x6a>
    if (ep->doublebuffer == 0U)
 8002a30:	7b0a      	ldrb	r2, [r1, #12]
 8002a32:	2a00      	cmp	r2, #0
 8002a34:	d000      	beq.n	8002a38 <USB_EPStartXfer+0x14>
 8002a36:	e26e      	b.n	8002f16 <USB_EPStartXfer+0x4f2>
      if (ep->xfer_len > ep->maxpacket)
 8002a38:	698b      	ldr	r3, [r1, #24]
 8002a3a:	6909      	ldr	r1, [r1, #16]
 8002a3c:	428b      	cmp	r3, r1
 8002a3e:	d800      	bhi.n	8002a42 <USB_EPStartXfer+0x1e>
 8002a40:	e24c      	b.n	8002edc <USB_EPStartXfer+0x4b8>
        ep->xfer_len -= len;
 8002a42:	1a5b      	subs	r3, r3, r1
 8002a44:	61a3      	str	r3, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002a46:	2350      	movs	r3, #80	@ 0x50
 8002a48:	5aea      	ldrh	r2, [r5, r3]
 8002a4a:	18aa      	adds	r2, r5, r2
 8002a4c:	7823      	ldrb	r3, [r4, #0]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	189b      	adds	r3, r3, r2
 8002a52:	4ab9      	ldr	r2, [pc, #740]	@ (8002d38 <USB_EPStartXfer+0x314>)
 8002a54:	4694      	mov	ip, r2
 8002a56:	4463      	add	r3, ip
 8002a58:	881a      	ldrh	r2, [r3, #0]
 8002a5a:	0592      	lsls	r2, r2, #22
 8002a5c:	0d92      	lsrs	r2, r2, #22
 8002a5e:	801a      	strh	r2, [r3, #0]
 8002a60:	2900      	cmp	r1, #0
 8002a62:	d000      	beq.n	8002a66 <USB_EPStartXfer+0x42>
 8002a64:	e23e      	b.n	8002ee4 <USB_EPStartXfer+0x4c0>
 8002a66:	881a      	ldrh	r2, [r3, #0]
 8002a68:	49b4      	ldr	r1, [pc, #720]	@ (8002d3c <USB_EPStartXfer+0x318>)
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	b292      	uxth	r2, r2
 8002a6e:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002a70:	7823      	ldrb	r3, [r4, #0]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	18ed      	adds	r5, r5, r3
 8002a76:	882b      	ldrh	r3, [r5, #0]
 8002a78:	4ab1      	ldr	r2, [pc, #708]	@ (8002d40 <USB_EPStartXfer+0x31c>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	22c0      	movs	r2, #192	@ 0xc0
 8002a7e:	0192      	lsls	r2, r2, #6
 8002a80:	405a      	eors	r2, r3
 8002a82:	4bb0      	ldr	r3, [pc, #704]	@ (8002d44 <USB_EPStartXfer+0x320>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	802b      	strh	r3, [r5, #0]
  return HAL_OK;
 8002a8a:	2000      	movs	r0, #0
}
 8002a8c:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 8002a8e:	698e      	ldr	r6, [r1, #24]
 8002a90:	690a      	ldr	r2, [r1, #16]
 8002a92:	4296      	cmp	r6, r2
 8002a94:	d900      	bls.n	8002a98 <USB_EPStartXfer+0x74>
      len = ep->maxpacket;
 8002a96:	0016      	movs	r6, r2
    if (ep->doublebuffer == 0U)
 8002a98:	7b21      	ldrb	r1, [r4, #12]
 8002a9a:	2900      	cmp	r1, #0
 8002a9c:	d024      	beq.n	8002ae8 <USB_EPStartXfer+0xc4>
      if (ep->type == EP_TYPE_BULK)
 8002a9e:	78e1      	ldrb	r1, [r4, #3]
 8002aa0:	2902      	cmp	r1, #2
 8002aa2:	d041      	beq.n	8002b28 <USB_EPStartXfer+0x104>
        ep->xfer_len_db -= len;
 8002aa4:	6a22      	ldr	r2, [r4, #32]
 8002aa6:	1b92      	subs	r2, r2, r6
 8002aa8:	6222      	str	r2, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002aaa:	7822      	ldrb	r2, [r4, #0]
 8002aac:	0091      	lsls	r1, r2, #2
 8002aae:	1869      	adds	r1, r5, r1
 8002ab0:	8809      	ldrh	r1, [r1, #0]
 8002ab2:	0649      	lsls	r1, r1, #25
 8002ab4:	d400      	bmi.n	8002ab8 <USB_EPStartXfer+0x94>
 8002ab6:	e1d1      	b.n	8002e5c <USB_EPStartXfer+0x438>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d000      	beq.n	8002abe <USB_EPStartXfer+0x9a>
 8002abc:	e1bd      	b.n	8002e3a <USB_EPStartXfer+0x416>
 8002abe:	3350      	adds	r3, #80	@ 0x50
 8002ac0:	5aeb      	ldrh	r3, [r5, r3]
 8002ac2:	18eb      	adds	r3, r5, r3
 8002ac4:	00d2      	lsls	r2, r2, #3
 8002ac6:	18d2      	adds	r2, r2, r3
 8002ac8:	4b9b      	ldr	r3, [pc, #620]	@ (8002d38 <USB_EPStartXfer+0x314>)
 8002aca:	469c      	mov	ip, r3
 8002acc:	4462      	add	r2, ip
 8002ace:	8813      	ldrh	r3, [r2, #0]
 8002ad0:	059b      	lsls	r3, r3, #22
 8002ad2:	0d9b      	lsrs	r3, r3, #22
 8002ad4:	8013      	strh	r3, [r2, #0]
 8002ad6:	2e00      	cmp	r6, #0
 8002ad8:	d000      	beq.n	8002adc <USB_EPStartXfer+0xb8>
 8002ada:	e195      	b.n	8002e08 <USB_EPStartXfer+0x3e4>
 8002adc:	8813      	ldrh	r3, [r2, #0]
 8002ade:	4997      	ldr	r1, [pc, #604]	@ (8002d3c <USB_EPStartXfer+0x318>)
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	8013      	strh	r3, [r2, #0]
 8002ae6:	e1b2      	b.n	8002e4e <USB_EPStartXfer+0x42a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002ae8:	b2b6      	uxth	r6, r6
 8002aea:	88e2      	ldrh	r2, [r4, #6]
 8002aec:	6961      	ldr	r1, [r4, #20]
 8002aee:	0033      	movs	r3, r6
 8002af0:	0028      	movs	r0, r5
 8002af2:	f7ff ff83 	bl	80029fc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002af6:	2350      	movs	r3, #80	@ 0x50
 8002af8:	5aea      	ldrh	r2, [r5, r3]
 8002afa:	18aa      	adds	r2, r5, r2
 8002afc:	7823      	ldrb	r3, [r4, #0]
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	189b      	adds	r3, r3, r2
 8002b02:	4a91      	ldr	r2, [pc, #580]	@ (8002d48 <USB_EPStartXfer+0x324>)
 8002b04:	4694      	mov	ip, r2
 8002b06:	4463      	add	r3, ip
 8002b08:	801e      	strh	r6, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002b0a:	7822      	ldrb	r2, [r4, #0]
 8002b0c:	0092      	lsls	r2, r2, #2
 8002b0e:	18aa      	adds	r2, r5, r2
 8002b10:	8813      	ldrh	r3, [r2, #0]
 8002b12:	498e      	ldr	r1, [pc, #568]	@ (8002d4c <USB_EPStartXfer+0x328>)
 8002b14:	400b      	ands	r3, r1
 8002b16:	2130      	movs	r1, #48	@ 0x30
 8002b18:	404b      	eors	r3, r1
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	4989      	ldr	r1, [pc, #548]	@ (8002d44 <USB_EPStartXfer+0x320>)
 8002b1e:	430b      	orrs	r3, r1
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	8013      	strh	r3, [r2, #0]
  return HAL_OK;
 8002b24:	2000      	movs	r0, #0
 8002b26:	e7b1      	b.n	8002a8c <USB_EPStartXfer+0x68>
        if (ep->xfer_len_db > ep->maxpacket)
 8002b28:	6a23      	ldr	r3, [r4, #32]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d300      	bcc.n	8002b30 <USB_EPStartXfer+0x10c>
 8002b2e:	e150      	b.n	8002dd2 <USB_EPStartXfer+0x3ae>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002b30:	7823      	ldrb	r3, [r4, #0]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	18eb      	adds	r3, r5, r3
 8002b36:	8819      	ldrh	r1, [r3, #0]
 8002b38:	4a85      	ldr	r2, [pc, #532]	@ (8002d50 <USB_EPStartXfer+0x32c>)
 8002b3a:	4011      	ands	r1, r2
 8002b3c:	4a85      	ldr	r2, [pc, #532]	@ (8002d54 <USB_EPStartXfer+0x330>)
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	b292      	uxth	r2, r2
 8002b42:	801a      	strh	r2, [r3, #0]
          ep->xfer_len_db -= len;
 8002b44:	6a23      	ldr	r3, [r4, #32]
 8002b46:	1b9b      	subs	r3, r3, r6
 8002b48:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002b4a:	7823      	ldrb	r3, [r4, #0]
 8002b4c:	009a      	lsls	r2, r3, #2
 8002b4e:	18aa      	adds	r2, r5, r2
 8002b50:	8812      	ldrh	r2, [r2, #0]
 8002b52:	0652      	lsls	r2, r2, #25
 8002b54:	d400      	bmi.n	8002b58 <USB_EPStartXfer+0x134>
 8002b56:	e095      	b.n	8002c84 <USB_EPStartXfer+0x260>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002b58:	7862      	ldrb	r2, [r4, #1]
 8002b5a:	2a00      	cmp	r2, #0
 8002b5c:	d12c      	bne.n	8002bb8 <USB_EPStartXfer+0x194>
 8002b5e:	3250      	adds	r2, #80	@ 0x50
 8002b60:	5aaa      	ldrh	r2, [r5, r2]
 8002b62:	18aa      	adds	r2, r5, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	189b      	adds	r3, r3, r2
 8002b68:	4a73      	ldr	r2, [pc, #460]	@ (8002d38 <USB_EPStartXfer+0x314>)
 8002b6a:	4694      	mov	ip, r2
 8002b6c:	4463      	add	r3, ip
 8002b6e:	881a      	ldrh	r2, [r3, #0]
 8002b70:	0592      	lsls	r2, r2, #22
 8002b72:	0d92      	lsrs	r2, r2, #22
 8002b74:	801a      	strh	r2, [r3, #0]
 8002b76:	2e00      	cmp	r6, #0
 8002b78:	d105      	bne.n	8002b86 <USB_EPStartXfer+0x162>
 8002b7a:	881a      	ldrh	r2, [r3, #0]
 8002b7c:	496f      	ldr	r1, [pc, #444]	@ (8002d3c <USB_EPStartXfer+0x318>)
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	b292      	uxth	r2, r2
 8002b82:	801a      	strh	r2, [r3, #0]
 8002b84:	e01a      	b.n	8002bbc <USB_EPStartXfer+0x198>
 8002b86:	2e3e      	cmp	r6, #62	@ 0x3e
 8002b88:	d809      	bhi.n	8002b9e <USB_EPStartXfer+0x17a>
 8002b8a:	0872      	lsrs	r2, r6, #1
 8002b8c:	07f1      	lsls	r1, r6, #31
 8002b8e:	d500      	bpl.n	8002b92 <USB_EPStartXfer+0x16e>
 8002b90:	3201      	adds	r2, #1
 8002b92:	8819      	ldrh	r1, [r3, #0]
 8002b94:	0292      	lsls	r2, r2, #10
 8002b96:	b292      	uxth	r2, r2
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	801a      	strh	r2, [r3, #0]
 8002b9c:	e00e      	b.n	8002bbc <USB_EPStartXfer+0x198>
 8002b9e:	0972      	lsrs	r2, r6, #5
 8002ba0:	06f1      	lsls	r1, r6, #27
 8002ba2:	d100      	bne.n	8002ba6 <USB_EPStartXfer+0x182>
 8002ba4:	3a01      	subs	r2, #1
 8002ba6:	8819      	ldrh	r1, [r3, #0]
 8002ba8:	0292      	lsls	r2, r2, #10
 8002baa:	b292      	uxth	r2, r2
 8002bac:	4311      	orrs	r1, r2
 8002bae:	4a63      	ldr	r2, [pc, #396]	@ (8002d3c <USB_EPStartXfer+0x318>)
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	b292      	uxth	r2, r2
 8002bb4:	801a      	strh	r2, [r3, #0]
 8002bb6:	e001      	b.n	8002bbc <USB_EPStartXfer+0x198>
 8002bb8:	2a01      	cmp	r2, #1
 8002bba:	d026      	beq.n	8002c0a <USB_EPStartXfer+0x1e6>
            pmabuffer = ep->pmaaddr1;
 8002bbc:	8962      	ldrh	r2, [r4, #10]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002bbe:	b2b3      	uxth	r3, r6
 8002bc0:	6961      	ldr	r1, [r4, #20]
 8002bc2:	0028      	movs	r0, r5
 8002bc4:	f7ff ff1a 	bl	80029fc <USB_WritePMA>
            ep->xfer_buff += len;
 8002bc8:	6963      	ldr	r3, [r4, #20]
 8002bca:	199b      	adds	r3, r3, r6
 8002bcc:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002bce:	6a23      	ldr	r3, [r4, #32]
 8002bd0:	6922      	ldr	r2, [r4, #16]
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d924      	bls.n	8002c20 <USB_EPStartXfer+0x1fc>
              ep->xfer_len_db -= len;
 8002bd6:	1b9b      	subs	r3, r3, r6
 8002bd8:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002bda:	7863      	ldrb	r3, [r4, #1]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d13c      	bne.n	8002c5a <USB_EPStartXfer+0x236>
 8002be0:	3350      	adds	r3, #80	@ 0x50
 8002be2:	5aea      	ldrh	r2, [r5, r3]
 8002be4:	18aa      	adds	r2, r5, r2
 8002be6:	7823      	ldrb	r3, [r4, #0]
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	189b      	adds	r3, r3, r2
 8002bec:	4a56      	ldr	r2, [pc, #344]	@ (8002d48 <USB_EPStartXfer+0x324>)
 8002bee:	4694      	mov	ip, r2
 8002bf0:	4463      	add	r3, ip
 8002bf2:	881a      	ldrh	r2, [r3, #0]
 8002bf4:	0592      	lsls	r2, r2, #22
 8002bf6:	0d92      	lsrs	r2, r2, #22
 8002bf8:	801a      	strh	r2, [r3, #0]
 8002bfa:	2e00      	cmp	r6, #0
 8002bfc:	d114      	bne.n	8002c28 <USB_EPStartXfer+0x204>
 8002bfe:	881a      	ldrh	r2, [r3, #0]
 8002c00:	494e      	ldr	r1, [pc, #312]	@ (8002d3c <USB_EPStartXfer+0x318>)
 8002c02:	430a      	orrs	r2, r1
 8002c04:	b292      	uxth	r2, r2
 8002c06:	801a      	strh	r2, [r3, #0]
 8002c08:	e029      	b.n	8002c5e <USB_EPStartXfer+0x23a>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c0a:	324f      	adds	r2, #79	@ 0x4f
 8002c0c:	5aaa      	ldrh	r2, [r5, r2]
 8002c0e:	18aa      	adds	r2, r5, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	189b      	adds	r3, r3, r2
 8002c14:	4a48      	ldr	r2, [pc, #288]	@ (8002d38 <USB_EPStartXfer+0x314>)
 8002c16:	4694      	mov	ip, r2
 8002c18:	4463      	add	r3, ip
 8002c1a:	b2b2      	uxth	r2, r6
 8002c1c:	801a      	strh	r2, [r3, #0]
 8002c1e:	e7cd      	b.n	8002bbc <USB_EPStartXfer+0x198>
              ep->xfer_len_db = 0U;
 8002c20:	2200      	movs	r2, #0
 8002c22:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8002c24:	001e      	movs	r6, r3
 8002c26:	e7d8      	b.n	8002bda <USB_EPStartXfer+0x1b6>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002c28:	2e3e      	cmp	r6, #62	@ 0x3e
 8002c2a:	d809      	bhi.n	8002c40 <USB_EPStartXfer+0x21c>
 8002c2c:	0872      	lsrs	r2, r6, #1
 8002c2e:	07f1      	lsls	r1, r6, #31
 8002c30:	d500      	bpl.n	8002c34 <USB_EPStartXfer+0x210>
 8002c32:	3201      	adds	r2, #1
 8002c34:	8819      	ldrh	r1, [r3, #0]
 8002c36:	0292      	lsls	r2, r2, #10
 8002c38:	b292      	uxth	r2, r2
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	801a      	strh	r2, [r3, #0]
 8002c3e:	e00e      	b.n	8002c5e <USB_EPStartXfer+0x23a>
 8002c40:	0972      	lsrs	r2, r6, #5
 8002c42:	06f1      	lsls	r1, r6, #27
 8002c44:	d100      	bne.n	8002c48 <USB_EPStartXfer+0x224>
 8002c46:	3a01      	subs	r2, #1
 8002c48:	8819      	ldrh	r1, [r3, #0]
 8002c4a:	0292      	lsls	r2, r2, #10
 8002c4c:	b292      	uxth	r2, r2
 8002c4e:	4311      	orrs	r1, r2
 8002c50:	4a3a      	ldr	r2, [pc, #232]	@ (8002d3c <USB_EPStartXfer+0x318>)
 8002c52:	430a      	orrs	r2, r1
 8002c54:	b292      	uxth	r2, r2
 8002c56:	801a      	strh	r2, [r3, #0]
 8002c58:	e001      	b.n	8002c5e <USB_EPStartXfer+0x23a>
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d006      	beq.n	8002c6c <USB_EPStartXfer+0x248>
            pmabuffer = ep->pmaaddr0;
 8002c5e:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002c60:	b2b3      	uxth	r3, r6
 8002c62:	6961      	ldr	r1, [r4, #20]
 8002c64:	0028      	movs	r0, r5
 8002c66:	f7ff fec9 	bl	80029fc <USB_WritePMA>
 8002c6a:	e74e      	b.n	8002b0a <USB_EPStartXfer+0xe6>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002c6c:	334f      	adds	r3, #79	@ 0x4f
 8002c6e:	5aea      	ldrh	r2, [r5, r3]
 8002c70:	18aa      	adds	r2, r5, r2
 8002c72:	7823      	ldrb	r3, [r4, #0]
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	189b      	adds	r3, r3, r2
 8002c78:	4a33      	ldr	r2, [pc, #204]	@ (8002d48 <USB_EPStartXfer+0x324>)
 8002c7a:	4694      	mov	ip, r2
 8002c7c:	4463      	add	r3, ip
 8002c7e:	b2b2      	uxth	r2, r6
 8002c80:	801a      	strh	r2, [r3, #0]
 8002c82:	e7ec      	b.n	8002c5e <USB_EPStartXfer+0x23a>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002c84:	7862      	ldrb	r2, [r4, #1]
 8002c86:	2a00      	cmp	r2, #0
 8002c88:	d12c      	bne.n	8002ce4 <USB_EPStartXfer+0x2c0>
 8002c8a:	3250      	adds	r2, #80	@ 0x50
 8002c8c:	5aa9      	ldrh	r1, [r5, r2]
 8002c8e:	1869      	adds	r1, r5, r1
 8002c90:	00da      	lsls	r2, r3, #3
 8002c92:	1852      	adds	r2, r2, r1
 8002c94:	4b2c      	ldr	r3, [pc, #176]	@ (8002d48 <USB_EPStartXfer+0x324>)
 8002c96:	469c      	mov	ip, r3
 8002c98:	4462      	add	r2, ip
 8002c9a:	8813      	ldrh	r3, [r2, #0]
 8002c9c:	059b      	lsls	r3, r3, #22
 8002c9e:	0d9b      	lsrs	r3, r3, #22
 8002ca0:	8013      	strh	r3, [r2, #0]
 8002ca2:	2e00      	cmp	r6, #0
 8002ca4:	d105      	bne.n	8002cb2 <USB_EPStartXfer+0x28e>
 8002ca6:	8813      	ldrh	r3, [r2, #0]
 8002ca8:	4924      	ldr	r1, [pc, #144]	@ (8002d3c <USB_EPStartXfer+0x318>)
 8002caa:	430b      	orrs	r3, r1
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	8013      	strh	r3, [r2, #0]
 8002cb0:	e01a      	b.n	8002ce8 <USB_EPStartXfer+0x2c4>
 8002cb2:	2e3e      	cmp	r6, #62	@ 0x3e
 8002cb4:	d809      	bhi.n	8002cca <USB_EPStartXfer+0x2a6>
 8002cb6:	0873      	lsrs	r3, r6, #1
 8002cb8:	07f1      	lsls	r1, r6, #31
 8002cba:	d500      	bpl.n	8002cbe <USB_EPStartXfer+0x29a>
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	8811      	ldrh	r1, [r2, #0]
 8002cc0:	029b      	lsls	r3, r3, #10
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	430b      	orrs	r3, r1
 8002cc6:	8013      	strh	r3, [r2, #0]
 8002cc8:	e00e      	b.n	8002ce8 <USB_EPStartXfer+0x2c4>
 8002cca:	0973      	lsrs	r3, r6, #5
 8002ccc:	06f1      	lsls	r1, r6, #27
 8002cce:	d100      	bne.n	8002cd2 <USB_EPStartXfer+0x2ae>
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	8811      	ldrh	r1, [r2, #0]
 8002cd4:	029b      	lsls	r3, r3, #10
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	4319      	orrs	r1, r3
 8002cda:	4b18      	ldr	r3, [pc, #96]	@ (8002d3c <USB_EPStartXfer+0x318>)
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	8013      	strh	r3, [r2, #0]
 8002ce2:	e001      	b.n	8002ce8 <USB_EPStartXfer+0x2c4>
 8002ce4:	2a01      	cmp	r2, #1
 8002ce6:	d037      	beq.n	8002d58 <USB_EPStartXfer+0x334>
            pmabuffer = ep->pmaaddr0;
 8002ce8:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002cea:	b2b3      	uxth	r3, r6
 8002cec:	6961      	ldr	r1, [r4, #20]
 8002cee:	0028      	movs	r0, r5
 8002cf0:	f7ff fe84 	bl	80029fc <USB_WritePMA>
            ep->xfer_buff += len;
 8002cf4:	6963      	ldr	r3, [r4, #20]
 8002cf6:	199b      	adds	r3, r3, r6
 8002cf8:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002cfa:	6a23      	ldr	r3, [r4, #32]
 8002cfc:	6922      	ldr	r2, [r4, #16]
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d935      	bls.n	8002d6e <USB_EPStartXfer+0x34a>
              ep->xfer_len_db -= len;
 8002d02:	1b9b      	subs	r3, r3, r6
 8002d04:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002d06:	7863      	ldrb	r3, [r4, #1]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d14d      	bne.n	8002da8 <USB_EPStartXfer+0x384>
 8002d0c:	3350      	adds	r3, #80	@ 0x50
 8002d0e:	5aea      	ldrh	r2, [r5, r3]
 8002d10:	18aa      	adds	r2, r5, r2
 8002d12:	7823      	ldrb	r3, [r4, #0]
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	189b      	adds	r3, r3, r2
 8002d18:	4a07      	ldr	r2, [pc, #28]	@ (8002d38 <USB_EPStartXfer+0x314>)
 8002d1a:	4694      	mov	ip, r2
 8002d1c:	4463      	add	r3, ip
 8002d1e:	881a      	ldrh	r2, [r3, #0]
 8002d20:	0592      	lsls	r2, r2, #22
 8002d22:	0d92      	lsrs	r2, r2, #22
 8002d24:	801a      	strh	r2, [r3, #0]
 8002d26:	2e00      	cmp	r6, #0
 8002d28:	d125      	bne.n	8002d76 <USB_EPStartXfer+0x352>
 8002d2a:	881a      	ldrh	r2, [r3, #0]
 8002d2c:	4903      	ldr	r1, [pc, #12]	@ (8002d3c <USB_EPStartXfer+0x318>)
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	b292      	uxth	r2, r2
 8002d32:	801a      	strh	r2, [r3, #0]
 8002d34:	e03a      	b.n	8002dac <USB_EPStartXfer+0x388>
 8002d36:	46c0      	nop			@ (mov r8, r8)
 8002d38:	00000406 	.word	0x00000406
 8002d3c:	ffff8000 	.word	0xffff8000
 8002d40:	ffffbf8f 	.word	0xffffbf8f
 8002d44:	ffff8080 	.word	0xffff8080
 8002d48:	00000402 	.word	0x00000402
 8002d4c:	ffff8fbf 	.word	0xffff8fbf
 8002d50:	ffff8f8f 	.word	0xffff8f8f
 8002d54:	ffff8180 	.word	0xffff8180
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002d58:	324f      	adds	r2, #79	@ 0x4f
 8002d5a:	5aaa      	ldrh	r2, [r5, r2]
 8002d5c:	18aa      	adds	r2, r5, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	189b      	adds	r3, r3, r2
 8002d62:	4abd      	ldr	r2, [pc, #756]	@ (8003058 <USB_EPStartXfer+0x634>)
 8002d64:	4694      	mov	ip, r2
 8002d66:	4463      	add	r3, ip
 8002d68:	b2b2      	uxth	r2, r6
 8002d6a:	801a      	strh	r2, [r3, #0]
 8002d6c:	e7bc      	b.n	8002ce8 <USB_EPStartXfer+0x2c4>
              ep->xfer_len_db = 0U;
 8002d6e:	2200      	movs	r2, #0
 8002d70:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8002d72:	001e      	movs	r6, r3
 8002d74:	e7c7      	b.n	8002d06 <USB_EPStartXfer+0x2e2>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002d76:	2e3e      	cmp	r6, #62	@ 0x3e
 8002d78:	d809      	bhi.n	8002d8e <USB_EPStartXfer+0x36a>
 8002d7a:	0872      	lsrs	r2, r6, #1
 8002d7c:	07f1      	lsls	r1, r6, #31
 8002d7e:	d500      	bpl.n	8002d82 <USB_EPStartXfer+0x35e>
 8002d80:	3201      	adds	r2, #1
 8002d82:	8819      	ldrh	r1, [r3, #0]
 8002d84:	0292      	lsls	r2, r2, #10
 8002d86:	b292      	uxth	r2, r2
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	801a      	strh	r2, [r3, #0]
 8002d8c:	e00e      	b.n	8002dac <USB_EPStartXfer+0x388>
 8002d8e:	0972      	lsrs	r2, r6, #5
 8002d90:	06f1      	lsls	r1, r6, #27
 8002d92:	d100      	bne.n	8002d96 <USB_EPStartXfer+0x372>
 8002d94:	3a01      	subs	r2, #1
 8002d96:	8819      	ldrh	r1, [r3, #0]
 8002d98:	0292      	lsls	r2, r2, #10
 8002d9a:	b292      	uxth	r2, r2
 8002d9c:	4311      	orrs	r1, r2
 8002d9e:	4aaf      	ldr	r2, [pc, #700]	@ (800305c <USB_EPStartXfer+0x638>)
 8002da0:	430a      	orrs	r2, r1
 8002da2:	b292      	uxth	r2, r2
 8002da4:	801a      	strh	r2, [r3, #0]
 8002da6:	e001      	b.n	8002dac <USB_EPStartXfer+0x388>
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d006      	beq.n	8002dba <USB_EPStartXfer+0x396>
            pmabuffer = ep->pmaaddr1;
 8002dac:	8962      	ldrh	r2, [r4, #10]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002dae:	b2b3      	uxth	r3, r6
 8002db0:	6961      	ldr	r1, [r4, #20]
 8002db2:	0028      	movs	r0, r5
 8002db4:	f7ff fe22 	bl	80029fc <USB_WritePMA>
 8002db8:	e6a7      	b.n	8002b0a <USB_EPStartXfer+0xe6>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002dba:	334f      	adds	r3, #79	@ 0x4f
 8002dbc:	5aea      	ldrh	r2, [r5, r3]
 8002dbe:	18aa      	adds	r2, r5, r2
 8002dc0:	7823      	ldrb	r3, [r4, #0]
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	189b      	adds	r3, r3, r2
 8002dc6:	4aa6      	ldr	r2, [pc, #664]	@ (8003060 <USB_EPStartXfer+0x63c>)
 8002dc8:	4694      	mov	ip, r2
 8002dca:	4463      	add	r3, ip
 8002dcc:	b2b2      	uxth	r2, r6
 8002dce:	801a      	strh	r2, [r3, #0]
 8002dd0:	e7ec      	b.n	8002dac <USB_EPStartXfer+0x388>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8002dd2:	7822      	ldrb	r2, [r4, #0]
 8002dd4:	0092      	lsls	r2, r2, #2
 8002dd6:	18aa      	adds	r2, r5, r2
 8002dd8:	8810      	ldrh	r0, [r2, #0]
 8002dda:	49a2      	ldr	r1, [pc, #648]	@ (8003064 <USB_EPStartXfer+0x640>)
 8002ddc:	4008      	ands	r0, r1
 8002dde:	49a2      	ldr	r1, [pc, #648]	@ (8003068 <USB_EPStartXfer+0x644>)
 8002de0:	4301      	orrs	r1, r0
 8002de2:	b289      	uxth	r1, r1
 8002de4:	8011      	strh	r1, [r2, #0]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002de6:	2250      	movs	r2, #80	@ 0x50
 8002de8:	5aa9      	ldrh	r1, [r5, r2]
 8002dea:	1869      	adds	r1, r5, r1
 8002dec:	7822      	ldrb	r2, [r4, #0]
 8002dee:	00d2      	lsls	r2, r2, #3
 8002df0:	1852      	adds	r2, r2, r1
 8002df2:	4999      	ldr	r1, [pc, #612]	@ (8003058 <USB_EPStartXfer+0x634>)
 8002df4:	468c      	mov	ip, r1
 8002df6:	4462      	add	r2, ip
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	8013      	strh	r3, [r2, #0]
          pmabuffer = ep->pmaaddr0;
 8002dfc:	8922      	ldrh	r2, [r4, #8]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002dfe:	6961      	ldr	r1, [r4, #20]
 8002e00:	0028      	movs	r0, r5
 8002e02:	f7ff fdfb 	bl	80029fc <USB_WritePMA>
 8002e06:	e680      	b.n	8002b0a <USB_EPStartXfer+0xe6>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002e08:	2e3e      	cmp	r6, #62	@ 0x3e
 8002e0a:	d809      	bhi.n	8002e20 <USB_EPStartXfer+0x3fc>
 8002e0c:	0873      	lsrs	r3, r6, #1
 8002e0e:	07f1      	lsls	r1, r6, #31
 8002e10:	d500      	bpl.n	8002e14 <USB_EPStartXfer+0x3f0>
 8002e12:	3301      	adds	r3, #1
 8002e14:	8811      	ldrh	r1, [r2, #0]
 8002e16:	029b      	lsls	r3, r3, #10
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	430b      	orrs	r3, r1
 8002e1c:	8013      	strh	r3, [r2, #0]
 8002e1e:	e016      	b.n	8002e4e <USB_EPStartXfer+0x42a>
 8002e20:	0973      	lsrs	r3, r6, #5
 8002e22:	06f1      	lsls	r1, r6, #27
 8002e24:	d100      	bne.n	8002e28 <USB_EPStartXfer+0x404>
 8002e26:	3b01      	subs	r3, #1
 8002e28:	8811      	ldrh	r1, [r2, #0]
 8002e2a:	029b      	lsls	r3, r3, #10
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	4319      	orrs	r1, r3
 8002e30:	4b8a      	ldr	r3, [pc, #552]	@ (800305c <USB_EPStartXfer+0x638>)
 8002e32:	430b      	orrs	r3, r1
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	8013      	strh	r3, [r2, #0]
 8002e38:	e009      	b.n	8002e4e <USB_EPStartXfer+0x42a>
 8002e3a:	2350      	movs	r3, #80	@ 0x50
 8002e3c:	5aeb      	ldrh	r3, [r5, r3]
 8002e3e:	18eb      	adds	r3, r5, r3
 8002e40:	00d2      	lsls	r2, r2, #3
 8002e42:	18d2      	adds	r2, r2, r3
 8002e44:	4b86      	ldr	r3, [pc, #536]	@ (8003060 <USB_EPStartXfer+0x63c>)
 8002e46:	469c      	mov	ip, r3
 8002e48:	4462      	add	r2, ip
 8002e4a:	b2b3      	uxth	r3, r6
 8002e4c:	8013      	strh	r3, [r2, #0]
          pmabuffer = ep->pmaaddr1;
 8002e4e:	8962      	ldrh	r2, [r4, #10]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002e50:	b2b3      	uxth	r3, r6
 8002e52:	6961      	ldr	r1, [r4, #20]
 8002e54:	0028      	movs	r0, r5
 8002e56:	f7ff fdd1 	bl	80029fc <USB_WritePMA>
 8002e5a:	e656      	b.n	8002b0a <USB_EPStartXfer+0xe6>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d12c      	bne.n	8002eba <USB_EPStartXfer+0x496>
 8002e60:	3350      	adds	r3, #80	@ 0x50
 8002e62:	5aeb      	ldrh	r3, [r5, r3]
 8002e64:	18eb      	adds	r3, r5, r3
 8002e66:	00d2      	lsls	r2, r2, #3
 8002e68:	18d2      	adds	r2, r2, r3
 8002e6a:	4b7b      	ldr	r3, [pc, #492]	@ (8003058 <USB_EPStartXfer+0x634>)
 8002e6c:	469c      	mov	ip, r3
 8002e6e:	4462      	add	r2, ip
 8002e70:	8813      	ldrh	r3, [r2, #0]
 8002e72:	059b      	lsls	r3, r3, #22
 8002e74:	0d9b      	lsrs	r3, r3, #22
 8002e76:	8013      	strh	r3, [r2, #0]
 8002e78:	2e00      	cmp	r6, #0
 8002e7a:	d105      	bne.n	8002e88 <USB_EPStartXfer+0x464>
 8002e7c:	8813      	ldrh	r3, [r2, #0]
 8002e7e:	4977      	ldr	r1, [pc, #476]	@ (800305c <USB_EPStartXfer+0x638>)
 8002e80:	430b      	orrs	r3, r1
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	8013      	strh	r3, [r2, #0]
 8002e86:	e022      	b.n	8002ece <USB_EPStartXfer+0x4aa>
 8002e88:	2e3e      	cmp	r6, #62	@ 0x3e
 8002e8a:	d809      	bhi.n	8002ea0 <USB_EPStartXfer+0x47c>
 8002e8c:	0873      	lsrs	r3, r6, #1
 8002e8e:	07f1      	lsls	r1, r6, #31
 8002e90:	d500      	bpl.n	8002e94 <USB_EPStartXfer+0x470>
 8002e92:	3301      	adds	r3, #1
 8002e94:	8811      	ldrh	r1, [r2, #0]
 8002e96:	029b      	lsls	r3, r3, #10
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	8013      	strh	r3, [r2, #0]
 8002e9e:	e016      	b.n	8002ece <USB_EPStartXfer+0x4aa>
 8002ea0:	0973      	lsrs	r3, r6, #5
 8002ea2:	06f1      	lsls	r1, r6, #27
 8002ea4:	d100      	bne.n	8002ea8 <USB_EPStartXfer+0x484>
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	8811      	ldrh	r1, [r2, #0]
 8002eaa:	029b      	lsls	r3, r3, #10
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	4319      	orrs	r1, r3
 8002eb0:	4b6a      	ldr	r3, [pc, #424]	@ (800305c <USB_EPStartXfer+0x638>)
 8002eb2:	430b      	orrs	r3, r1
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	8013      	strh	r3, [r2, #0]
 8002eb8:	e009      	b.n	8002ece <USB_EPStartXfer+0x4aa>
 8002eba:	2350      	movs	r3, #80	@ 0x50
 8002ebc:	5aeb      	ldrh	r3, [r5, r3]
 8002ebe:	18eb      	adds	r3, r5, r3
 8002ec0:	00d2      	lsls	r2, r2, #3
 8002ec2:	18d2      	adds	r2, r2, r3
 8002ec4:	4b64      	ldr	r3, [pc, #400]	@ (8003058 <USB_EPStartXfer+0x634>)
 8002ec6:	469c      	mov	ip, r3
 8002ec8:	4462      	add	r2, ip
 8002eca:	b2b3      	uxth	r3, r6
 8002ecc:	8013      	strh	r3, [r2, #0]
          pmabuffer = ep->pmaaddr0;
 8002ece:	8922      	ldrh	r2, [r4, #8]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002ed0:	b2b3      	uxth	r3, r6
 8002ed2:	6961      	ldr	r1, [r4, #20]
 8002ed4:	0028      	movs	r0, r5
 8002ed6:	f7ff fd91 	bl	80029fc <USB_WritePMA>
 8002eda:	e616      	b.n	8002b0a <USB_EPStartXfer+0xe6>
        ep->xfer_len = 0U;
 8002edc:	2200      	movs	r2, #0
 8002ede:	61a2      	str	r2, [r4, #24]
        len = ep->xfer_len;
 8002ee0:	0019      	movs	r1, r3
 8002ee2:	e5b0      	b.n	8002a46 <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002ee4:	293e      	cmp	r1, #62	@ 0x3e
 8002ee6:	d809      	bhi.n	8002efc <USB_EPStartXfer+0x4d8>
 8002ee8:	084a      	lsrs	r2, r1, #1
 8002eea:	07c9      	lsls	r1, r1, #31
 8002eec:	d500      	bpl.n	8002ef0 <USB_EPStartXfer+0x4cc>
 8002eee:	3201      	adds	r2, #1
 8002ef0:	8819      	ldrh	r1, [r3, #0]
 8002ef2:	0292      	lsls	r2, r2, #10
 8002ef4:	b292      	uxth	r2, r2
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	801a      	strh	r2, [r3, #0]
 8002efa:	e5b9      	b.n	8002a70 <USB_EPStartXfer+0x4c>
 8002efc:	094a      	lsrs	r2, r1, #5
 8002efe:	06c9      	lsls	r1, r1, #27
 8002f00:	d100      	bne.n	8002f04 <USB_EPStartXfer+0x4e0>
 8002f02:	3a01      	subs	r2, #1
 8002f04:	8819      	ldrh	r1, [r3, #0]
 8002f06:	0292      	lsls	r2, r2, #10
 8002f08:	b292      	uxth	r2, r2
 8002f0a:	4311      	orrs	r1, r2
 8002f0c:	4a53      	ldr	r2, [pc, #332]	@ (800305c <USB_EPStartXfer+0x638>)
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	b292      	uxth	r2, r2
 8002f12:	801a      	strh	r2, [r3, #0]
 8002f14:	e5ac      	b.n	8002a70 <USB_EPStartXfer+0x4c>
      if (ep->type == EP_TYPE_BULK)
 8002f16:	78ca      	ldrb	r2, [r1, #3]
 8002f18:	2a02      	cmp	r2, #2
 8002f1a:	d03a      	beq.n	8002f92 <USB_EPStartXfer+0x56e>
      else if (ep->type == EP_TYPE_ISOC)
 8002f1c:	2a01      	cmp	r2, #1
 8002f1e:	d000      	beq.n	8002f22 <USB_EPStartXfer+0x4fe>
 8002f20:	e10e      	b.n	8003140 <USB_EPStartXfer+0x71c>
        if (ep->xfer_len > ep->maxpacket)
 8002f22:	6989      	ldr	r1, [r1, #24]
 8002f24:	6922      	ldr	r2, [r4, #16]
 8002f26:	4291      	cmp	r1, r2
 8002f28:	d800      	bhi.n	8002f2c <USB_EPStartXfer+0x508>
 8002f2a:	e0c4      	b.n	80030b6 <USB_EPStartXfer+0x692>
          ep->xfer_len -= len;
 8002f2c:	1a89      	subs	r1, r1, r2
 8002f2e:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d114      	bne.n	8002f5e <USB_EPStartXfer+0x53a>
 8002f34:	3350      	adds	r3, #80	@ 0x50
 8002f36:	5ae9      	ldrh	r1, [r5, r3]
 8002f38:	1869      	adds	r1, r5, r1
 8002f3a:	7823      	ldrb	r3, [r4, #0]
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	185b      	adds	r3, r3, r1
 8002f40:	4945      	ldr	r1, [pc, #276]	@ (8003058 <USB_EPStartXfer+0x634>)
 8002f42:	468c      	mov	ip, r1
 8002f44:	4463      	add	r3, ip
 8002f46:	8819      	ldrh	r1, [r3, #0]
 8002f48:	0589      	lsls	r1, r1, #22
 8002f4a:	0d89      	lsrs	r1, r1, #22
 8002f4c:	8019      	strh	r1, [r3, #0]
 8002f4e:	2a00      	cmp	r2, #0
 8002f50:	d000      	beq.n	8002f54 <USB_EPStartXfer+0x530>
 8002f52:	e0b4      	b.n	80030be <USB_EPStartXfer+0x69a>
 8002f54:	8819      	ldrh	r1, [r3, #0]
 8002f56:	4841      	ldr	r0, [pc, #260]	@ (800305c <USB_EPStartXfer+0x638>)
 8002f58:	4301      	orrs	r1, r0
 8002f5a:	b289      	uxth	r1, r1
 8002f5c:	8019      	strh	r1, [r3, #0]
 8002f5e:	7863      	ldrb	r3, [r4, #1]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d000      	beq.n	8002f66 <USB_EPStartXfer+0x542>
 8002f64:	e0dd      	b.n	8003122 <USB_EPStartXfer+0x6fe>
 8002f66:	3350      	adds	r3, #80	@ 0x50
 8002f68:	5ae9      	ldrh	r1, [r5, r3]
 8002f6a:	1869      	adds	r1, r5, r1
 8002f6c:	7823      	ldrb	r3, [r4, #0]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	185b      	adds	r3, r3, r1
 8002f72:	493b      	ldr	r1, [pc, #236]	@ (8003060 <USB_EPStartXfer+0x63c>)
 8002f74:	468c      	mov	ip, r1
 8002f76:	4463      	add	r3, ip
 8002f78:	8819      	ldrh	r1, [r3, #0]
 8002f7a:	0589      	lsls	r1, r1, #22
 8002f7c:	0d89      	lsrs	r1, r1, #22
 8002f7e:	8019      	strh	r1, [r3, #0]
 8002f80:	2a00      	cmp	r2, #0
 8002f82:	d000      	beq.n	8002f86 <USB_EPStartXfer+0x562>
 8002f84:	e0b4      	b.n	80030f0 <USB_EPStartXfer+0x6cc>
 8002f86:	881a      	ldrh	r2, [r3, #0]
 8002f88:	4934      	ldr	r1, [pc, #208]	@ (800305c <USB_EPStartXfer+0x638>)
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	b292      	uxth	r2, r2
 8002f8e:	801a      	strh	r2, [r3, #0]
 8002f90:	e56e      	b.n	8002a70 <USB_EPStartXfer+0x4c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d114      	bne.n	8002fc0 <USB_EPStartXfer+0x59c>
 8002f96:	3350      	adds	r3, #80	@ 0x50
 8002f98:	5ac2      	ldrh	r2, [r0, r3]
 8002f9a:	1882      	adds	r2, r0, r2
 8002f9c:	780b      	ldrb	r3, [r1, #0]
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	189b      	adds	r3, r3, r2
 8002fa2:	4a2d      	ldr	r2, [pc, #180]	@ (8003058 <USB_EPStartXfer+0x634>)
 8002fa4:	4694      	mov	ip, r2
 8002fa6:	4463      	add	r3, ip
 8002fa8:	881a      	ldrh	r2, [r3, #0]
 8002faa:	0592      	lsls	r2, r2, #22
 8002fac:	0d92      	lsrs	r2, r2, #22
 8002fae:	801a      	strh	r2, [r3, #0]
 8002fb0:	690a      	ldr	r2, [r1, #16]
 8002fb2:	2a00      	cmp	r2, #0
 8002fb4:	d11d      	bne.n	8002ff2 <USB_EPStartXfer+0x5ce>
 8002fb6:	881a      	ldrh	r2, [r3, #0]
 8002fb8:	4928      	ldr	r1, [pc, #160]	@ (800305c <USB_EPStartXfer+0x638>)
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	b292      	uxth	r2, r2
 8002fbe:	801a      	strh	r2, [r3, #0]
 8002fc0:	7863      	ldrb	r3, [r4, #1]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d152      	bne.n	800306c <USB_EPStartXfer+0x648>
 8002fc6:	3350      	adds	r3, #80	@ 0x50
 8002fc8:	5aea      	ldrh	r2, [r5, r3]
 8002fca:	18aa      	adds	r2, r5, r2
 8002fcc:	7823      	ldrb	r3, [r4, #0]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	189b      	adds	r3, r3, r2
 8002fd2:	4a23      	ldr	r2, [pc, #140]	@ (8003060 <USB_EPStartXfer+0x63c>)
 8002fd4:	4694      	mov	ip, r2
 8002fd6:	4463      	add	r3, ip
 8002fd8:	881a      	ldrh	r2, [r3, #0]
 8002fda:	0592      	lsls	r2, r2, #22
 8002fdc:	0d92      	lsrs	r2, r2, #22
 8002fde:	801a      	strh	r2, [r3, #0]
 8002fe0:	6922      	ldr	r2, [r4, #16]
 8002fe2:	2a00      	cmp	r2, #0
 8002fe4:	d11e      	bne.n	8003024 <USB_EPStartXfer+0x600>
 8002fe6:	881a      	ldrh	r2, [r3, #0]
 8002fe8:	491c      	ldr	r1, [pc, #112]	@ (800305c <USB_EPStartXfer+0x638>)
 8002fea:	430a      	orrs	r2, r1
 8002fec:	b292      	uxth	r2, r2
 8002fee:	801a      	strh	r2, [r3, #0]
 8002ff0:	e03e      	b.n	8003070 <USB_EPStartXfer+0x64c>
 8002ff2:	2a3e      	cmp	r2, #62	@ 0x3e
 8002ff4:	d809      	bhi.n	800300a <USB_EPStartXfer+0x5e6>
 8002ff6:	0851      	lsrs	r1, r2, #1
 8002ff8:	07d2      	lsls	r2, r2, #31
 8002ffa:	d500      	bpl.n	8002ffe <USB_EPStartXfer+0x5da>
 8002ffc:	3101      	adds	r1, #1
 8002ffe:	881a      	ldrh	r2, [r3, #0]
 8003000:	0289      	lsls	r1, r1, #10
 8003002:	b289      	uxth	r1, r1
 8003004:	430a      	orrs	r2, r1
 8003006:	801a      	strh	r2, [r3, #0]
 8003008:	e7da      	b.n	8002fc0 <USB_EPStartXfer+0x59c>
 800300a:	0951      	lsrs	r1, r2, #5
 800300c:	06d2      	lsls	r2, r2, #27
 800300e:	d100      	bne.n	8003012 <USB_EPStartXfer+0x5ee>
 8003010:	3901      	subs	r1, #1
 8003012:	881a      	ldrh	r2, [r3, #0]
 8003014:	0289      	lsls	r1, r1, #10
 8003016:	b289      	uxth	r1, r1
 8003018:	4311      	orrs	r1, r2
 800301a:	4a10      	ldr	r2, [pc, #64]	@ (800305c <USB_EPStartXfer+0x638>)
 800301c:	430a      	orrs	r2, r1
 800301e:	b292      	uxth	r2, r2
 8003020:	801a      	strh	r2, [r3, #0]
 8003022:	e7cd      	b.n	8002fc0 <USB_EPStartXfer+0x59c>
 8003024:	2a3e      	cmp	r2, #62	@ 0x3e
 8003026:	d809      	bhi.n	800303c <USB_EPStartXfer+0x618>
 8003028:	0851      	lsrs	r1, r2, #1
 800302a:	07d2      	lsls	r2, r2, #31
 800302c:	d500      	bpl.n	8003030 <USB_EPStartXfer+0x60c>
 800302e:	3101      	adds	r1, #1
 8003030:	881a      	ldrh	r2, [r3, #0]
 8003032:	0289      	lsls	r1, r1, #10
 8003034:	b289      	uxth	r1, r1
 8003036:	430a      	orrs	r2, r1
 8003038:	801a      	strh	r2, [r3, #0]
 800303a:	e019      	b.n	8003070 <USB_EPStartXfer+0x64c>
 800303c:	0951      	lsrs	r1, r2, #5
 800303e:	06d2      	lsls	r2, r2, #27
 8003040:	d100      	bne.n	8003044 <USB_EPStartXfer+0x620>
 8003042:	3901      	subs	r1, #1
 8003044:	881a      	ldrh	r2, [r3, #0]
 8003046:	0289      	lsls	r1, r1, #10
 8003048:	b289      	uxth	r1, r1
 800304a:	4311      	orrs	r1, r2
 800304c:	4a03      	ldr	r2, [pc, #12]	@ (800305c <USB_EPStartXfer+0x638>)
 800304e:	430a      	orrs	r2, r1
 8003050:	b292      	uxth	r2, r2
 8003052:	801a      	strh	r2, [r3, #0]
 8003054:	e00c      	b.n	8003070 <USB_EPStartXfer+0x64c>
 8003056:	46c0      	nop			@ (mov r8, r8)
 8003058:	00000402 	.word	0x00000402
 800305c:	ffff8000 	.word	0xffff8000
 8003060:	00000406 	.word	0x00000406
 8003064:	ffff8e8f 	.word	0xffff8e8f
 8003068:	ffff8080 	.word	0xffff8080
 800306c:	2b01      	cmp	r3, #1
 800306e:	d016      	beq.n	800309e <USB_EPStartXfer+0x67a>
        if (ep->xfer_count != 0U)
 8003070:	69e3      	ldr	r3, [r4, #28]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d100      	bne.n	8003078 <USB_EPStartXfer+0x654>
 8003076:	e4fb      	b.n	8002a70 <USB_EPStartXfer+0x4c>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8003078:	7823      	ldrb	r3, [r4, #0]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	18eb      	adds	r3, r5, r3
 800307e:	881a      	ldrh	r2, [r3, #0]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8003080:	4930      	ldr	r1, [pc, #192]	@ (8003144 <USB_EPStartXfer+0x720>)
 8003082:	400a      	ands	r2, r1
 8003084:	428a      	cmp	r2, r1
 8003086:	d002      	beq.n	800308e <USB_EPStartXfer+0x66a>
 8003088:	2a00      	cmp	r2, #0
 800308a:	d000      	beq.n	800308e <USB_EPStartXfer+0x66a>
 800308c:	e4f0      	b.n	8002a70 <USB_EPStartXfer+0x4c>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800308e:	8819      	ldrh	r1, [r3, #0]
 8003090:	4a2d      	ldr	r2, [pc, #180]	@ (8003148 <USB_EPStartXfer+0x724>)
 8003092:	4011      	ands	r1, r2
 8003094:	4a2d      	ldr	r2, [pc, #180]	@ (800314c <USB_EPStartXfer+0x728>)
 8003096:	430a      	orrs	r2, r1
 8003098:	b292      	uxth	r2, r2
 800309a:	801a      	strh	r2, [r3, #0]
 800309c:	e4e8      	b.n	8002a70 <USB_EPStartXfer+0x4c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800309e:	334f      	adds	r3, #79	@ 0x4f
 80030a0:	5aea      	ldrh	r2, [r5, r3]
 80030a2:	18aa      	adds	r2, r5, r2
 80030a4:	7823      	ldrb	r3, [r4, #0]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	189b      	adds	r3, r3, r2
 80030aa:	4a29      	ldr	r2, [pc, #164]	@ (8003150 <USB_EPStartXfer+0x72c>)
 80030ac:	4694      	mov	ip, r2
 80030ae:	4463      	add	r3, ip
 80030b0:	8a22      	ldrh	r2, [r4, #16]
 80030b2:	801a      	strh	r2, [r3, #0]
 80030b4:	e7dc      	b.n	8003070 <USB_EPStartXfer+0x64c>
          ep->xfer_len = 0U;
 80030b6:	2200      	movs	r2, #0
 80030b8:	61a2      	str	r2, [r4, #24]
          len = ep->xfer_len;
 80030ba:	000a      	movs	r2, r1
 80030bc:	e738      	b.n	8002f30 <USB_EPStartXfer+0x50c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80030be:	2a3e      	cmp	r2, #62	@ 0x3e
 80030c0:	d809      	bhi.n	80030d6 <USB_EPStartXfer+0x6b2>
 80030c2:	0851      	lsrs	r1, r2, #1
 80030c4:	07d0      	lsls	r0, r2, #31
 80030c6:	d500      	bpl.n	80030ca <USB_EPStartXfer+0x6a6>
 80030c8:	3101      	adds	r1, #1
 80030ca:	8818      	ldrh	r0, [r3, #0]
 80030cc:	0289      	lsls	r1, r1, #10
 80030ce:	b289      	uxth	r1, r1
 80030d0:	4301      	orrs	r1, r0
 80030d2:	8019      	strh	r1, [r3, #0]
 80030d4:	e743      	b.n	8002f5e <USB_EPStartXfer+0x53a>
 80030d6:	0951      	lsrs	r1, r2, #5
 80030d8:	06d0      	lsls	r0, r2, #27
 80030da:	d100      	bne.n	80030de <USB_EPStartXfer+0x6ba>
 80030dc:	3901      	subs	r1, #1
 80030de:	8818      	ldrh	r0, [r3, #0]
 80030e0:	0289      	lsls	r1, r1, #10
 80030e2:	b289      	uxth	r1, r1
 80030e4:	4308      	orrs	r0, r1
 80030e6:	491b      	ldr	r1, [pc, #108]	@ (8003154 <USB_EPStartXfer+0x730>)
 80030e8:	4301      	orrs	r1, r0
 80030ea:	b289      	uxth	r1, r1
 80030ec:	8019      	strh	r1, [r3, #0]
 80030ee:	e736      	b.n	8002f5e <USB_EPStartXfer+0x53a>
 80030f0:	2a3e      	cmp	r2, #62	@ 0x3e
 80030f2:	d809      	bhi.n	8003108 <USB_EPStartXfer+0x6e4>
 80030f4:	0851      	lsrs	r1, r2, #1
 80030f6:	07d2      	lsls	r2, r2, #31
 80030f8:	d500      	bpl.n	80030fc <USB_EPStartXfer+0x6d8>
 80030fa:	3101      	adds	r1, #1
 80030fc:	881a      	ldrh	r2, [r3, #0]
 80030fe:	0289      	lsls	r1, r1, #10
 8003100:	b289      	uxth	r1, r1
 8003102:	430a      	orrs	r2, r1
 8003104:	801a      	strh	r2, [r3, #0]
 8003106:	e4b3      	b.n	8002a70 <USB_EPStartXfer+0x4c>
 8003108:	0951      	lsrs	r1, r2, #5
 800310a:	06d2      	lsls	r2, r2, #27
 800310c:	d100      	bne.n	8003110 <USB_EPStartXfer+0x6ec>
 800310e:	3901      	subs	r1, #1
 8003110:	881a      	ldrh	r2, [r3, #0]
 8003112:	0289      	lsls	r1, r1, #10
 8003114:	b289      	uxth	r1, r1
 8003116:	4311      	orrs	r1, r2
 8003118:	4a0e      	ldr	r2, [pc, #56]	@ (8003154 <USB_EPStartXfer+0x730>)
 800311a:	430a      	orrs	r2, r1
 800311c:	b292      	uxth	r2, r2
 800311e:	801a      	strh	r2, [r3, #0]
 8003120:	e4a6      	b.n	8002a70 <USB_EPStartXfer+0x4c>
 8003122:	2b01      	cmp	r3, #1
 8003124:	d000      	beq.n	8003128 <USB_EPStartXfer+0x704>
 8003126:	e4a3      	b.n	8002a70 <USB_EPStartXfer+0x4c>
 8003128:	334f      	adds	r3, #79	@ 0x4f
 800312a:	5ae9      	ldrh	r1, [r5, r3]
 800312c:	1869      	adds	r1, r5, r1
 800312e:	7823      	ldrb	r3, [r4, #0]
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	185b      	adds	r3, r3, r1
 8003134:	4906      	ldr	r1, [pc, #24]	@ (8003150 <USB_EPStartXfer+0x72c>)
 8003136:	468c      	mov	ip, r1
 8003138:	4463      	add	r3, ip
 800313a:	b292      	uxth	r2, r2
 800313c:	801a      	strh	r2, [r3, #0]
 800313e:	e497      	b.n	8002a70 <USB_EPStartXfer+0x4c>
        return HAL_ERROR;
 8003140:	2001      	movs	r0, #1
 8003142:	e4a3      	b.n	8002a8c <USB_EPStartXfer+0x68>
 8003144:	00004040 	.word	0x00004040
 8003148:	ffff8f8f 	.word	0xffff8f8f
 800314c:	ffff80c0 	.word	0xffff80c0
 8003150:	00000406 	.word	0x00000406
 8003154:	ffff8000 	.word	0xffff8000

08003158 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003158:	b510      	push	{r4, lr}
  uint32_t n = (uint32_t)wNBytes >> 1;
 800315a:	085c      	lsrs	r4, r3, #1
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800315c:	1812      	adds	r2, r2, r0
 800315e:	2080      	movs	r0, #128	@ 0x80
 8003160:	00c0      	lsls	r0, r0, #3
 8003162:	4684      	mov	ip, r0
 8003164:	4462      	add	r2, ip

  for (count = n; count != 0U; count--)
 8003166:	e006      	b.n	8003176 <USB_ReadPMA+0x1e>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8003168:	8810      	ldrh	r0, [r2, #0]
    pdwVal++;
 800316a:	3202      	adds	r2, #2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800316c:	7008      	strb	r0, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800316e:	0a00      	lsrs	r0, r0, #8
 8003170:	7048      	strb	r0, [r1, #1]
    pBuf++;
 8003172:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 8003174:	3c01      	subs	r4, #1
 8003176:	2c00      	cmp	r4, #0
 8003178:	d1f6      	bne.n	8003168 <USB_ReadPMA+0x10>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800317a:	07db      	lsls	r3, r3, #31
 800317c:	d501      	bpl.n	8003182 <USB_ReadPMA+0x2a>
  {
    RdVal = *pdwVal;
 800317e:	8813      	ldrh	r3, [r2, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8003180:	700b      	strb	r3, [r1, #0]
  }
}
 8003182:	bd10      	pop	{r4, pc}

08003184 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003184:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003186:	23ae      	movs	r3, #174	@ 0xae
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	58c4      	ldr	r4, [r0, r3]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800318c:	3304      	adds	r3, #4
 800318e:	58c3      	ldr	r3, [r0, r3]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00d      	beq.n	80031b0 <USBD_CDC_EP0_RxReady+0x2c>
 8003194:	2280      	movs	r2, #128	@ 0x80
 8003196:	0092      	lsls	r2, r2, #2
 8003198:	5ca0      	ldrb	r0, [r4, r2]
 800319a:	28ff      	cmp	r0, #255	@ 0xff
 800319c:	d008      	beq.n	80031b0 <USBD_CDC_EP0_RxReady+0x2c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800319e:	689b      	ldr	r3, [r3, #8]
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
 80031a0:	4a04      	ldr	r2, [pc, #16]	@ (80031b4 <USBD_CDC_EP0_RxReady+0x30>)
 80031a2:	5ca2      	ldrb	r2, [r4, r2]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80031a4:	0021      	movs	r1, r4
 80031a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80031a8:	2380      	movs	r3, #128	@ 0x80
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	22ff      	movs	r2, #255	@ 0xff
 80031ae:	54e2      	strb	r2, [r4, r3]

  }
  return USBD_OK;
}
 80031b0:	2000      	movs	r0, #0
 80031b2:	bd10      	pop	{r4, pc}
 80031b4:	00000201 	.word	0x00000201

080031b8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80031b8:	2343      	movs	r3, #67	@ 0x43
 80031ba:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
 80031bc:	4800      	ldr	r0, [pc, #0]	@ (80031c0 <USBD_CDC_GetFSCfgDesc+0x8>)
}
 80031be:	4770      	bx	lr
 80031c0:	20000050 	.word	0x20000050

080031c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80031c4:	2343      	movs	r3, #67	@ 0x43
 80031c6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
 80031c8:	4800      	ldr	r0, [pc, #0]	@ (80031cc <USBD_CDC_GetHSCfgDesc+0x8>)
}
 80031ca:	4770      	bx	lr
 80031cc:	20000094 	.word	0x20000094

080031d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80031d0:	2343      	movs	r3, #67	@ 0x43
 80031d2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80031d4:	4800      	ldr	r0, [pc, #0]	@ (80031d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
}
 80031d6:	4770      	bx	lr
 80031d8:	2000000c 	.word	0x2000000c

080031dc <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80031dc:	230a      	movs	r3, #10
 80031de:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80031e0:	4800      	ldr	r0, [pc, #0]	@ (80031e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
}
 80031e2:	4770      	bx	lr
 80031e4:	20000110 	.word	0x20000110

080031e8 <USBD_CDC_DataOut>:
{
 80031e8:	b570      	push	{r4, r5, r6, lr}
 80031ea:	0004      	movs	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80031ec:	25ae      	movs	r5, #174	@ 0xae
 80031ee:	00ad      	lsls	r5, r5, #2
 80031f0:	5946      	ldr	r6, [r0, r5]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80031f2:	f001 f962 	bl	80044ba <USBD_LL_GetRxDataSize>
 80031f6:	2383      	movs	r3, #131	@ 0x83
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	50f0      	str	r0, [r6, r3]
  if (pdev->pClassData != NULL)
 80031fc:	5963      	ldr	r3, [r4, r5]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00b      	beq.n	800321a <USBD_CDC_DataOut+0x32>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003202:	23af      	movs	r3, #175	@ 0xaf
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	58e3      	ldr	r3, [r4, r3]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	2283      	movs	r2, #131	@ 0x83
 800320c:	0092      	lsls	r2, r2, #2
 800320e:	18b1      	adds	r1, r6, r2
 8003210:	3a08      	subs	r2, #8
 8003212:	58b0      	ldr	r0, [r6, r2]
 8003214:	4798      	blx	r3
    return USBD_OK;
 8003216:	2000      	movs	r0, #0
}
 8003218:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800321a:	2002      	movs	r0, #2
 800321c:	e7fc      	b.n	8003218 <USBD_CDC_DataOut+0x30>

0800321e <USBD_CDC_DataIn>:
{
 800321e:	b570      	push	{r4, r5, r6, lr}
 8003220:	0004      	movs	r4, r0
 8003222:	000d      	movs	r5, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003224:	23ae      	movs	r3, #174	@ 0xae
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	58c6      	ldr	r6, [r0, r3]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800322a:	3308      	adds	r3, #8
 800322c:	58c2      	ldr	r2, [r0, r3]
  if (pdev->pClassData != NULL)
 800322e:	2e00      	cmp	r6, #0
 8003230:	d021      	beq.n	8003276 <USBD_CDC_DataIn+0x58>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003232:	008b      	lsls	r3, r1, #2
 8003234:	185b      	adds	r3, r3, r1
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	18c3      	adds	r3, r0, r3
 800323a:	69d8      	ldr	r0, [r3, #28]
 800323c:	2800      	cmp	r0, #0
 800323e:	d008      	beq.n	8003252 <USBD_CDC_DataIn+0x34>
 8003240:	008b      	lsls	r3, r1, #2
 8003242:	185b      	adds	r3, r3, r1
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	18d2      	adds	r2, r2, r3
 8003248:	6a11      	ldr	r1, [r2, #32]
 800324a:	f7fc ffe3 	bl	8000214 <__aeabi_uidivmod>
 800324e:	2900      	cmp	r1, #0
 8003250:	d005      	beq.n	800325e <USBD_CDC_DataIn+0x40>
      hcdc->TxState = 0U;
 8003252:	2385      	movs	r3, #133	@ 0x85
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	2200      	movs	r2, #0
 8003258:	50f2      	str	r2, [r6, r3]
    return USBD_OK;
 800325a:	2000      	movs	r0, #0
}
 800325c:	bd70      	pop	{r4, r5, r6, pc}
      pdev->ep_in[epnum].total_length = 0U;
 800325e:	00ab      	lsls	r3, r5, #2
 8003260:	195b      	adds	r3, r3, r5
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	18e3      	adds	r3, r4, r3
 8003266:	2200      	movs	r2, #0
 8003268:	61da      	str	r2, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800326a:	2300      	movs	r3, #0
 800326c:	0029      	movs	r1, r5
 800326e:	0020      	movs	r0, r4
 8003270:	f001 f911 	bl	8004496 <USBD_LL_Transmit>
 8003274:	e7f1      	b.n	800325a <USBD_CDC_DataIn+0x3c>
    return USBD_FAIL;
 8003276:	2002      	movs	r0, #2
 8003278:	e7f0      	b.n	800325c <USBD_CDC_DataIn+0x3e>
	...

0800327c <USBD_CDC_Setup>:
{
 800327c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800327e:	b083      	sub	sp, #12
 8003280:	0005      	movs	r5, r0
 8003282:	000c      	movs	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003284:	23ae      	movs	r3, #174	@ 0xae
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	58c7      	ldr	r7, [r0, r3]
  uint8_t ifalt = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	466a      	mov	r2, sp
 800328e:	71d3      	strb	r3, [r2, #7]
  uint16_t status_info = 0U;
 8003290:	aa01      	add	r2, sp, #4
 8003292:	8013      	strh	r3, [r2, #0]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003294:	780b      	ldrb	r3, [r1, #0]
 8003296:	2260      	movs	r2, #96	@ 0x60
 8003298:	0016      	movs	r6, r2
 800329a:	401e      	ands	r6, r3
 800329c:	421a      	tst	r2, r3
 800329e:	d02b      	beq.n	80032f8 <USBD_CDC_Setup+0x7c>
 80032a0:	2e20      	cmp	r6, #32
 80032a2:	d15b      	bne.n	800335c <USBD_CDC_Setup+0xe0>
      if (req->wLength)
 80032a4:	88ca      	ldrh	r2, [r1, #6]
 80032a6:	2a00      	cmp	r2, #0
 80032a8:	d01d      	beq.n	80032e6 <USBD_CDC_Setup+0x6a>
        if (req->bmRequest & 0x80U)
 80032aa:	b25b      	sxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	da0d      	bge.n	80032cc <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80032b0:	23af      	movs	r3, #175	@ 0xaf
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	58c3      	ldr	r3, [r0, r3]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	7848      	ldrb	r0, [r1, #1]
 80032ba:	0039      	movs	r1, r7
 80032bc:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80032be:	88e2      	ldrh	r2, [r4, #6]
 80032c0:	0039      	movs	r1, r7
 80032c2:	0028      	movs	r0, r5
 80032c4:	f000 fe45 	bl	8003f52 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80032c8:	2600      	movs	r6, #0
 80032ca:	e04a      	b.n	8003362 <USBD_CDC_Setup+0xe6>
          hcdc->CmdOpCode = req->bRequest;
 80032cc:	784a      	ldrb	r2, [r1, #1]
 80032ce:	2380      	movs	r3, #128	@ 0x80
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	54fa      	strb	r2, [r7, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80032d4:	798a      	ldrb	r2, [r1, #6]
 80032d6:	4b24      	ldr	r3, [pc, #144]	@ (8003368 <USBD_CDC_Setup+0xec>)
 80032d8:	54fa      	strb	r2, [r7, r3]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80032da:	88ca      	ldrh	r2, [r1, #6]
 80032dc:	0039      	movs	r1, r7
 80032de:	f000 fe4e 	bl	8003f7e <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 80032e2:	2600      	movs	r6, #0
 80032e4:	e03d      	b.n	8003362 <USBD_CDC_Setup+0xe6>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80032e6:	23af      	movs	r3, #175	@ 0xaf
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	58c3      	ldr	r3, [r0, r3]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	7848      	ldrb	r0, [r1, #1]
 80032f0:	2200      	movs	r2, #0
 80032f2:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 80032f4:	2600      	movs	r6, #0
 80032f6:	e034      	b.n	8003362 <USBD_CDC_Setup+0xe6>
      switch (req->bRequest)
 80032f8:	784f      	ldrb	r7, [r1, #1]
 80032fa:	2f0a      	cmp	r7, #10
 80032fc:	d012      	beq.n	8003324 <USBD_CDC_Setup+0xa8>
 80032fe:	2f0b      	cmp	r7, #11
 8003300:	d01f      	beq.n	8003342 <USBD_CDC_Setup+0xc6>
 8003302:	2f00      	cmp	r7, #0
 8003304:	d126      	bne.n	8003354 <USBD_CDC_Setup+0xd8>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003306:	23a7      	movs	r3, #167	@ 0xa7
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	5cc3      	ldrb	r3, [r0, r3]
 800330c:	2b03      	cmp	r3, #3
 800330e:	d003      	beq.n	8003318 <USBD_CDC_Setup+0x9c>
            USBD_CtlError(pdev, req);
 8003310:	f000 faca 	bl	80038a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8003314:	2602      	movs	r6, #2
 8003316:	e024      	b.n	8003362 <USBD_CDC_Setup+0xe6>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003318:	2202      	movs	r2, #2
 800331a:	a901      	add	r1, sp, #4
 800331c:	f000 fe19 	bl	8003f52 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003320:	003e      	movs	r6, r7
 8003322:	e01e      	b.n	8003362 <USBD_CDC_Setup+0xe6>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003324:	23a7      	movs	r3, #167	@ 0xa7
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	5cc3      	ldrb	r3, [r0, r3]
 800332a:	2b03      	cmp	r3, #3
 800332c:	d003      	beq.n	8003336 <USBD_CDC_Setup+0xba>
            USBD_CtlError(pdev, req);
 800332e:	f000 fabb 	bl	80038a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8003332:	2602      	movs	r6, #2
 8003334:	e015      	b.n	8003362 <USBD_CDC_Setup+0xe6>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003336:	2201      	movs	r2, #1
 8003338:	466b      	mov	r3, sp
 800333a:	1dd9      	adds	r1, r3, #7
 800333c:	f000 fe09 	bl	8003f52 <USBD_CtlSendData>
 8003340:	e00f      	b.n	8003362 <USBD_CDC_Setup+0xe6>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003342:	23a7      	movs	r3, #167	@ 0xa7
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	5cc3      	ldrb	r3, [r0, r3]
 8003348:	2b03      	cmp	r3, #3
 800334a:	d00a      	beq.n	8003362 <USBD_CDC_Setup+0xe6>
            USBD_CtlError(pdev, req);
 800334c:	f000 faac 	bl	80038a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8003350:	2602      	movs	r6, #2
 8003352:	e006      	b.n	8003362 <USBD_CDC_Setup+0xe6>
          USBD_CtlError(pdev, req);
 8003354:	f000 faa8 	bl	80038a8 <USBD_CtlError>
          ret = USBD_FAIL;
 8003358:	2602      	movs	r6, #2
          break;
 800335a:	e002      	b.n	8003362 <USBD_CDC_Setup+0xe6>
      USBD_CtlError(pdev, req);
 800335c:	f000 faa4 	bl	80038a8 <USBD_CtlError>
      ret = USBD_FAIL;
 8003360:	2602      	movs	r6, #2
}
 8003362:	0030      	movs	r0, r6
 8003364:	b003      	add	sp, #12
 8003366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003368:	00000201 	.word	0x00000201

0800336c <USBD_CDC_DeInit>:
{
 800336c:	b570      	push	{r4, r5, r6, lr}
 800336e:	0004      	movs	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003370:	2181      	movs	r1, #129	@ 0x81
 8003372:	f001 f854 	bl	800441e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003376:	2500      	movs	r5, #0
 8003378:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800337a:	2101      	movs	r1, #1
 800337c:	0020      	movs	r0, r4
 800337e:	f001 f84e 	bl	800441e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003382:	23b6      	movs	r3, #182	@ 0xb6
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	50e5      	str	r5, [r4, r3]
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003388:	2182      	movs	r1, #130	@ 0x82
 800338a:	0020      	movs	r0, r4
 800338c:	f001 f847 	bl	800441e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003390:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 8003392:	23ae      	movs	r3, #174	@ 0xae
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	58e3      	ldr	r3, [r4, r3]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00b      	beq.n	80033b4 <USBD_CDC_DeInit+0x48>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800339c:	23af      	movs	r3, #175	@ 0xaf
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	58e3      	ldr	r3, [r4, r3]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80033a6:	25ae      	movs	r5, #174	@ 0xae
 80033a8:	00ad      	lsls	r5, r5, #2
 80033aa:	5960      	ldr	r0, [r4, r5]
 80033ac:	f001 f890 	bl	80044d0 <USBD_static_free>
    pdev->pClassData = NULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	5163      	str	r3, [r4, r5]
}
 80033b4:	2000      	movs	r0, #0
 80033b6:	bd70      	pop	{r4, r5, r6, pc}

080033b8 <USBD_CDC_Init>:
{
 80033b8:	b570      	push	{r4, r5, r6, lr}
 80033ba:	0004      	movs	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80033bc:	7c03      	ldrb	r3, [r0, #16]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d13a      	bne.n	8003438 <USBD_CDC_Init+0x80>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80033c2:	2680      	movs	r6, #128	@ 0x80
 80033c4:	00b6      	lsls	r6, r6, #2
 80033c6:	0033      	movs	r3, r6
 80033c8:	2202      	movs	r2, #2
 80033ca:	2181      	movs	r1, #129	@ 0x81
 80033cc:	f001 f81b 	bl	8004406 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80033d0:	2501      	movs	r5, #1
 80033d2:	62e5      	str	r5, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80033d4:	0033      	movs	r3, r6
 80033d6:	2202      	movs	r2, #2
 80033d8:	2101      	movs	r1, #1
 80033da:	0020      	movs	r0, r4
 80033dc:	f001 f813 	bl	8004406 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80033e0:	23b6      	movs	r3, #182	@ 0xb6
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	50e5      	str	r5, [r4, r3]
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80033e6:	2308      	movs	r3, #8
 80033e8:	2203      	movs	r2, #3
 80033ea:	2182      	movs	r1, #130	@ 0x82
 80033ec:	0020      	movs	r0, r4
 80033ee:	f001 f80a 	bl	8004406 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80033f2:	2301      	movs	r3, #1
 80033f4:	6423      	str	r3, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80033f6:	2087      	movs	r0, #135	@ 0x87
 80033f8:	0080      	lsls	r0, r0, #2
 80033fa:	f001 f865 	bl	80044c8 <USBD_static_malloc>
 80033fe:	0005      	movs	r5, r0
 8003400:	23ae      	movs	r3, #174	@ 0xae
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	50e0      	str	r0, [r4, r3]
  if (pdev->pClassData == NULL)
 8003406:	2800      	cmp	r0, #0
 8003408:	d032      	beq.n	8003470 <USBD_CDC_Init+0xb8>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800340a:	3304      	adds	r3, #4
 800340c:	58e3      	ldr	r3, [r4, r3]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4798      	blx	r3
    hcdc->TxState = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	2285      	movs	r2, #133	@ 0x85
 8003416:	0092      	lsls	r2, r2, #2
 8003418:	50ab      	str	r3, [r5, r2]
    hcdc->RxState = 0U;
 800341a:	3204      	adds	r2, #4
 800341c:	50ab      	str	r3, [r5, r2]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800341e:	7c26      	ldrb	r6, [r4, #16]
 8003420:	2e00      	cmp	r6, #0
 8003422:	d11a      	bne.n	800345a <USBD_CDC_Init+0xa2>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003424:	3380      	adds	r3, #128	@ 0x80
 8003426:	3a14      	subs	r2, #20
 8003428:	58aa      	ldr	r2, [r5, r2]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	2101      	movs	r1, #1
 800342e:	0020      	movs	r0, r4
 8003430:	f001 f83a 	bl	80044a8 <USBD_LL_PrepareReceive>
}
 8003434:	0030      	movs	r0, r6
 8003436:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003438:	2340      	movs	r3, #64	@ 0x40
 800343a:	2202      	movs	r2, #2
 800343c:	2181      	movs	r1, #129	@ 0x81
 800343e:	f000 ffe2 	bl	8004406 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003442:	2501      	movs	r5, #1
 8003444:	62e5      	str	r5, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003446:	2340      	movs	r3, #64	@ 0x40
 8003448:	2202      	movs	r2, #2
 800344a:	2101      	movs	r1, #1
 800344c:	0020      	movs	r0, r4
 800344e:	f000 ffda 	bl	8004406 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003452:	23b6      	movs	r3, #182	@ 0xb6
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	50e5      	str	r5, [r4, r3]
 8003458:	e7c5      	b.n	80033e6 <USBD_CDC_Init+0x2e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800345a:	2381      	movs	r3, #129	@ 0x81
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	58ea      	ldr	r2, [r5, r3]
 8003460:	3bc5      	subs	r3, #197	@ 0xc5
 8003462:	3bff      	subs	r3, #255	@ 0xff
 8003464:	2101      	movs	r1, #1
 8003466:	0020      	movs	r0, r4
 8003468:	f001 f81e 	bl	80044a8 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800346c:	2600      	movs	r6, #0
 800346e:	e7e1      	b.n	8003434 <USBD_CDC_Init+0x7c>
    ret = 1U;
 8003470:	2601      	movs	r6, #1
 8003472:	e7df      	b.n	8003434 <USBD_CDC_Init+0x7c>

08003474 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8003474:	2900      	cmp	r1, #0
 8003476:	d004      	beq.n	8003482 <USBD_CDC_RegisterInterface+0xe>
  {
    pdev->pUserData = fops;
 8003478:	23af      	movs	r3, #175	@ 0xaf
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	50c1      	str	r1, [r0, r3]
    ret = USBD_OK;
 800347e:	2000      	movs	r0, #0
  }

  return ret;
}
 8003480:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003482:	2002      	movs	r0, #2
 8003484:	e7fc      	b.n	8003480 <USBD_CDC_RegisterInterface+0xc>

08003486 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003486:	23ae      	movs	r3, #174	@ 0xae
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	58c3      	ldr	r3, [r0, r3]

  hcdc->TxBuffer = pbuff;
 800348c:	2082      	movs	r0, #130	@ 0x82
 800348e:	0080      	lsls	r0, r0, #2
 8003490:	5019      	str	r1, [r3, r0]
  hcdc->TxLength = length;
 8003492:	2184      	movs	r1, #132	@ 0x84
 8003494:	0089      	lsls	r1, r1, #2
 8003496:	505a      	str	r2, [r3, r1]

  return USBD_OK;
}
 8003498:	2000      	movs	r0, #0
 800349a:	4770      	bx	lr

0800349c <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800349c:	23ae      	movs	r3, #174	@ 0xae
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	58c2      	ldr	r2, [r0, r3]

  hcdc->RxBuffer = pbuff;
 80034a2:	3bb4      	subs	r3, #180	@ 0xb4
 80034a4:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
}
 80034a6:	2000      	movs	r0, #0
 80034a8:	4770      	bx	lr

080034aa <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80034aa:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80034ac:	23ae      	movs	r3, #174	@ 0xae
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	58c2      	ldr	r2, [r0, r3]

  if (pdev->pClassData != NULL)
 80034b2:	2a00      	cmp	r2, #0
 80034b4:	d016      	beq.n	80034e4 <USBD_CDC_TransmitPacket+0x3a>
  {
    if (hcdc->TxState == 0U)
 80034b6:	3ba4      	subs	r3, #164	@ 0xa4
 80034b8:	58d3      	ldr	r3, [r2, r3]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <USBD_CDC_TransmitPacket+0x18>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 80034be:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 80034c0:	bd10      	pop	{r4, pc}
      hcdc->TxState = 1U;
 80034c2:	2385      	movs	r3, #133	@ 0x85
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	2101      	movs	r1, #1
 80034c8:	50d1      	str	r1, [r2, r3]
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80034ca:	3b04      	subs	r3, #4
 80034cc:	58d3      	ldr	r3, [r2, r3]
 80034ce:	6303      	str	r3, [r0, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2182      	movs	r1, #130	@ 0x82
 80034d4:	0089      	lsls	r1, r1, #2
 80034d6:	5852      	ldr	r2, [r2, r1]
 80034d8:	3988      	subs	r1, #136	@ 0x88
 80034da:	39ff      	subs	r1, #255	@ 0xff
 80034dc:	f000 ffdb 	bl	8004496 <USBD_LL_Transmit>
      return USBD_OK;
 80034e0:	2000      	movs	r0, #0
 80034e2:	e7ed      	b.n	80034c0 <USBD_CDC_TransmitPacket+0x16>
    return USBD_FAIL;
 80034e4:	2002      	movs	r0, #2
 80034e6:	e7eb      	b.n	80034c0 <USBD_CDC_TransmitPacket+0x16>

080034e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80034e8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80034ea:	23ae      	movs	r3, #174	@ 0xae
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	58c2      	ldr	r2, [r0, r3]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80034f0:	2a00      	cmp	r2, #0
 80034f2:	d015      	beq.n	8003520 <USBD_CDC_ReceivePacket+0x38>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80034f4:	7c03      	ldrb	r3, [r0, #16]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d109      	bne.n	800350e <USBD_CDC_ReceivePacket+0x26>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80034fa:	3380      	adds	r3, #128	@ 0x80
 80034fc:	2181      	movs	r1, #129	@ 0x81
 80034fe:	0089      	lsls	r1, r1, #2
 8003500:	5852      	ldr	r2, [r2, r1]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	2101      	movs	r1, #1
 8003506:	f000 ffcf 	bl	80044a8 <USBD_LL_PrepareReceive>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800350a:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 800350c:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800350e:	2381      	movs	r3, #129	@ 0x81
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	58d2      	ldr	r2, [r2, r3]
 8003514:	3bc5      	subs	r3, #197	@ 0xc5
 8003516:	3bff      	subs	r3, #255	@ 0xff
 8003518:	2101      	movs	r1, #1
 800351a:	f000 ffc5 	bl	80044a8 <USBD_LL_PrepareReceive>
 800351e:	e7f4      	b.n	800350a <USBD_CDC_ReceivePacket+0x22>
    return USBD_FAIL;
 8003520:	2002      	movs	r0, #2
 8003522:	e7f3      	b.n	800350c <USBD_CDC_ReceivePacket+0x24>

08003524 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003524:	b510      	push	{r4, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003526:	2800      	cmp	r0, #0
 8003528:	d016      	beq.n	8003558 <USBD_Init+0x34>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800352a:	23ad      	movs	r3, #173	@ 0xad
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	58c3      	ldr	r3, [r0, r3]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <USBD_Init+0x18>
  {
    pdev->pClass = NULL;
 8003534:	23ad      	movs	r3, #173	@ 0xad
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	2400      	movs	r4, #0
 800353a:	50c4      	str	r4, [r0, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800353c:	2900      	cmp	r1, #0
 800353e:	d002      	beq.n	8003546 <USBD_Init+0x22>
  {
    pdev->pDesc = pdesc;
 8003540:	23ac      	movs	r3, #172	@ 0xac
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003546:	23a7      	movs	r3, #167	@ 0xa7
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	2101      	movs	r1, #1
 800354c:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 800354e:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003550:	f000 ff0e 	bl	8004370 <USBD_LL_Init>

  return USBD_OK;
 8003554:	2000      	movs	r0, #0
}
 8003556:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8003558:	2002      	movs	r0, #2
 800355a:	e7fc      	b.n	8003556 <USBD_Init+0x32>

0800355c <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 800355c:	2900      	cmp	r1, #0
 800355e:	d004      	beq.n	800356a <USBD_RegisterClass+0xe>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003560:	23ad      	movs	r3, #173	@ 0xad
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	50c1      	str	r1, [r0, r3]
    status = USBD_OK;
 8003566:	2000      	movs	r0, #0
#endif
    status = USBD_FAIL;
  }

  return status;
}
 8003568:	4770      	bx	lr
    status = USBD_FAIL;
 800356a:	2002      	movs	r0, #2
 800356c:	e7fc      	b.n	8003568 <USBD_RegisterClass+0xc>

0800356e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800356e:	b510      	push	{r4, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003570:	f000 ff40 	bl	80043f4 <USBD_LL_Start>

  return USBD_OK;
}
 8003574:	2000      	movs	r0, #0
 8003576:	bd10      	pop	{r4, pc}

08003578 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003578:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800357a:	23ad      	movs	r3, #173	@ 0xad
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	58c3      	ldr	r3, [r0, r3]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d006      	beq.n	8003592 <USBD_SetClassConfig+0x1a>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4798      	blx	r3
 8003588:	2800      	cmp	r0, #0
 800358a:	d100      	bne.n	800358e <USBD_SetClassConfig+0x16>
      ret = USBD_OK;
    }
  }

  return ret;
}
 800358c:	bd10      	pop	{r4, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800358e:	2002      	movs	r0, #2
 8003590:	e7fc      	b.n	800358c <USBD_SetClassConfig+0x14>
 8003592:	2002      	movs	r0, #2
 8003594:	e7fa      	b.n	800358c <USBD_SetClassConfig+0x14>

08003596 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003596:	b510      	push	{r4, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003598:	23ad      	movs	r3, #173	@ 0xad
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	58c3      	ldr	r3, [r0, r3]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	4798      	blx	r3

  return USBD_OK;
}
 80035a2:	2000      	movs	r0, #0
 80035a4:	bd10      	pop	{r4, pc}
	...

080035a8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80035a8:	b570      	push	{r4, r5, r6, lr}
 80035aa:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80035ac:	23aa      	movs	r3, #170	@ 0xaa
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	18c5      	adds	r5, r0, r3
 80035b2:	0028      	movs	r0, r5
 80035b4:	f000 f964 	bl	8003880 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80035b8:	23a5      	movs	r3, #165	@ 0xa5
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	2201      	movs	r2, #1
 80035be:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80035c0:	4b11      	ldr	r3, [pc, #68]	@ (8003608 <USBD_LL_SetupStage+0x60>)
 80035c2:	5ae2      	ldrh	r2, [r4, r3]
 80035c4:	3b16      	subs	r3, #22
 80035c6:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80035c8:	3310      	adds	r3, #16
 80035ca:	5ce1      	ldrb	r1, [r4, r3]
 80035cc:	231f      	movs	r3, #31
 80035ce:	400b      	ands	r3, r1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d009      	beq.n	80035e8 <USBD_LL_SetupStage+0x40>
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d00c      	beq.n	80035f2 <USBD_LL_SetupStage+0x4a>
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10f      	bne.n	80035fc <USBD_LL_SetupStage+0x54>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80035dc:	0029      	movs	r1, r5
 80035de:	0020      	movs	r0, r4
 80035e0:	f000 fb28 	bl	8003c34 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 80035e4:	2000      	movs	r0, #0
 80035e6:	bd70      	pop	{r4, r5, r6, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80035e8:	0029      	movs	r1, r5
 80035ea:	0020      	movs	r0, r4
 80035ec:	f000 fb58 	bl	8003ca0 <USBD_StdItfReq>
      break;
 80035f0:	e7f8      	b.n	80035e4 <USBD_LL_SetupStage+0x3c>
      USBD_StdEPReq(pdev, &pdev->request);
 80035f2:	0029      	movs	r1, r5
 80035f4:	0020      	movs	r0, r4
 80035f6:	f000 fb86 	bl	8003d06 <USBD_StdEPReq>
      break;
 80035fa:	e7f3      	b.n	80035e4 <USBD_LL_SetupStage+0x3c>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80035fc:	237f      	movs	r3, #127	@ 0x7f
 80035fe:	4399      	bics	r1, r3
 8003600:	0020      	movs	r0, r4
 8003602:	f000 ff15 	bl	8004430 <USBD_LL_StallEP>
      break;
 8003606:	e7ed      	b.n	80035e4 <USBD_LL_SetupStage+0x3c>
 8003608:	000002ae 	.word	0x000002ae

0800360c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	0005      	movs	r5, r0
 8003610:	000c      	movs	r4, r1
 8003612:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003614:	2c00      	cmp	r4, #0
 8003616:	d138      	bne.n	800368a <USBD_LL_DataOutStage+0x7e>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003618:	23a5      	movs	r3, #165	@ 0xa5
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	58c3      	ldr	r3, [r0, r3]
 800361e:	2b03      	cmp	r3, #3
 8003620:	d003      	beq.n	800362a <USBD_LL_DataOutStage+0x1e>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003622:	2b05      	cmp	r3, #5
 8003624:	d028      	beq.n	8003678 <USBD_LL_DataOutStage+0x6c>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003626:	0020      	movs	r0, r4
 8003628:	e03d      	b.n	80036a6 <USBD_LL_DataOutStage+0x9a>
      if (pep->rem_length > pep->maxpacket)
 800362a:	0002      	movs	r2, r0
 800362c:	3255      	adds	r2, #85	@ 0x55
 800362e:	32ff      	adds	r2, #255	@ 0xff
 8003630:	68d3      	ldr	r3, [r2, #12]
 8003632:	6912      	ldr	r2, [r2, #16]
 8003634:	4293      	cmp	r3, r2
 8003636:	d90d      	bls.n	8003654 <USBD_LL_DataOutStage+0x48>
        pep->rem_length -= pep->maxpacket;
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	3055      	adds	r0, #85	@ 0x55
 800363c:	30ff      	adds	r0, #255	@ 0xff
 800363e:	60c3      	str	r3, [r0, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8003640:	429a      	cmp	r2, r3
 8003642:	d905      	bls.n	8003650 <USBD_LL_DataOutStage+0x44>
 8003644:	b29a      	uxth	r2, r3
 8003646:	0028      	movs	r0, r5
 8003648:	f000 fcaa 	bl	8003fa0 <USBD_CtlContinueRx>
  return USBD_OK;
 800364c:	0020      	movs	r0, r4
 800364e:	e02a      	b.n	80036a6 <USBD_LL_DataOutStage+0x9a>
        USBD_CtlContinueRx(pdev, pdata,
 8003650:	b292      	uxth	r2, r2
 8003652:	e7f8      	b.n	8003646 <USBD_LL_DataOutStage+0x3a>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003654:	23ad      	movs	r3, #173	@ 0xad
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	58c3      	ldr	r3, [r0, r3]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d004      	beq.n	800366a <USBD_LL_DataOutStage+0x5e>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003660:	22a7      	movs	r2, #167	@ 0xa7
 8003662:	0092      	lsls	r2, r2, #2
 8003664:	5c82      	ldrb	r2, [r0, r2]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003666:	2a03      	cmp	r2, #3
 8003668:	d004      	beq.n	8003674 <USBD_LL_DataOutStage+0x68>
        USBD_CtlSendStatus(pdev);
 800366a:	0028      	movs	r0, r5
 800366c:	f000 fca0 	bl	8003fb0 <USBD_CtlSendStatus>
  return USBD_OK;
 8003670:	0020      	movs	r0, r4
 8003672:	e018      	b.n	80036a6 <USBD_LL_DataOutStage+0x9a>
          pdev->pClass->EP0_RxReady(pdev);
 8003674:	4798      	blx	r3
 8003676:	e7f8      	b.n	800366a <USBD_LL_DataOutStage+0x5e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003678:	23a5      	movs	r3, #165	@ 0xa5
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	2200      	movs	r2, #0
 800367e:	50c2      	str	r2, [r0, r3]
        USBD_LL_StallEP(pdev, 0U);
 8003680:	2100      	movs	r1, #0
 8003682:	f000 fed5 	bl	8004430 <USBD_LL_StallEP>
  return USBD_OK;
 8003686:	0020      	movs	r0, r4
 8003688:	e00d      	b.n	80036a6 <USBD_LL_DataOutStage+0x9a>
  else if ((pdev->pClass->DataOut != NULL) &&
 800368a:	23ad      	movs	r3, #173	@ 0xad
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	58c3      	ldr	r3, [r0, r3]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d008      	beq.n	80036a8 <USBD_LL_DataOutStage+0x9c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003696:	22a7      	movs	r2, #167	@ 0xa7
 8003698:	0092      	lsls	r2, r2, #2
 800369a:	5c82      	ldrb	r2, [r0, r2]
  else if ((pdev->pClass->DataOut != NULL) &&
 800369c:	2a03      	cmp	r2, #3
 800369e:	d105      	bne.n	80036ac <USBD_LL_DataOutStage+0xa0>
    pdev->pClass->DataOut(pdev, epnum);
 80036a0:	0021      	movs	r1, r4
 80036a2:	4798      	blx	r3
  return USBD_OK;
 80036a4:	2000      	movs	r0, #0
}
 80036a6:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80036a8:	2002      	movs	r0, #2
 80036aa:	e7fc      	b.n	80036a6 <USBD_LL_DataOutStage+0x9a>
 80036ac:	2002      	movs	r0, #2
 80036ae:	e7fa      	b.n	80036a6 <USBD_LL_DataOutStage+0x9a>

080036b0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80036b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b2:	0005      	movs	r5, r0
 80036b4:	000c      	movs	r4, r1
 80036b6:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80036b8:	2c00      	cmp	r4, #0
 80036ba:	d15b      	bne.n	8003774 <USBD_LL_DataInStage+0xc4>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80036bc:	23a5      	movs	r3, #165	@ 0xa5
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	58c3      	ldr	r3, [r0, r3]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d00e      	beq.n	80036e4 <USBD_LL_DataInStage+0x34>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d001      	beq.n	80036ce <USBD_LL_DataInStage+0x1e>
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d103      	bne.n	80036d6 <USBD_LL_DataInStage+0x26>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80036ce:	2180      	movs	r1, #128	@ 0x80
 80036d0:	0028      	movs	r0, r5
 80036d2:	f000 fead 	bl	8004430 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80036d6:	23a8      	movs	r3, #168	@ 0xa8
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	5ceb      	ldrb	r3, [r5, r3]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d043      	beq.n	8003768 <USBD_LL_DataInStage+0xb8>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80036e0:	0020      	movs	r0, r4
}
 80036e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (pep->rem_length > pep->maxpacket)
 80036e4:	6a02      	ldr	r2, [r0, #32]
 80036e6:	6a46      	ldr	r6, [r0, #36]	@ 0x24
 80036e8:	42b2      	cmp	r2, r6
 80036ea:	d820      	bhi.n	800372e <USBD_LL_DataInStage+0x7e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80036ec:	69c7      	ldr	r7, [r0, #28]
 80036ee:	0031      	movs	r1, r6
 80036f0:	0038      	movs	r0, r7
 80036f2:	f7fc fd8f 	bl	8000214 <__aeabi_uidivmod>
 80036f6:	2900      	cmp	r1, #0
 80036f8:	d106      	bne.n	8003708 <USBD_LL_DataInStage+0x58>
 80036fa:	42be      	cmp	r6, r7
 80036fc:	d804      	bhi.n	8003708 <USBD_LL_DataInStage+0x58>
            (pep->total_length < pdev->ep0_data_len))
 80036fe:	23a6      	movs	r3, #166	@ 0xa6
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	58eb      	ldr	r3, [r5, r3]
            (pep->total_length >= pep->maxpacket) &&
 8003704:	429f      	cmp	r7, r3
 8003706:	d31e      	bcc.n	8003746 <USBD_LL_DataInStage+0x96>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003708:	23ad      	movs	r3, #173	@ 0xad
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	58eb      	ldr	r3, [r5, r3]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d004      	beq.n	800371e <USBD_LL_DataInStage+0x6e>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003714:	22a7      	movs	r2, #167	@ 0xa7
 8003716:	0092      	lsls	r2, r2, #2
 8003718:	5caa      	ldrb	r2, [r5, r2]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800371a:	2a03      	cmp	r2, #3
 800371c:	d021      	beq.n	8003762 <USBD_LL_DataInStage+0xb2>
          USBD_LL_StallEP(pdev, 0x80U);
 800371e:	2180      	movs	r1, #128	@ 0x80
 8003720:	0028      	movs	r0, r5
 8003722:	f000 fe85 	bl	8004430 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003726:	0028      	movs	r0, r5
 8003728:	f000 fc4e 	bl	8003fc8 <USBD_CtlReceiveStatus>
 800372c:	e7d3      	b.n	80036d6 <USBD_LL_DataInStage+0x26>
        pep->rem_length -= pep->maxpacket;
 800372e:	1b92      	subs	r2, r2, r6
 8003730:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003732:	b292      	uxth	r2, r2
 8003734:	f000 fc1b 	bl	8003f6e <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003738:	2300      	movs	r3, #0
 800373a:	2200      	movs	r2, #0
 800373c:	2100      	movs	r1, #0
 800373e:	0028      	movs	r0, r5
 8003740:	f000 feb2 	bl	80044a8 <USBD_LL_PrepareReceive>
 8003744:	e7c7      	b.n	80036d6 <USBD_LL_DataInStage+0x26>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003746:	2200      	movs	r2, #0
 8003748:	0028      	movs	r0, r5
 800374a:	f000 fc10 	bl	8003f6e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800374e:	23a6      	movs	r3, #166	@ 0xa6
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	2200      	movs	r2, #0
 8003754:	50ea      	str	r2, [r5, r3]
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003756:	2300      	movs	r3, #0
 8003758:	2100      	movs	r1, #0
 800375a:	0028      	movs	r0, r5
 800375c:	f000 fea4 	bl	80044a8 <USBD_LL_PrepareReceive>
 8003760:	e7b9      	b.n	80036d6 <USBD_LL_DataInStage+0x26>
            pdev->pClass->EP0_TxSent(pdev);
 8003762:	0028      	movs	r0, r5
 8003764:	4798      	blx	r3
 8003766:	e7da      	b.n	800371e <USBD_LL_DataInStage+0x6e>
      pdev->dev_test_mode = 0U;
 8003768:	23a8      	movs	r3, #168	@ 0xa8
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	2200      	movs	r2, #0
 800376e:	54ea      	strb	r2, [r5, r3]
  return USBD_OK;
 8003770:	0020      	movs	r0, r4
 8003772:	e7b6      	b.n	80036e2 <USBD_LL_DataInStage+0x32>
  else if ((pdev->pClass->DataIn != NULL) &&
 8003774:	23ad      	movs	r3, #173	@ 0xad
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	58c3      	ldr	r3, [r0, r3]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <USBD_LL_DataInStage+0xe2>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003780:	22a7      	movs	r2, #167	@ 0xa7
 8003782:	0092      	lsls	r2, r2, #2
 8003784:	5c82      	ldrb	r2, [r0, r2]
  else if ((pdev->pClass->DataIn != NULL) &&
 8003786:	2a03      	cmp	r2, #3
 8003788:	d105      	bne.n	8003796 <USBD_LL_DataInStage+0xe6>
    pdev->pClass->DataIn(pdev, epnum);
 800378a:	0021      	movs	r1, r4
 800378c:	4798      	blx	r3
  return USBD_OK;
 800378e:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8003790:	e7a7      	b.n	80036e2 <USBD_LL_DataInStage+0x32>
    return USBD_FAIL;
 8003792:	2002      	movs	r0, #2
 8003794:	e7a5      	b.n	80036e2 <USBD_LL_DataInStage+0x32>
 8003796:	2002      	movs	r0, #2
 8003798:	e7a3      	b.n	80036e2 <USBD_LL_DataInStage+0x32>

0800379a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800379a:	b570      	push	{r4, r5, r6, lr}
 800379c:	0004      	movs	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800379e:	2340      	movs	r3, #64	@ 0x40
 80037a0:	2200      	movs	r2, #0
 80037a2:	2100      	movs	r1, #0
 80037a4:	f000 fe2f 	bl	8004406 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80037a8:	2501      	movs	r5, #1
 80037aa:	23ac      	movs	r3, #172	@ 0xac
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	50e5      	str	r5, [r4, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80037b0:	2640      	movs	r6, #64	@ 0x40
 80037b2:	330c      	adds	r3, #12
 80037b4:	50e6      	str	r6, [r4, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80037b6:	3b25      	subs	r3, #37	@ 0x25
 80037b8:	3bff      	subs	r3, #255	@ 0xff
 80037ba:	2200      	movs	r2, #0
 80037bc:	2180      	movs	r1, #128	@ 0x80
 80037be:	0020      	movs	r0, r4
 80037c0:	f000 fe21 	bl	8004406 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80037c4:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80037c6:	6266      	str	r6, [r4, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80037c8:	23a7      	movs	r3, #167	@ 0xa7
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	54e5      	strb	r5, [r4, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80037ce:	2300      	movs	r3, #0
 80037d0:	22a5      	movs	r2, #165	@ 0xa5
 80037d2:	0092      	lsls	r2, r2, #2
 80037d4:	50a3      	str	r3, [r4, r2]
  pdev->dev_config = 0U;
 80037d6:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80037d8:	3210      	adds	r2, #16
 80037da:	50a3      	str	r3, [r4, r2]

  if (pdev->pClassData)
 80037dc:	23ae      	movs	r3, #174	@ 0xae
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	58e3      	ldr	r3, [r4, r3]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d006      	beq.n	80037f4 <USBD_LL_Reset+0x5a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80037e6:	23ad      	movs	r3, #173	@ 0xad
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	58e3      	ldr	r3, [r4, r3]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2100      	movs	r1, #0
 80037f0:	0020      	movs	r0, r4
 80037f2:	4798      	blx	r3
  }

  return USBD_OK;
}
 80037f4:	2000      	movs	r0, #0
 80037f6:	bd70      	pop	{r4, r5, r6, pc}

080037f8 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80037f8:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80037fa:	2000      	movs	r0, #0
 80037fc:	4770      	bx	lr
	...

08003800 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003800:	23a7      	movs	r3, #167	@ 0xa7
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	5cc1      	ldrb	r1, [r0, r3]
 8003806:	4a03      	ldr	r2, [pc, #12]	@ (8003814 <USBD_LL_Suspend+0x14>)
 8003808:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800380a:	2204      	movs	r2, #4
 800380c:	54c2      	strb	r2, [r0, r3]

  return USBD_OK;
}
 800380e:	2000      	movs	r0, #0
 8003810:	4770      	bx	lr
 8003812:	46c0      	nop			@ (mov r8, r8)
 8003814:	0000029d 	.word	0x0000029d

08003818 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003818:	23a7      	movs	r3, #167	@ 0xa7
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	5cc3      	ldrb	r3, [r0, r3]
 800381e:	2b04      	cmp	r3, #4
 8003820:	d001      	beq.n	8003826 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8003822:	2000      	movs	r0, #0
 8003824:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8003826:	4b02      	ldr	r3, [pc, #8]	@ (8003830 <USBD_LL_Resume+0x18>)
 8003828:	5cc2      	ldrb	r2, [r0, r3]
 800382a:	3b01      	subs	r3, #1
 800382c:	54c2      	strb	r2, [r0, r3]
 800382e:	e7f8      	b.n	8003822 <USBD_LL_Resume+0xa>
 8003830:	0000029d 	.word	0x0000029d

08003834 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003834:	b510      	push	{r4, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003836:	23a7      	movs	r3, #167	@ 0xa7
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	5cc3      	ldrb	r3, [r0, r3]
 800383c:	2b03      	cmp	r3, #3
 800383e:	d001      	beq.n	8003844 <USBD_LL_SOF+0x10>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8003840:	2000      	movs	r0, #0
 8003842:	bd10      	pop	{r4, pc}
    if (pdev->pClass->SOF != NULL)
 8003844:	23ad      	movs	r3, #173	@ 0xad
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	58c3      	ldr	r3, [r0, r3]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f7      	beq.n	8003840 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
 8003850:	4798      	blx	r3
 8003852:	e7f5      	b.n	8003840 <USBD_LL_SOF+0xc>

08003854 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8003854:	0003      	movs	r3, r0
  uint8_t  len = 0U;
 8003856:	2000      	movs	r0, #0

  while (*buf != '\0')
 8003858:	e002      	b.n	8003860 <USBD_GetLen+0xc>
  {
    len++;
 800385a:	3001      	adds	r0, #1
 800385c:	b2c0      	uxtb	r0, r0
    buf++;
 800385e:	3301      	adds	r3, #1
  while (*buf != '\0')
 8003860:	781a      	ldrb	r2, [r3, #0]
 8003862:	2a00      	cmp	r2, #0
 8003864:	d1f9      	bne.n	800385a <USBD_GetLen+0x6>
  }

  return len;
}
 8003866:	4770      	bx	lr

08003868 <USBD_SetFeature>:
{
 8003868:	b510      	push	{r4, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800386a:	884b      	ldrh	r3, [r1, #2]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d000      	beq.n	8003872 <USBD_SetFeature+0xa>
}
 8003870:	bd10      	pop	{r4, pc}
    pdev->dev_remote_wakeup = 1U;
 8003872:	23a9      	movs	r3, #169	@ 0xa9
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	2201      	movs	r2, #1
 8003878:	50c2      	str	r2, [r0, r3]
    USBD_CtlSendStatus(pdev);
 800387a:	f000 fb99 	bl	8003fb0 <USBD_CtlSendStatus>
}
 800387e:	e7f7      	b.n	8003870 <USBD_SetFeature+0x8>

08003880 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8003880:	780b      	ldrb	r3, [r1, #0]
 8003882:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8003884:	784b      	ldrb	r3, [r1, #1]
 8003886:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8003888:	788b      	ldrb	r3, [r1, #2]
 800388a:	78ca      	ldrb	r2, [r1, #3]
 800388c:	0212      	lsls	r2, r2, #8
 800388e:	189b      	adds	r3, r3, r2
 8003890:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8003892:	790b      	ldrb	r3, [r1, #4]
 8003894:	794a      	ldrb	r2, [r1, #5]
 8003896:	0212      	lsls	r2, r2, #8
 8003898:	189b      	adds	r3, r3, r2
 800389a:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800389c:	798b      	ldrb	r3, [r1, #6]
 800389e:	79ca      	ldrb	r2, [r1, #7]
 80038a0:	0212      	lsls	r2, r2, #8
 80038a2:	189b      	adds	r3, r3, r2
 80038a4:	80c3      	strh	r3, [r0, #6]
}
 80038a6:	4770      	bx	lr

080038a8 <USBD_CtlError>:
{
 80038a8:	b510      	push	{r4, lr}
 80038aa:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80038ac:	2180      	movs	r1, #128	@ 0x80
 80038ae:	f000 fdbf 	bl	8004430 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80038b2:	2100      	movs	r1, #0
 80038b4:	0020      	movs	r0, r4
 80038b6:	f000 fdbb 	bl	8004430 <USBD_LL_StallEP>
}
 80038ba:	bd10      	pop	{r4, pc}

080038bc <USBD_GetDescriptor>:
{
 80038bc:	b530      	push	{r4, r5, lr}
 80038be:	b083      	sub	sp, #12
 80038c0:	0005      	movs	r5, r0
 80038c2:	000c      	movs	r4, r1
  uint16_t len = 0U;
 80038c4:	466b      	mov	r3, sp
 80038c6:	2200      	movs	r2, #0
 80038c8:	80da      	strh	r2, [r3, #6]
  switch (req->wValue >> 8)
 80038ca:	884a      	ldrh	r2, [r1, #2]
 80038cc:	0a13      	lsrs	r3, r2, #8
 80038ce:	2b07      	cmp	r3, #7
 80038d0:	d900      	bls.n	80038d4 <USBD_GetDescriptor+0x18>
 80038d2:	e0b6      	b.n	8003a42 <USBD_GetDescriptor+0x186>
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4965      	ldr	r1, [pc, #404]	@ (8003a6c <USBD_GetDescriptor+0x1b0>)
 80038d8:	58cb      	ldr	r3, [r1, r3]
 80038da:	469f      	mov	pc, r3
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80038dc:	23ac      	movs	r3, #172	@ 0xac
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	58c3      	ldr	r3, [r0, r3]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	7c00      	ldrb	r0, [r0, #16]
 80038e6:	466a      	mov	r2, sp
 80038e8:	1d91      	adds	r1, r2, #6
 80038ea:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80038ec:	466b      	mov	r3, sp
 80038ee:	3306      	adds	r3, #6
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <USBD_GetDescriptor+0x42>
 80038f6:	88e2      	ldrh	r2, [r4, #6]
 80038f8:	2a00      	cmp	r2, #0
 80038fa:	d000      	beq.n	80038fe <USBD_GetDescriptor+0x42>
 80038fc:	e0a6      	b.n	8003a4c <USBD_GetDescriptor+0x190>
    if (req->wLength == 0U)
 80038fe:	88e3      	ldrh	r3, [r4, #6]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d100      	bne.n	8003906 <USBD_GetDescriptor+0x4a>
 8003904:	e0ae      	b.n	8003a64 <USBD_GetDescriptor+0x1a8>
}
 8003906:	b003      	add	sp, #12
 8003908:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800390a:	7c03      	ldrb	r3, [r0, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d109      	bne.n	8003924 <USBD_GetDescriptor+0x68>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003910:	23ad      	movs	r3, #173	@ 0xad
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	58c3      	ldr	r3, [r0, r3]
 8003916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003918:	466a      	mov	r2, sp
 800391a:	1d90      	adds	r0, r2, #6
 800391c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800391e:	2302      	movs	r3, #2
 8003920:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003922:	e7e3      	b.n	80038ec <USBD_GetDescriptor+0x30>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003924:	23ad      	movs	r3, #173	@ 0xad
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	58c3      	ldr	r3, [r0, r3]
 800392a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392c:	466a      	mov	r2, sp
 800392e:	1d90      	adds	r0, r2, #6
 8003930:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003932:	2302      	movs	r3, #2
 8003934:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003936:	e7d9      	b.n	80038ec <USBD_GetDescriptor+0x30>
      switch ((uint8_t)(req->wValue))
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	2a05      	cmp	r2, #5
 800393c:	d85d      	bhi.n	80039fa <USBD_GetDescriptor+0x13e>
 800393e:	0092      	lsls	r2, r2, #2
 8003940:	4b4b      	ldr	r3, [pc, #300]	@ (8003a70 <USBD_GetDescriptor+0x1b4>)
 8003942:	589b      	ldr	r3, [r3, r2]
 8003944:	469f      	mov	pc, r3
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003946:	23ac      	movs	r3, #172	@ 0xac
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	58c3      	ldr	r3, [r0, r3]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d004      	beq.n	800395c <USBD_GetDescriptor+0xa0>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8003952:	7c00      	ldrb	r0, [r0, #16]
 8003954:	466a      	mov	r2, sp
 8003956:	1d91      	adds	r1, r2, #6
 8003958:	4798      	blx	r3
  if (err != 0U)
 800395a:	e7c7      	b.n	80038ec <USBD_GetDescriptor+0x30>
            USBD_CtlError(pdev, req);
 800395c:	0021      	movs	r1, r4
 800395e:	f7ff ffa3 	bl	80038a8 <USBD_CtlError>
  if (err != 0U)
 8003962:	e7d0      	b.n	8003906 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003964:	23ac      	movs	r3, #172	@ 0xac
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	58c3      	ldr	r3, [r0, r3]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d004      	beq.n	800397a <USBD_GetDescriptor+0xbe>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003970:	7c00      	ldrb	r0, [r0, #16]
 8003972:	466a      	mov	r2, sp
 8003974:	1d91      	adds	r1, r2, #6
 8003976:	4798      	blx	r3
  if (err != 0U)
 8003978:	e7b8      	b.n	80038ec <USBD_GetDescriptor+0x30>
            USBD_CtlError(pdev, req);
 800397a:	0021      	movs	r1, r4
 800397c:	f7ff ff94 	bl	80038a8 <USBD_CtlError>
  if (err != 0U)
 8003980:	e7c1      	b.n	8003906 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003982:	23ac      	movs	r3, #172	@ 0xac
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	58c3      	ldr	r3, [r0, r3]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d004      	beq.n	8003998 <USBD_GetDescriptor+0xdc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800398e:	7c00      	ldrb	r0, [r0, #16]
 8003990:	466a      	mov	r2, sp
 8003992:	1d91      	adds	r1, r2, #6
 8003994:	4798      	blx	r3
  if (err != 0U)
 8003996:	e7a9      	b.n	80038ec <USBD_GetDescriptor+0x30>
            USBD_CtlError(pdev, req);
 8003998:	0021      	movs	r1, r4
 800399a:	f7ff ff85 	bl	80038a8 <USBD_CtlError>
  if (err != 0U)
 800399e:	e7b2      	b.n	8003906 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80039a0:	23ac      	movs	r3, #172	@ 0xac
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	58c3      	ldr	r3, [r0, r3]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d004      	beq.n	80039b6 <USBD_GetDescriptor+0xfa>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80039ac:	7c00      	ldrb	r0, [r0, #16]
 80039ae:	466a      	mov	r2, sp
 80039b0:	1d91      	adds	r1, r2, #6
 80039b2:	4798      	blx	r3
  if (err != 0U)
 80039b4:	e79a      	b.n	80038ec <USBD_GetDescriptor+0x30>
            USBD_CtlError(pdev, req);
 80039b6:	0021      	movs	r1, r4
 80039b8:	f7ff ff76 	bl	80038a8 <USBD_CtlError>
  if (err != 0U)
 80039bc:	e7a3      	b.n	8003906 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80039be:	23ac      	movs	r3, #172	@ 0xac
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	58c3      	ldr	r3, [r0, r3]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d004      	beq.n	80039d4 <USBD_GetDescriptor+0x118>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80039ca:	7c00      	ldrb	r0, [r0, #16]
 80039cc:	466a      	mov	r2, sp
 80039ce:	1d91      	adds	r1, r2, #6
 80039d0:	4798      	blx	r3
  if (err != 0U)
 80039d2:	e78b      	b.n	80038ec <USBD_GetDescriptor+0x30>
            USBD_CtlError(pdev, req);
 80039d4:	0021      	movs	r1, r4
 80039d6:	f7ff ff67 	bl	80038a8 <USBD_CtlError>
  if (err != 0U)
 80039da:	e794      	b.n	8003906 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80039dc:	23ac      	movs	r3, #172	@ 0xac
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	58c3      	ldr	r3, [r0, r3]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d004      	beq.n	80039f2 <USBD_GetDescriptor+0x136>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80039e8:	7c00      	ldrb	r0, [r0, #16]
 80039ea:	466a      	mov	r2, sp
 80039ec:	1d91      	adds	r1, r2, #6
 80039ee:	4798      	blx	r3
  if (err != 0U)
 80039f0:	e77c      	b.n	80038ec <USBD_GetDescriptor+0x30>
            USBD_CtlError(pdev, req);
 80039f2:	0021      	movs	r1, r4
 80039f4:	f7ff ff58 	bl	80038a8 <USBD_CtlError>
  if (err != 0U)
 80039f8:	e785      	b.n	8003906 <USBD_GetDescriptor+0x4a>
          USBD_CtlError(pdev, req);
 80039fa:	0021      	movs	r1, r4
 80039fc:	f7ff ff54 	bl	80038a8 <USBD_CtlError>
  if (err != 0U)
 8003a00:	e781      	b.n	8003906 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003a02:	7c03      	ldrb	r3, [r0, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d107      	bne.n	8003a18 <USBD_GetDescriptor+0x15c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003a08:	23ad      	movs	r3, #173	@ 0xad
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	58c3      	ldr	r3, [r0, r3]
 8003a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a10:	466a      	mov	r2, sp
 8003a12:	1d90      	adds	r0, r2, #6
 8003a14:	4798      	blx	r3
  if (err != 0U)
 8003a16:	e769      	b.n	80038ec <USBD_GetDescriptor+0x30>
        USBD_CtlError(pdev, req);
 8003a18:	0021      	movs	r1, r4
 8003a1a:	f7ff ff45 	bl	80038a8 <USBD_CtlError>
  if (err != 0U)
 8003a1e:	e772      	b.n	8003906 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003a20:	7c03      	ldrb	r3, [r0, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <USBD_GetDescriptor+0x17e>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003a26:	23ad      	movs	r3, #173	@ 0xad
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	58c3      	ldr	r3, [r0, r3]
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2e:	466a      	mov	r2, sp
 8003a30:	1d90      	adds	r0, r2, #6
 8003a32:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003a34:	2307      	movs	r3, #7
 8003a36:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003a38:	e758      	b.n	80038ec <USBD_GetDescriptor+0x30>
        USBD_CtlError(pdev, req);
 8003a3a:	0021      	movs	r1, r4
 8003a3c:	f7ff ff34 	bl	80038a8 <USBD_CtlError>
  if (err != 0U)
 8003a40:	e761      	b.n	8003906 <USBD_GetDescriptor+0x4a>
      USBD_CtlError(pdev, req);
 8003a42:	0021      	movs	r1, r4
 8003a44:	0028      	movs	r0, r5
 8003a46:	f7ff ff2f 	bl	80038a8 <USBD_CtlError>
    return;
 8003a4a:	e75c      	b.n	8003906 <USBD_GetDescriptor+0x4a>
      len = MIN(len, req->wLength);
 8003a4c:	1c19      	adds	r1, r3, #0
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d900      	bls.n	8003a54 <USBD_GetDescriptor+0x198>
 8003a52:	1c11      	adds	r1, r2, #0
 8003a54:	b28a      	uxth	r2, r1
 8003a56:	466b      	mov	r3, sp
 8003a58:	80d9      	strh	r1, [r3, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003a5a:	0001      	movs	r1, r0
 8003a5c:	0028      	movs	r0, r5
 8003a5e:	f000 fa78 	bl	8003f52 <USBD_CtlSendData>
 8003a62:	e74c      	b.n	80038fe <USBD_GetDescriptor+0x42>
      (void)USBD_CtlSendStatus(pdev);
 8003a64:	0028      	movs	r0, r5
 8003a66:	f000 faa3 	bl	8003fb0 <USBD_CtlSendStatus>
 8003a6a:	e74c      	b.n	8003906 <USBD_GetDescriptor+0x4a>
 8003a6c:	080045e8 	.word	0x080045e8
 8003a70:	08004608 	.word	0x08004608

08003a74 <USBD_SetAddress>:
{
 8003a74:	b570      	push	{r4, r5, r6, lr}
 8003a76:	0004      	movs	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003a78:	888b      	ldrh	r3, [r1, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d123      	bne.n	8003ac6 <USBD_SetAddress+0x52>
 8003a7e:	88cb      	ldrh	r3, [r1, #6]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d120      	bne.n	8003ac6 <USBD_SetAddress+0x52>
 8003a84:	884b      	ldrh	r3, [r1, #2]
 8003a86:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a88:	d81d      	bhi.n	8003ac6 <USBD_SetAddress+0x52>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003a8a:	257f      	movs	r5, #127	@ 0x7f
 8003a8c:	401d      	ands	r5, r3
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003a8e:	23a7      	movs	r3, #167	@ 0xa7
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	5cc3      	ldrb	r3, [r0, r3]
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d00e      	beq.n	8003ab6 <USBD_SetAddress+0x42>
      pdev->dev_address = dev_addr;
 8003a98:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad0 <USBD_SetAddress+0x5c>)
 8003a9a:	54c5      	strb	r5, [r0, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003a9c:	0029      	movs	r1, r5
 8003a9e:	f000 fcf1 	bl	8004484 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8003aa2:	0020      	movs	r0, r4
 8003aa4:	f000 fa84 	bl	8003fb0 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003aa8:	2d00      	cmp	r5, #0
 8003aaa:	d007      	beq.n	8003abc <USBD_SetAddress+0x48>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003aac:	23a7      	movs	r3, #167	@ 0xa7
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	54e2      	strb	r2, [r4, r3]
 8003ab4:	e00a      	b.n	8003acc <USBD_SetAddress+0x58>
      USBD_CtlError(pdev, req);
 8003ab6:	f7ff fef7 	bl	80038a8 <USBD_CtlError>
 8003aba:	e007      	b.n	8003acc <USBD_SetAddress+0x58>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003abc:	23a7      	movs	r3, #167	@ 0xa7
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	54e2      	strb	r2, [r4, r3]
 8003ac4:	e002      	b.n	8003acc <USBD_SetAddress+0x58>
    USBD_CtlError(pdev, req);
 8003ac6:	0020      	movs	r0, r4
 8003ac8:	f7ff feee 	bl	80038a8 <USBD_CtlError>
}
 8003acc:	bd70      	pop	{r4, r5, r6, pc}
 8003ace:	46c0      	nop			@ (mov r8, r8)
 8003ad0:	0000029e 	.word	0x0000029e

08003ad4 <USBD_SetConfig>:
{
 8003ad4:	b570      	push	{r4, r5, r6, lr}
 8003ad6:	0004      	movs	r4, r0
 8003ad8:	000d      	movs	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 8003ada:	7889      	ldrb	r1, [r1, #2]
 8003adc:	4b2a      	ldr	r3, [pc, #168]	@ (8003b88 <USBD_SetConfig+0xb4>)
 8003ade:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003ae0:	2901      	cmp	r1, #1
 8003ae2:	d80f      	bhi.n	8003b04 <USBD_SetConfig+0x30>
    switch (pdev->dev_state)
 8003ae4:	23a7      	movs	r3, #167	@ 0xa7
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	5cc3      	ldrb	r3, [r0, r3]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d00e      	beq.n	8003b0c <USBD_SetConfig+0x38>
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d023      	beq.n	8003b3a <USBD_SetConfig+0x66>
        USBD_CtlError(pdev, req);
 8003af2:	0029      	movs	r1, r5
 8003af4:	f7ff fed8 	bl	80038a8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8003af8:	4b23      	ldr	r3, [pc, #140]	@ (8003b88 <USBD_SetConfig+0xb4>)
 8003afa:	7819      	ldrb	r1, [r3, #0]
 8003afc:	0020      	movs	r0, r4
 8003afe:	f7ff fd4a 	bl	8003596 <USBD_ClrClassConfig>
        break;
 8003b02:	e002      	b.n	8003b0a <USBD_SetConfig+0x36>
    USBD_CtlError(pdev, req);
 8003b04:	0029      	movs	r1, r5
 8003b06:	f7ff fecf 	bl	80038a8 <USBD_CtlError>
}
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}
        if (cfgidx)
 8003b0c:	2900      	cmp	r1, #0
 8003b0e:	d011      	beq.n	8003b34 <USBD_SetConfig+0x60>
          pdev->dev_config = cfgidx;
 8003b10:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003b12:	23a7      	movs	r3, #167	@ 0xa7
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	2203      	movs	r2, #3
 8003b18:	54c2      	strb	r2, [r0, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003b1a:	f7ff fd2d 	bl	8003578 <USBD_SetClassConfig>
 8003b1e:	2802      	cmp	r0, #2
 8003b20:	d003      	beq.n	8003b2a <USBD_SetConfig+0x56>
          USBD_CtlSendStatus(pdev);
 8003b22:	0020      	movs	r0, r4
 8003b24:	f000 fa44 	bl	8003fb0 <USBD_CtlSendStatus>
 8003b28:	e7ef      	b.n	8003b0a <USBD_SetConfig+0x36>
            USBD_CtlError(pdev, req);
 8003b2a:	0029      	movs	r1, r5
 8003b2c:	0020      	movs	r0, r4
 8003b2e:	f7ff febb 	bl	80038a8 <USBD_CtlError>
            return;
 8003b32:	e7ea      	b.n	8003b0a <USBD_SetConfig+0x36>
          USBD_CtlSendStatus(pdev);
 8003b34:	f000 fa3c 	bl	8003fb0 <USBD_CtlSendStatus>
 8003b38:	e7e7      	b.n	8003b0a <USBD_SetConfig+0x36>
        if (cfgidx == 0U)
 8003b3a:	2900      	cmp	r1, #0
 8003b3c:	d011      	beq.n	8003b62 <USBD_SetConfig+0x8e>
        else if (cfgidx != pdev->dev_config)
 8003b3e:	6843      	ldr	r3, [r0, #4]
 8003b40:	4299      	cmp	r1, r3
 8003b42:	d01e      	beq.n	8003b82 <USBD_SetConfig+0xae>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003b44:	b2d9      	uxtb	r1, r3
 8003b46:	f7ff fd26 	bl	8003596 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8003b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8003b88 <USBD_SetConfig+0xb4>)
 8003b4c:	7819      	ldrb	r1, [r3, #0]
 8003b4e:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003b50:	0020      	movs	r0, r4
 8003b52:	f7ff fd11 	bl	8003578 <USBD_SetClassConfig>
 8003b56:	2802      	cmp	r0, #2
 8003b58:	d00e      	beq.n	8003b78 <USBD_SetConfig+0xa4>
          USBD_CtlSendStatus(pdev);
 8003b5a:	0020      	movs	r0, r4
 8003b5c:	f000 fa28 	bl	8003fb0 <USBD_CtlSendStatus>
 8003b60:	e7d3      	b.n	8003b0a <USBD_SetConfig+0x36>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003b62:	23a7      	movs	r3, #167	@ 0xa7
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	2202      	movs	r2, #2
 8003b68:	54c2      	strb	r2, [r0, r3]
          pdev->dev_config = cfgidx;
 8003b6a:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8003b6c:	f7ff fd13 	bl	8003596 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8003b70:	0020      	movs	r0, r4
 8003b72:	f000 fa1d 	bl	8003fb0 <USBD_CtlSendStatus>
 8003b76:	e7c8      	b.n	8003b0a <USBD_SetConfig+0x36>
            USBD_CtlError(pdev, req);
 8003b78:	0029      	movs	r1, r5
 8003b7a:	0020      	movs	r0, r4
 8003b7c:	f7ff fe94 	bl	80038a8 <USBD_CtlError>
            return;
 8003b80:	e7c3      	b.n	8003b0a <USBD_SetConfig+0x36>
          USBD_CtlSendStatus(pdev);
 8003b82:	f000 fa15 	bl	8003fb0 <USBD_CtlSendStatus>
 8003b86:	e7c0      	b.n	8003b0a <USBD_SetConfig+0x36>
 8003b88:	20000334 	.word	0x20000334

08003b8c <USBD_GetConfig>:
{
 8003b8c:	b510      	push	{r4, lr}
  if (req->wLength != 1U)
 8003b8e:	88cb      	ldrh	r3, [r1, #6]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d10b      	bne.n	8003bac <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8003b94:	23a7      	movs	r3, #167	@ 0xa7
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	5cc3      	ldrb	r3, [r0, r3]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d909      	bls.n	8003bb2 <USBD_GetConfig+0x26>
 8003b9e:	2b03      	cmp	r3, #3
 8003ba0:	d111      	bne.n	8003bc6 <USBD_GetConfig+0x3a>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003ba2:	1d01      	adds	r1, r0, #4
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f000 f9d4 	bl	8003f52 <USBD_CtlSendData>
        break;
 8003baa:	e001      	b.n	8003bb0 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8003bac:	f7ff fe7c 	bl	80038a8 <USBD_CtlError>
}
 8003bb0:	bd10      	pop	{r4, pc}
    switch (pdev->dev_state)
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d007      	beq.n	8003bc6 <USBD_GetConfig+0x3a>
        pdev->dev_default_config = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	6083      	str	r3, [r0, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8003bba:	0001      	movs	r1, r0
 8003bbc:	3108      	adds	r1, #8
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f000 f9c7 	bl	8003f52 <USBD_CtlSendData>
        break;
 8003bc4:	e7f4      	b.n	8003bb0 <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 8003bc6:	f7ff fe6f 	bl	80038a8 <USBD_CtlError>
}
 8003bca:	e7f1      	b.n	8003bb0 <USBD_GetConfig+0x24>

08003bcc <USBD_GetStatus>:
{
 8003bcc:	b510      	push	{r4, lr}
  switch (pdev->dev_state)
 8003bce:	23a7      	movs	r3, #167	@ 0xa7
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	5cc3      	ldrb	r3, [r0, r3]
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d814      	bhi.n	8003c04 <USBD_GetStatus+0x38>
      if (req->wLength != 0x2U)
 8003bda:	88cb      	ldrh	r3, [r1, #6]
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d10e      	bne.n	8003bfe <USBD_GetStatus+0x32>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8003be0:	2301      	movs	r3, #1
 8003be2:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8003be4:	23a9      	movs	r3, #169	@ 0xa9
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	58c3      	ldr	r3, [r0, r3]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <USBD_GetStatus+0x26>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003bf2:	0001      	movs	r1, r0
 8003bf4:	310c      	adds	r1, #12
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f000 f9ab 	bl	8003f52 <USBD_CtlSendData>
}
 8003bfc:	bd10      	pop	{r4, pc}
        USBD_CtlError(pdev, req);
 8003bfe:	f7ff fe53 	bl	80038a8 <USBD_CtlError>
        break;
 8003c02:	e7fb      	b.n	8003bfc <USBD_GetStatus+0x30>
      USBD_CtlError(pdev, req);
 8003c04:	f7ff fe50 	bl	80038a8 <USBD_CtlError>
}
 8003c08:	e7f8      	b.n	8003bfc <USBD_GetStatus+0x30>

08003c0a <USBD_ClrFeature>:
{
 8003c0a:	b510      	push	{r4, lr}
  switch (pdev->dev_state)
 8003c0c:	23a7      	movs	r3, #167	@ 0xa7
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	5cc3      	ldrb	r3, [r0, r3]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d80a      	bhi.n	8003c2e <USBD_ClrFeature+0x24>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003c18:	884b      	ldrh	r3, [r1, #2]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d000      	beq.n	8003c20 <USBD_ClrFeature+0x16>
}
 8003c1e:	bd10      	pop	{r4, pc}
        pdev->dev_remote_wakeup = 0U;
 8003c20:	23a9      	movs	r3, #169	@ 0xa9
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	2200      	movs	r2, #0
 8003c26:	50c2      	str	r2, [r0, r3]
        USBD_CtlSendStatus(pdev);
 8003c28:	f000 f9c2 	bl	8003fb0 <USBD_CtlSendStatus>
 8003c2c:	e7f7      	b.n	8003c1e <USBD_ClrFeature+0x14>
      USBD_CtlError(pdev, req);
 8003c2e:	f7ff fe3b 	bl	80038a8 <USBD_CtlError>
}
 8003c32:	e7f4      	b.n	8003c1e <USBD_ClrFeature+0x14>

08003c34 <USBD_StdDevReq>:
{
 8003c34:	b510      	push	{r4, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003c36:	780a      	ldrb	r2, [r1, #0]
 8003c38:	2360      	movs	r3, #96	@ 0x60
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d006      	beq.n	8003c4e <USBD_StdDevReq+0x1a>
 8003c40:	2b40      	cmp	r3, #64	@ 0x40
 8003c42:	d004      	beq.n	8003c4e <USBD_StdDevReq+0x1a>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d009      	beq.n	8003c5c <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 8003c48:	f7ff fe2e 	bl	80038a8 <USBD_CtlError>
      break;
 8003c4c:	e004      	b.n	8003c58 <USBD_StdDevReq+0x24>
      pdev->pClass->Setup(pdev, req);
 8003c4e:	23ad      	movs	r3, #173	@ 0xad
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	58c3      	ldr	r3, [r0, r3]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	4798      	blx	r3
}
 8003c58:	2000      	movs	r0, #0
 8003c5a:	bd10      	pop	{r4, pc}
      switch (req->bRequest)
 8003c5c:	784b      	ldrb	r3, [r1, #1]
 8003c5e:	2b09      	cmp	r3, #9
 8003c60:	d818      	bhi.n	8003c94 <USBD_StdDevReq+0x60>
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4a0d      	ldr	r2, [pc, #52]	@ (8003c9c <USBD_StdDevReq+0x68>)
 8003c66:	58d3      	ldr	r3, [r2, r3]
 8003c68:	469f      	mov	pc, r3
          USBD_GetDescriptor(pdev, req);
 8003c6a:	f7ff fe27 	bl	80038bc <USBD_GetDescriptor>
          break;
 8003c6e:	e7f3      	b.n	8003c58 <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 8003c70:	f7ff ff00 	bl	8003a74 <USBD_SetAddress>
          break;
 8003c74:	e7f0      	b.n	8003c58 <USBD_StdDevReq+0x24>
          USBD_SetConfig(pdev, req);
 8003c76:	f7ff ff2d 	bl	8003ad4 <USBD_SetConfig>
          break;
 8003c7a:	e7ed      	b.n	8003c58 <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 8003c7c:	f7ff ff86 	bl	8003b8c <USBD_GetConfig>
          break;
 8003c80:	e7ea      	b.n	8003c58 <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 8003c82:	f7ff ffa3 	bl	8003bcc <USBD_GetStatus>
          break;
 8003c86:	e7e7      	b.n	8003c58 <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 8003c88:	f7ff fdee 	bl	8003868 <USBD_SetFeature>
          break;
 8003c8c:	e7e4      	b.n	8003c58 <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 8003c8e:	f7ff ffbc 	bl	8003c0a <USBD_ClrFeature>
          break;
 8003c92:	e7e1      	b.n	8003c58 <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 8003c94:	f7ff fe08 	bl	80038a8 <USBD_CtlError>
          break;
 8003c98:	e7de      	b.n	8003c58 <USBD_StdDevReq+0x24>
 8003c9a:	46c0      	nop			@ (mov r8, r8)
 8003c9c:	08004620 	.word	0x08004620

08003ca0 <USBD_StdItfReq>:
{
 8003ca0:	b570      	push	{r4, r5, r6, lr}
 8003ca2:	0005      	movs	r5, r0
 8003ca4:	000c      	movs	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003ca6:	780a      	ldrb	r2, [r1, #0]
 8003ca8:	2360      	movs	r3, #96	@ 0x60
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	d007      	beq.n	8003cc0 <USBD_StdItfReq+0x20>
 8003cb0:	2b40      	cmp	r3, #64	@ 0x40
 8003cb2:	d005      	beq.n	8003cc0 <USBD_StdItfReq+0x20>
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 8003cb8:	f7ff fdf6 	bl	80038a8 <USBD_CtlError>
}
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8003cc0:	23a7      	movs	r3, #167	@ 0xa7
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	5ceb      	ldrb	r3, [r5, r3]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d817      	bhi.n	8003cfc <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003ccc:	7923      	ldrb	r3, [r4, #4]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d80f      	bhi.n	8003cf2 <USBD_StdItfReq+0x52>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003cd2:	23ad      	movs	r3, #173	@ 0xad
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	58eb      	ldr	r3, [r5, r3]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	0021      	movs	r1, r4
 8003cdc:	0028      	movs	r0, r5
 8003cde:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003ce0:	88e3      	ldrh	r3, [r4, #6]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1ea      	bne.n	8003cbc <USBD_StdItfReq+0x1c>
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	d1e8      	bne.n	8003cbc <USBD_StdItfReq+0x1c>
              USBD_CtlSendStatus(pdev);
 8003cea:	0028      	movs	r0, r5
 8003cec:	f000 f960 	bl	8003fb0 <USBD_CtlSendStatus>
 8003cf0:	e7e4      	b.n	8003cbc <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 8003cf2:	0021      	movs	r1, r4
 8003cf4:	0028      	movs	r0, r5
 8003cf6:	f7ff fdd7 	bl	80038a8 <USBD_CtlError>
 8003cfa:	e7df      	b.n	8003cbc <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 8003cfc:	0021      	movs	r1, r4
 8003cfe:	0028      	movs	r0, r5
 8003d00:	f7ff fdd2 	bl	80038a8 <USBD_CtlError>
          break;
 8003d04:	e7da      	b.n	8003cbc <USBD_StdItfReq+0x1c>

08003d06 <USBD_StdEPReq>:
{
 8003d06:	b570      	push	{r4, r5, r6, lr}
 8003d08:	0005      	movs	r5, r0
  ep_addr  = LOBYTE(req->wIndex);
 8003d0a:	8888      	ldrh	r0, [r1, #4]
 8003d0c:	790a      	ldrb	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003d0e:	780b      	ldrb	r3, [r1, #0]
 8003d10:	2460      	movs	r4, #96	@ 0x60
 8003d12:	401c      	ands	r4, r3
 8003d14:	2c20      	cmp	r4, #32
 8003d16:	d008      	beq.n	8003d2a <USBD_StdEPReq+0x24>
 8003d18:	2c40      	cmp	r4, #64	@ 0x40
 8003d1a:	d006      	beq.n	8003d2a <USBD_StdEPReq+0x24>
 8003d1c:	2c00      	cmp	r4, #0
 8003d1e:	d00d      	beq.n	8003d3c <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 8003d20:	0028      	movs	r0, r5
 8003d22:	f7ff fdc1 	bl	80038a8 <USBD_CtlError>
  return ret;
 8003d26:	2400      	movs	r4, #0
      break;
 8003d28:	e006      	b.n	8003d38 <USBD_StdEPReq+0x32>
      pdev->pClass->Setup(pdev, req);
 8003d2a:	23ad      	movs	r3, #173	@ 0xad
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	58eb      	ldr	r3, [r5, r3]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	0028      	movs	r0, r5
 8003d34:	4798      	blx	r3
  return ret;
 8003d36:	2400      	movs	r4, #0
}
 8003d38:	0020      	movs	r0, r4
 8003d3a:	bd70      	pop	{r4, r5, r6, pc}
      if ((req->bmRequest & 0x60U) == 0x20U)
 8003d3c:	2c20      	cmp	r4, #32
 8003d3e:	d00a      	beq.n	8003d56 <USBD_StdEPReq+0x50>
      switch (req->bRequest)
 8003d40:	784e      	ldrb	r6, [r1, #1]
 8003d42:	2e01      	cmp	r6, #1
 8003d44:	d03e      	beq.n	8003dc4 <USBD_StdEPReq+0xbe>
 8003d46:	2e03      	cmp	r6, #3
 8003d48:	d00d      	beq.n	8003d66 <USBD_StdEPReq+0x60>
 8003d4a:	2e00      	cmp	r6, #0
 8003d4c:	d064      	beq.n	8003e18 <USBD_StdEPReq+0x112>
          USBD_CtlError(pdev, req);
 8003d4e:	0028      	movs	r0, r5
 8003d50:	f7ff fdaa 	bl	80038a8 <USBD_CtlError>
          break;
 8003d54:	e7f0      	b.n	8003d38 <USBD_StdEPReq+0x32>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003d56:	23ad      	movs	r3, #173	@ 0xad
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	58eb      	ldr	r3, [r5, r3]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	0028      	movs	r0, r5
 8003d60:	4798      	blx	r3
 8003d62:	0004      	movs	r4, r0
        return ret;
 8003d64:	e7e8      	b.n	8003d38 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8003d66:	23a7      	movs	r3, #167	@ 0xa7
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	5ceb      	ldrb	r3, [r5, r3]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d005      	beq.n	8003d7c <USBD_StdEPReq+0x76>
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d014      	beq.n	8003d9e <USBD_StdEPReq+0x98>
              USBD_CtlError(pdev, req);
 8003d74:	0028      	movs	r0, r5
 8003d76:	f7ff fd97 	bl	80038a8 <USBD_CtlError>
              break;
 8003d7a:	e7dd      	b.n	8003d38 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003d7c:	2a00      	cmp	r2, #0
 8003d7e:	d001      	beq.n	8003d84 <USBD_StdEPReq+0x7e>
 8003d80:	2a80      	cmp	r2, #128	@ 0x80
 8003d82:	d103      	bne.n	8003d8c <USBD_StdEPReq+0x86>
                USBD_CtlError(pdev, req);
 8003d84:	0028      	movs	r0, r5
 8003d86:	f7ff fd8f 	bl	80038a8 <USBD_CtlError>
 8003d8a:	e7d5      	b.n	8003d38 <USBD_StdEPReq+0x32>
                USBD_LL_StallEP(pdev, ep_addr);
 8003d8c:	0011      	movs	r1, r2
 8003d8e:	0028      	movs	r0, r5
 8003d90:	f000 fb4e 	bl	8004430 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003d94:	2180      	movs	r1, #128	@ 0x80
 8003d96:	0028      	movs	r0, r5
 8003d98:	f000 fb4a 	bl	8004430 <USBD_LL_StallEP>
 8003d9c:	e7cc      	b.n	8003d38 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003d9e:	884b      	ldrh	r3, [r1, #2]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d106      	bne.n	8003db2 <USBD_StdEPReq+0xac>
                if ((ep_addr != 0x00U) &&
 8003da4:	2a00      	cmp	r2, #0
 8003da6:	d004      	beq.n	8003db2 <USBD_StdEPReq+0xac>
 8003da8:	2a80      	cmp	r2, #128	@ 0x80
 8003daa:	d002      	beq.n	8003db2 <USBD_StdEPReq+0xac>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003dac:	88cb      	ldrh	r3, [r1, #6]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <USBD_StdEPReq+0xb4>
              USBD_CtlSendStatus(pdev);
 8003db2:	0028      	movs	r0, r5
 8003db4:	f000 f8fc 	bl	8003fb0 <USBD_CtlSendStatus>
              break;
 8003db8:	e7be      	b.n	8003d38 <USBD_StdEPReq+0x32>
                  USBD_LL_StallEP(pdev, ep_addr);
 8003dba:	0011      	movs	r1, r2
 8003dbc:	0028      	movs	r0, r5
 8003dbe:	f000 fb37 	bl	8004430 <USBD_LL_StallEP>
 8003dc2:	e7f6      	b.n	8003db2 <USBD_StdEPReq+0xac>
          switch (pdev->dev_state)
 8003dc4:	23a7      	movs	r3, #167	@ 0xa7
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	5ceb      	ldrb	r3, [r5, r3]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d005      	beq.n	8003dda <USBD_StdEPReq+0xd4>
 8003dce:	2b03      	cmp	r3, #3
 8003dd0:	d014      	beq.n	8003dfc <USBD_StdEPReq+0xf6>
              USBD_CtlError(pdev, req);
 8003dd2:	0028      	movs	r0, r5
 8003dd4:	f7ff fd68 	bl	80038a8 <USBD_CtlError>
              break;
 8003dd8:	e7ae      	b.n	8003d38 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003dda:	2a00      	cmp	r2, #0
 8003ddc:	d001      	beq.n	8003de2 <USBD_StdEPReq+0xdc>
 8003dde:	2a80      	cmp	r2, #128	@ 0x80
 8003de0:	d103      	bne.n	8003dea <USBD_StdEPReq+0xe4>
                USBD_CtlError(pdev, req);
 8003de2:	0028      	movs	r0, r5
 8003de4:	f7ff fd60 	bl	80038a8 <USBD_CtlError>
 8003de8:	e7a6      	b.n	8003d38 <USBD_StdEPReq+0x32>
                USBD_LL_StallEP(pdev, ep_addr);
 8003dea:	0011      	movs	r1, r2
 8003dec:	0028      	movs	r0, r5
 8003dee:	f000 fb1f 	bl	8004430 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003df2:	2180      	movs	r1, #128	@ 0x80
 8003df4:	0028      	movs	r0, r5
 8003df6:	f000 fb1b 	bl	8004430 <USBD_LL_StallEP>
 8003dfa:	e79d      	b.n	8003d38 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003dfc:	884b      	ldrh	r3, [r1, #2]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d19a      	bne.n	8003d38 <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 8003e02:	0653      	lsls	r3, r2, #25
 8003e04:	d103      	bne.n	8003e0e <USBD_StdEPReq+0x108>
                USBD_CtlSendStatus(pdev);
 8003e06:	0028      	movs	r0, r5
 8003e08:	f000 f8d2 	bl	8003fb0 <USBD_CtlSendStatus>
 8003e0c:	e794      	b.n	8003d38 <USBD_StdEPReq+0x32>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8003e0e:	0011      	movs	r1, r2
 8003e10:	0028      	movs	r0, r5
 8003e12:	f000 fb16 	bl	8004442 <USBD_LL_ClearStallEP>
 8003e16:	e7f6      	b.n	8003e06 <USBD_StdEPReq+0x100>
          switch (pdev->dev_state)
 8003e18:	23a7      	movs	r3, #167	@ 0xa7
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	5ceb      	ldrb	r3, [r5, r3]
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d006      	beq.n	8003e30 <USBD_StdEPReq+0x12a>
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d029      	beq.n	8003e7a <USBD_StdEPReq+0x174>
              USBD_CtlError(pdev, req);
 8003e26:	0028      	movs	r0, r5
 8003e28:	f7ff fd3e 	bl	80038a8 <USBD_CtlError>
  return ret;
 8003e2c:	0034      	movs	r4, r6
              break;
 8003e2e:	e783      	b.n	8003d38 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003e30:	2a00      	cmp	r2, #0
 8003e32:	d001      	beq.n	8003e38 <USBD_StdEPReq+0x132>
 8003e34:	2a80      	cmp	r2, #128	@ 0x80
 8003e36:	d112      	bne.n	8003e5e <USBD_StdEPReq+0x158>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003e38:	0600      	lsls	r0, r0, #24
 8003e3a:	d415      	bmi.n	8003e68 <USBD_StdEPReq+0x162>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003e3c:	237f      	movs	r3, #127	@ 0x7f
 8003e3e:	4013      	ands	r3, r2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003e40:	0099      	lsls	r1, r3, #2
 8003e42:	18c9      	adds	r1, r1, r3
 8003e44:	0089      	lsls	r1, r1, #2
 8003e46:	3151      	adds	r1, #81	@ 0x51
 8003e48:	31ff      	adds	r1, #255	@ 0xff
 8003e4a:	1869      	adds	r1, r5, r1
 8003e4c:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003e52:	2202      	movs	r2, #2
 8003e54:	0028      	movs	r0, r5
 8003e56:	f000 f87c 	bl	8003f52 <USBD_CtlSendData>
  return ret;
 8003e5a:	0034      	movs	r4, r6
              break;
 8003e5c:	e76c      	b.n	8003d38 <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 8003e5e:	0028      	movs	r0, r5
 8003e60:	f7ff fd22 	bl	80038a8 <USBD_CtlError>
  return ret;
 8003e64:	0034      	movs	r4, r6
                break;
 8003e66:	e767      	b.n	8003d38 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003e68:	237f      	movs	r3, #127	@ 0x7f
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	0099      	lsls	r1, r3, #2
 8003e6e:	18c9      	adds	r1, r1, r3
 8003e70:	0089      	lsls	r1, r1, #2
 8003e72:	3110      	adds	r1, #16
 8003e74:	1869      	adds	r1, r5, r1
 8003e76:	3104      	adds	r1, #4
 8003e78:	e7e9      	b.n	8003e4e <USBD_StdEPReq+0x148>
              if ((ep_addr & 0x80U) == 0x80U)
 8003e7a:	b244      	sxtb	r4, r0
 8003e7c:	0600      	lsls	r0, r0, #24
 8003e7e:	d422      	bmi.n	8003ec6 <USBD_StdEPReq+0x1c0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003e80:	200f      	movs	r0, #15
 8003e82:	4010      	ands	r0, r2
 8003e84:	0083      	lsls	r3, r0, #2
 8003e86:	181b      	adds	r3, r3, r0
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	18eb      	adds	r3, r5, r3
 8003e8c:	3359      	adds	r3, #89	@ 0x59
 8003e8e:	33ff      	adds	r3, #255	@ 0xff
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d025      	beq.n	8003ee2 <USBD_StdEPReq+0x1dc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003e96:	2c00      	cmp	r4, #0
 8003e98:	db28      	blt.n	8003eec <USBD_StdEPReq+0x1e6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003e9a:	237f      	movs	r3, #127	@ 0x7f
 8003e9c:	4013      	ands	r3, r2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003e9e:	009c      	lsls	r4, r3, #2
 8003ea0:	18e4      	adds	r4, r4, r3
 8003ea2:	00a4      	lsls	r4, r4, #2
 8003ea4:	3451      	adds	r4, #81	@ 0x51
 8003ea6:	34ff      	adds	r4, #255	@ 0xff
 8003ea8:	192c      	adds	r4, r5, r4
 8003eaa:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003eac:	2a00      	cmp	r2, #0
 8003eae:	d001      	beq.n	8003eb4 <USBD_StdEPReq+0x1ae>
 8003eb0:	2a80      	cmp	r2, #128	@ 0x80
 8003eb2:	d124      	bne.n	8003efe <USBD_StdEPReq+0x1f8>
                pep->status = 0x0000U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	6023      	str	r3, [r4, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003eb8:	2202      	movs	r2, #2
 8003eba:	0021      	movs	r1, r4
 8003ebc:	0028      	movs	r0, r5
 8003ebe:	f000 f848 	bl	8003f52 <USBD_CtlSendData>
  return ret;
 8003ec2:	0034      	movs	r4, r6
              break;
 8003ec4:	e738      	b.n	8003d38 <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003ec6:	200f      	movs	r0, #15
 8003ec8:	4010      	ands	r0, r2
 8003eca:	0083      	lsls	r3, r0, #2
 8003ecc:	181b      	adds	r3, r3, r0
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	18eb      	adds	r3, r5, r3
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1de      	bne.n	8003e96 <USBD_StdEPReq+0x190>
                  USBD_CtlError(pdev, req);
 8003ed8:	0028      	movs	r0, r5
 8003eda:	f7ff fce5 	bl	80038a8 <USBD_CtlError>
  return ret;
 8003ede:	0034      	movs	r4, r6
                  break;
 8003ee0:	e72a      	b.n	8003d38 <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 8003ee2:	0028      	movs	r0, r5
 8003ee4:	f7ff fce0 	bl	80038a8 <USBD_CtlError>
  return ret;
 8003ee8:	0034      	movs	r4, r6
                  break;
 8003eea:	e725      	b.n	8003d38 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003eec:	237f      	movs	r3, #127	@ 0x7f
 8003eee:	4013      	ands	r3, r2
 8003ef0:	009c      	lsls	r4, r3, #2
 8003ef2:	18e4      	adds	r4, r4, r3
 8003ef4:	00a4      	lsls	r4, r4, #2
 8003ef6:	3410      	adds	r4, #16
 8003ef8:	192c      	adds	r4, r5, r4
 8003efa:	3404      	adds	r4, #4
 8003efc:	e7d6      	b.n	8003eac <USBD_StdEPReq+0x1a6>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8003efe:	0011      	movs	r1, r2
 8003f00:	0028      	movs	r0, r5
 8003f02:	f000 faa7 	bl	8004454 <USBD_LL_IsStallEP>
 8003f06:	2800      	cmp	r0, #0
 8003f08:	d002      	beq.n	8003f10 <USBD_StdEPReq+0x20a>
                pep->status = 0x0001U;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	6023      	str	r3, [r4, #0]
 8003f0e:	e7d3      	b.n	8003eb8 <USBD_StdEPReq+0x1b2>
                pep->status = 0x0000U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	6023      	str	r3, [r4, #0]
 8003f14:	e7d0      	b.n	8003eb8 <USBD_StdEPReq+0x1b2>

08003f16 <USBD_GetString>:
{
 8003f16:	b570      	push	{r4, r5, r6, lr}
 8003f18:	0004      	movs	r4, r0
 8003f1a:	000d      	movs	r5, r1
 8003f1c:	0016      	movs	r6, r2
  if (desc != NULL)
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	d016      	beq.n	8003f50 <USBD_GetString+0x3a>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8003f22:	f7ff fc97 	bl	8003854 <USBD_GetLen>
 8003f26:	3001      	adds	r0, #1
 8003f28:	0043      	lsls	r3, r0, #1
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003f2e:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003f30:	2303      	movs	r3, #3
 8003f32:	706b      	strb	r3, [r5, #1]
 8003f34:	3b01      	subs	r3, #1
    while (*desc != '\0')
 8003f36:	e008      	b.n	8003f4a <USBD_GetString+0x34>
      unicode[idx++] = *desc++;
 8003f38:	3401      	adds	r4, #1
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	54e8      	strb	r0, [r5, r3]
      unicode[idx++] =  0U;
 8003f40:	3302      	adds	r3, #2
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	18aa      	adds	r2, r5, r2
 8003f46:	2100      	movs	r1, #0
 8003f48:	7011      	strb	r1, [r2, #0]
    while (*desc != '\0')
 8003f4a:	7820      	ldrb	r0, [r4, #0]
 8003f4c:	2800      	cmp	r0, #0
 8003f4e:	d1f3      	bne.n	8003f38 <USBD_GetString+0x22>
}
 8003f50:	bd70      	pop	{r4, r5, r6, pc}

08003f52 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8003f52:	b510      	push	{r4, lr}
 8003f54:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003f56:	22a5      	movs	r2, #165	@ 0xa5
 8003f58:	0092      	lsls	r2, r2, #2
 8003f5a:	2402      	movs	r4, #2
 8003f5c:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
 8003f5e:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8003f60:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003f62:	000a      	movs	r2, r1
 8003f64:	2100      	movs	r1, #0
 8003f66:	f000 fa96 	bl	8004496 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	bd10      	pop	{r4, pc}

08003f6e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8003f6e:	b510      	push	{r4, lr}
 8003f70:	0013      	movs	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003f72:	000a      	movs	r2, r1
 8003f74:	2100      	movs	r1, #0
 8003f76:	f000 fa8e 	bl	8004496 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	bd10      	pop	{r4, pc}

08003f7e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8003f7e:	b510      	push	{r4, lr}
 8003f80:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003f82:	22a5      	movs	r2, #165	@ 0xa5
 8003f84:	0092      	lsls	r2, r2, #2
 8003f86:	2403      	movs	r4, #3
 8003f88:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8003f8a:	3a39      	subs	r2, #57	@ 0x39
 8003f8c:	3aff      	subs	r2, #255	@ 0xff
 8003f8e:	5083      	str	r3, [r0, r2]
  pdev->ep_out[0].rem_length   = len;
 8003f90:	3204      	adds	r2, #4
 8003f92:	5083      	str	r3, [r0, r2]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003f94:	000a      	movs	r2, r1
 8003f96:	2100      	movs	r1, #0
 8003f98:	f000 fa86 	bl	80044a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	bd10      	pop	{r4, pc}

08003fa0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	0013      	movs	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003fa4:	000a      	movs	r2, r1
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	f000 fa7e 	bl	80044a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003fac:	2000      	movs	r0, #0
 8003fae:	bd10      	pop	{r4, pc}

08003fb0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8003fb0:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003fb2:	23a5      	movs	r3, #165	@ 0xa5
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	2204      	movs	r2, #4
 8003fb8:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003fba:	2300      	movs	r3, #0
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	f000 fa69 	bl	8004496 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	bd10      	pop	{r4, pc}

08003fc8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8003fc8:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003fca:	23a5      	movs	r3, #165	@ 0xa5
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	2205      	movs	r2, #5
 8003fd0:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	f000 fa66 	bl	80044a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003fdc:	2000      	movs	r0, #0
 8003fde:	bd10      	pop	{r4, pc}

08003fe0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003fe0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003fe2:	4912      	ldr	r1, [pc, #72]	@ (800402c <MX_USB_DEVICE_Init+0x4c>)
 8003fe4:	4812      	ldr	r0, [pc, #72]	@ (8004030 <MX_USB_DEVICE_Init+0x50>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f7ff fa9c 	bl	8003524 <USBD_Init>
 8003fec:	2800      	cmp	r0, #0
 8003fee:	d111      	bne.n	8004014 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8003ff0:	4910      	ldr	r1, [pc, #64]	@ (8004034 <MX_USB_DEVICE_Init+0x54>)
 8003ff2:	480f      	ldr	r0, [pc, #60]	@ (8004030 <MX_USB_DEVICE_Init+0x50>)
 8003ff4:	f7ff fab2 	bl	800355c <USBD_RegisterClass>
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	d10e      	bne.n	800401a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8003ffc:	490e      	ldr	r1, [pc, #56]	@ (8004038 <MX_USB_DEVICE_Init+0x58>)
 8003ffe:	480c      	ldr	r0, [pc, #48]	@ (8004030 <MX_USB_DEVICE_Init+0x50>)
 8004000:	f7ff fa38 	bl	8003474 <USBD_CDC_RegisterInterface>
 8004004:	2800      	cmp	r0, #0
 8004006:	d10b      	bne.n	8004020 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004008:	4809      	ldr	r0, [pc, #36]	@ (8004030 <MX_USB_DEVICE_Init+0x50>)
 800400a:	f7ff fab0 	bl	800356e <USBD_Start>
 800400e:	2800      	cmp	r0, #0
 8004010:	d109      	bne.n	8004026 <MX_USB_DEVICE_Init+0x46>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004012:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004014:	f7fc f94a 	bl	80002ac <Error_Handler>
 8004018:	e7ea      	b.n	8003ff0 <MX_USB_DEVICE_Init+0x10>
    Error_Handler();
 800401a:	f7fc f947 	bl	80002ac <Error_Handler>
 800401e:	e7ed      	b.n	8003ffc <MX_USB_DEVICE_Init+0x1c>
    Error_Handler();
 8004020:	f7fc f944 	bl	80002ac <Error_Handler>
 8004024:	e7f0      	b.n	8004008 <MX_USB_DEVICE_Init+0x28>
    Error_Handler();
 8004026:	f7fc f941 	bl	80002ac <Error_Handler>
}
 800402a:	e7f2      	b.n	8004012 <MX_USB_DEVICE_Init+0x32>
 800402c:	20000168 	.word	0x20000168
 8004030:	20000338 	.word	0x20000338
 8004034:	200000d8 	.word	0x200000d8
 8004038:	2000011c 	.word	0x2000011c

0800403c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800403c:	2000      	movs	r0, #0
 800403e:	4770      	bx	lr

08004040 <CDC_Control_FS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8004040:	2820      	cmp	r0, #32
 8004042:	d012      	beq.n	800406a <CDC_Control_FS+0x2a>
 8004044:	2821      	cmp	r0, #33	@ 0x21
 8004046:	d122      	bne.n	800408e <CDC_Control_FS+0x4e>
    	LineCoding.paritytype = pbuf[5];
    	LineCoding.datatype = pbuf[6];
    break;

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t) LineCoding.bitrate;
 8004048:	4b12      	ldr	r3, [pc, #72]	@ (8004094 <CDC_Control_FS+0x54>)
 800404a:	781a      	ldrb	r2, [r3, #0]
 800404c:	700a      	strb	r2, [r1, #0]
    	pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	0a12      	lsrs	r2, r2, #8
 8004052:	704a      	strb	r2, [r1, #1]
    	pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 8004054:	789a      	ldrb	r2, [r3, #2]
 8004056:	708a      	strb	r2, [r1, #2]
    	pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 8004058:	78da      	ldrb	r2, [r3, #3]
 800405a:	70ca      	strb	r2, [r1, #3]
    	pbuf[4] = LineCoding.format;
 800405c:	791a      	ldrb	r2, [r3, #4]
 800405e:	710a      	strb	r2, [r1, #4]
    	pbuf[5] = LineCoding.paritytype;
 8004060:	795a      	ldrb	r2, [r3, #5]
 8004062:	714a      	strb	r2, [r1, #5]
    	pbuf[6] = LineCoding.datatype;
 8004064:	799b      	ldrb	r3, [r3, #6]
 8004066:	718b      	strb	r3, [r1, #6]
    break;
 8004068:	e011      	b.n	800408e <CDC_Control_FS+0x4e>
    	LineCoding.bitrate = (uint32_t) (pbuf[0] | pbuf[1] << 8 | pbuf[2] << 16 | pbuf[3] << 24);
 800406a:	780b      	ldrb	r3, [r1, #0]
 800406c:	784a      	ldrb	r2, [r1, #1]
 800406e:	0212      	lsls	r2, r2, #8
 8004070:	4313      	orrs	r3, r2
 8004072:	788a      	ldrb	r2, [r1, #2]
 8004074:	0412      	lsls	r2, r2, #16
 8004076:	4313      	orrs	r3, r2
 8004078:	78ca      	ldrb	r2, [r1, #3]
 800407a:	0612      	lsls	r2, r2, #24
 800407c:	4313      	orrs	r3, r2
 800407e:	4a05      	ldr	r2, [pc, #20]	@ (8004094 <CDC_Control_FS+0x54>)
 8004080:	6013      	str	r3, [r2, #0]
    	LineCoding.format = pbuf[4];
 8004082:	790b      	ldrb	r3, [r1, #4]
 8004084:	7113      	strb	r3, [r2, #4]
    	LineCoding.paritytype = pbuf[5];
 8004086:	794b      	ldrb	r3, [r1, #5]
 8004088:	7153      	strb	r3, [r2, #5]
    	LineCoding.datatype = pbuf[6];
 800408a:	798b      	ldrb	r3, [r1, #6]
 800408c:	7193      	strb	r3, [r2, #6]
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800408e:	2000      	movs	r0, #0
 8004090:	4770      	bx	lr
 8004092:	46c0      	nop			@ (mov r8, r8)
 8004094:	2000012c 	.word	0x2000012c

08004098 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8004098:	b570      	push	{r4, r5, r6, lr}
 800409a:	0005      	movs	r5, r0
  /* USER CODE BEGIN 6 */

  rxcb(Buf, Len);
 800409c:	f7fc f8f0 	bl	8000280 <rxcb>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80040a0:	4c04      	ldr	r4, [pc, #16]	@ (80040b4 <CDC_Receive_FS+0x1c>)
 80040a2:	0029      	movs	r1, r5
 80040a4:	0020      	movs	r0, r4
 80040a6:	f7ff f9f9 	bl	800349c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80040aa:	0020      	movs	r0, r4
 80040ac:	f7ff fa1c 	bl	80034e8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80040b0:	2000      	movs	r0, #0
 80040b2:	bd70      	pop	{r4, r5, r6, pc}
 80040b4:	20000338 	.word	0x20000338

080040b8 <CDC_Init_FS>:
{
 80040b8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80040ba:	4906      	ldr	r1, [pc, #24]	@ (80040d4 <CDC_Init_FS+0x1c>)
 80040bc:	4c06      	ldr	r4, [pc, #24]	@ (80040d8 <CDC_Init_FS+0x20>)
 80040be:	2200      	movs	r2, #0
 80040c0:	0020      	movs	r0, r4
 80040c2:	f7ff f9e0 	bl	8003486 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80040c6:	4905      	ldr	r1, [pc, #20]	@ (80040dc <CDC_Init_FS+0x24>)
 80040c8:	0020      	movs	r0, r4
 80040ca:	f7ff f9e7 	bl	800349c <USBD_CDC_SetRxBuffer>
}
 80040ce:	2000      	movs	r0, #0
 80040d0:	bd10      	pop	{r4, pc}
 80040d2:	46c0      	nop			@ (mov r8, r8)
 80040d4:	200005fc 	.word	0x200005fc
 80040d8:	20000338 	.word	0x20000338
 80040dc:	200007fc 	.word	0x200007fc

080040e0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80040e0:	b510      	push	{r4, lr}
 80040e2:	000a      	movs	r2, r1
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80040e4:	4b09      	ldr	r3, [pc, #36]	@ (800410c <CDC_Transmit_FS+0x2c>)
 80040e6:	21ae      	movs	r1, #174	@ 0xae
 80040e8:	0089      	lsls	r1, r1, #2
 80040ea:	5859      	ldr	r1, [r3, r1]
  if (hcdc->TxState != 0){
 80040ec:	2385      	movs	r3, #133	@ 0x85
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	58cb      	ldr	r3, [r1, r3]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <CDC_Transmit_FS+0x1a>
    return USBD_BUSY;
 80040f6:	2001      	movs	r0, #1
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 80040f8:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80040fa:	4c04      	ldr	r4, [pc, #16]	@ (800410c <CDC_Transmit_FS+0x2c>)
 80040fc:	0001      	movs	r1, r0
 80040fe:	0020      	movs	r0, r4
 8004100:	f7ff f9c1 	bl	8003486 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004104:	0020      	movs	r0, r4
 8004106:	f7ff f9d0 	bl	80034aa <USBD_CDC_TransmitPacket>
  return result;
 800410a:	e7f5      	b.n	80040f8 <CDC_Transmit_FS+0x18>
 800410c:	20000338 	.word	0x20000338

08004110 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004110:	2312      	movs	r3, #18
 8004112:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
 8004114:	4800      	ldr	r0, [pc, #0]	@ (8004118 <USBD_FS_DeviceDescriptor+0x8>)
}
 8004116:	4770      	bx	lr
 8004118:	20000154 	.word	0x20000154

0800411c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800411c:	2304      	movs	r3, #4
 800411e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
 8004120:	4800      	ldr	r0, [pc, #0]	@ (8004124 <USBD_FS_LangIDStrDescriptor+0x8>)
}
 8004122:	4770      	bx	lr
 8004124:	20000150 	.word	0x20000150

08004128 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004128:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800412a:	2300      	movs	r3, #0
 800412c:	e00a      	b.n	8004144 <IntToUnicode+0x1c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800412e:	005d      	lsls	r5, r3, #1
 8004130:	3437      	adds	r4, #55	@ 0x37
 8004132:	554c      	strb	r4, [r1, r5]
    }

    value = value << 4;
 8004134:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8004136:	005c      	lsls	r4, r3, #1
 8004138:	3401      	adds	r4, #1
 800413a:	190c      	adds	r4, r1, r4
 800413c:	2500      	movs	r5, #0
 800413e:	7025      	strb	r5, [r4, #0]
  for (idx = 0; idx < len; idx++)
 8004140:	3301      	adds	r3, #1
 8004142:	b2db      	uxtb	r3, r3
 8004144:	4293      	cmp	r3, r2
 8004146:	d206      	bcs.n	8004156 <IntToUnicode+0x2e>
    if (((value >> 28)) < 0xA)
 8004148:	0f04      	lsrs	r4, r0, #28
 800414a:	2c09      	cmp	r4, #9
 800414c:	d8ef      	bhi.n	800412e <IntToUnicode+0x6>
      pbuf[2 * idx] = (value >> 28) + '0';
 800414e:	005d      	lsls	r5, r3, #1
 8004150:	3430      	adds	r4, #48	@ 0x30
 8004152:	554c      	strb	r4, [r1, r5]
 8004154:	e7ee      	b.n	8004134 <IntToUnicode+0xc>
  }
}
 8004156:	bd30      	pop	{r4, r5, pc}

08004158 <Get_SerialNum>:
{
 8004158:	b570      	push	{r4, r5, r6, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800415a:	4b0b      	ldr	r3, [pc, #44]	@ (8004188 <Get_SerialNum+0x30>)
 800415c:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800415e:	4b0b      	ldr	r3, [pc, #44]	@ (800418c <Get_SerialNum+0x34>)
 8004160:	681d      	ldr	r5, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004162:	4b0b      	ldr	r3, [pc, #44]	@ (8004190 <Get_SerialNum+0x38>)
 8004164:	681b      	ldr	r3, [r3, #0]
  deviceserial0 += deviceserial2;
 8004166:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 8004168:	2800      	cmp	r0, #0
 800416a:	d100      	bne.n	800416e <Get_SerialNum+0x16>
}
 800416c:	bd70      	pop	{r4, r5, r6, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800416e:	4c09      	ldr	r4, [pc, #36]	@ (8004194 <Get_SerialNum+0x3c>)
 8004170:	2208      	movs	r2, #8
 8004172:	0021      	movs	r1, r4
 8004174:	f7ff ffd8 	bl	8004128 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004178:	0021      	movs	r1, r4
 800417a:	3110      	adds	r1, #16
 800417c:	2204      	movs	r2, #4
 800417e:	0028      	movs	r0, r5
 8004180:	f7ff ffd2 	bl	8004128 <IntToUnicode>
}
 8004184:	e7f2      	b.n	800416c <Get_SerialNum+0x14>
 8004186:	46c0      	nop			@ (mov r8, r8)
 8004188:	1ffff7ac 	.word	0x1ffff7ac
 800418c:	1ffff7b0 	.word	0x1ffff7b0
 8004190:	1ffff7b4 	.word	0x1ffff7b4
 8004194:	20000136 	.word	0x20000136

08004198 <USBD_FS_SerialStrDescriptor>:
{
 8004198:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800419a:	231a      	movs	r3, #26
 800419c:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800419e:	f7ff ffdb 	bl	8004158 <Get_SerialNum>
  return (uint8_t *) USBD_StringSerial;
 80041a2:	4801      	ldr	r0, [pc, #4]	@ (80041a8 <USBD_FS_SerialStrDescriptor+0x10>)
}
 80041a4:	bd10      	pop	{r4, pc}
 80041a6:	46c0      	nop			@ (mov r8, r8)
 80041a8:	20000134 	.word	0x20000134

080041ac <USBD_FS_ProductStrDescriptor>:
{
 80041ac:	b510      	push	{r4, lr}
 80041ae:	000a      	movs	r2, r1
  if(speed == 0)
 80041b0:	2800      	cmp	r0, #0
 80041b2:	d105      	bne.n	80041c0 <USBD_FS_ProductStrDescriptor+0x14>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80041b4:	4905      	ldr	r1, [pc, #20]	@ (80041cc <USBD_FS_ProductStrDescriptor+0x20>)
 80041b6:	4806      	ldr	r0, [pc, #24]	@ (80041d0 <USBD_FS_ProductStrDescriptor+0x24>)
 80041b8:	f7ff fead 	bl	8003f16 <USBD_GetString>
  return USBD_StrDesc;
 80041bc:	4803      	ldr	r0, [pc, #12]	@ (80041cc <USBD_FS_ProductStrDescriptor+0x20>)
}
 80041be:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80041c0:	4902      	ldr	r1, [pc, #8]	@ (80041cc <USBD_FS_ProductStrDescriptor+0x20>)
 80041c2:	4803      	ldr	r0, [pc, #12]	@ (80041d0 <USBD_FS_ProductStrDescriptor+0x24>)
 80041c4:	f7ff fea7 	bl	8003f16 <USBD_GetString>
 80041c8:	e7f8      	b.n	80041bc <USBD_FS_ProductStrDescriptor+0x10>
 80041ca:	46c0      	nop			@ (mov r8, r8)
 80041cc:	200009fc 	.word	0x200009fc
 80041d0:	08004568 	.word	0x08004568

080041d4 <USBD_FS_ManufacturerStrDescriptor>:
{
 80041d4:	b510      	push	{r4, lr}
 80041d6:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80041d8:	4c03      	ldr	r4, [pc, #12]	@ (80041e8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80041da:	4804      	ldr	r0, [pc, #16]	@ (80041ec <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80041dc:	0021      	movs	r1, r4
 80041de:	f7ff fe9a 	bl	8003f16 <USBD_GetString>
}
 80041e2:	0020      	movs	r0, r4
 80041e4:	bd10      	pop	{r4, pc}
 80041e6:	46c0      	nop			@ (mov r8, r8)
 80041e8:	200009fc 	.word	0x200009fc
 80041ec:	08004580 	.word	0x08004580

080041f0 <USBD_FS_ConfigStrDescriptor>:
{
 80041f0:	b510      	push	{r4, lr}
 80041f2:	000a      	movs	r2, r1
  if(speed == USBD_SPEED_HIGH)
 80041f4:	2800      	cmp	r0, #0
 80041f6:	d105      	bne.n	8004204 <USBD_FS_ConfigStrDescriptor+0x14>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80041f8:	4905      	ldr	r1, [pc, #20]	@ (8004210 <USBD_FS_ConfigStrDescriptor+0x20>)
 80041fa:	4806      	ldr	r0, [pc, #24]	@ (8004214 <USBD_FS_ConfigStrDescriptor+0x24>)
 80041fc:	f7ff fe8b 	bl	8003f16 <USBD_GetString>
  return USBD_StrDesc;
 8004200:	4803      	ldr	r0, [pc, #12]	@ (8004210 <USBD_FS_ConfigStrDescriptor+0x20>)
}
 8004202:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004204:	4902      	ldr	r1, [pc, #8]	@ (8004210 <USBD_FS_ConfigStrDescriptor+0x20>)
 8004206:	4803      	ldr	r0, [pc, #12]	@ (8004214 <USBD_FS_ConfigStrDescriptor+0x24>)
 8004208:	f7ff fe85 	bl	8003f16 <USBD_GetString>
 800420c:	e7f8      	b.n	8004200 <USBD_FS_ConfigStrDescriptor+0x10>
 800420e:	46c0      	nop			@ (mov r8, r8)
 8004210:	200009fc 	.word	0x200009fc
 8004214:	08004594 	.word	0x08004594

08004218 <USBD_FS_InterfaceStrDescriptor>:
{
 8004218:	b510      	push	{r4, lr}
 800421a:	000a      	movs	r2, r1
  if(speed == 0)
 800421c:	2800      	cmp	r0, #0
 800421e:	d105      	bne.n	800422c <USBD_FS_InterfaceStrDescriptor+0x14>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004220:	4905      	ldr	r1, [pc, #20]	@ (8004238 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004222:	4806      	ldr	r0, [pc, #24]	@ (800423c <USBD_FS_InterfaceStrDescriptor+0x24>)
 8004224:	f7ff fe77 	bl	8003f16 <USBD_GetString>
  return USBD_StrDesc;
 8004228:	4803      	ldr	r0, [pc, #12]	@ (8004238 <USBD_FS_InterfaceStrDescriptor+0x20>)
}
 800422a:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800422c:	4902      	ldr	r1, [pc, #8]	@ (8004238 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800422e:	4803      	ldr	r0, [pc, #12]	@ (800423c <USBD_FS_InterfaceStrDescriptor+0x24>)
 8004230:	f7ff fe71 	bl	8003f16 <USBD_GetString>
 8004234:	e7f8      	b.n	8004228 <USBD_FS_InterfaceStrDescriptor+0x10>
 8004236:	46c0      	nop			@ (mov r8, r8)
 8004238:	200009fc 	.word	0x200009fc
 800423c:	080045a0 	.word	0x080045a0

08004240 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8004240:	2802      	cmp	r0, #2
 8004242:	d004      	beq.n	800424e <USBD_Get_USB_Status+0xe>
 8004244:	d805      	bhi.n	8004252 <USBD_Get_USB_Status+0x12>
 8004246:	2800      	cmp	r0, #0
 8004248:	d000      	beq.n	800424c <USBD_Get_USB_Status+0xc>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800424a:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800424c:	4770      	bx	lr
      usb_status = USBD_BUSY;
 800424e:	2001      	movs	r0, #1
 8004250:	e7fc      	b.n	800424c <USBD_Get_USB_Status+0xc>
      usb_status = USBD_FAIL;
 8004252:	2002      	movs	r0, #2
 8004254:	e7fa      	b.n	800424c <USBD_Get_USB_Status+0xc>

08004256 <SystemClockConfig_Resume>:
{
 8004256:	b510      	push	{r4, lr}
  SystemClock_Config();
 8004258:	f7fc f846 	bl	80002e8 <SystemClock_Config>
}
 800425c:	bd10      	pop	{r4, pc}
	...

08004260 <HAL_PCD_MspInit>:
{
 8004260:	b500      	push	{lr}
 8004262:	b083      	sub	sp, #12
  if(pcdHandle->Instance==USB)
 8004264:	6802      	ldr	r2, [r0, #0]
 8004266:	4b0c      	ldr	r3, [pc, #48]	@ (8004298 <HAL_PCD_MspInit+0x38>)
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_PCD_MspInit+0x10>
}
 800426c:	b003      	add	sp, #12
 800426e:	bd00      	pop	{pc}
    __HAL_RCC_USB_CLK_ENABLE();
 8004270:	4b0a      	ldr	r3, [pc, #40]	@ (800429c <HAL_PCD_MspInit+0x3c>)
 8004272:	69da      	ldr	r2, [r3, #28]
 8004274:	2180      	movs	r1, #128	@ 0x80
 8004276:	0409      	lsls	r1, r1, #16
 8004278:	430a      	orrs	r2, r1
 800427a:	61da      	str	r2, [r3, #28]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	400b      	ands	r3, r1
 8004280:	9301      	str	r3, [sp, #4]
 8004282:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8004284:	2200      	movs	r2, #0
 8004286:	2100      	movs	r1, #0
 8004288:	201f      	movs	r0, #31
 800428a:	f7fc f9d1 	bl	8000630 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800428e:	201f      	movs	r0, #31
 8004290:	f7fc f9d2 	bl	8000638 <HAL_NVIC_EnableIRQ>
}
 8004294:	e7ea      	b.n	800426c <HAL_PCD_MspInit+0xc>
 8004296:	46c0      	nop			@ (mov r8, r8)
 8004298:	40005c00 	.word	0x40005c00
 800429c:	40021000 	.word	0x40021000

080042a0 <HAL_PCD_SetupStageCallback>:
{
 80042a0:	b510      	push	{r4, lr}
 80042a2:	0001      	movs	r1, r0
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80042a4:	23b6      	movs	r3, #182	@ 0xb6
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	58c0      	ldr	r0, [r0, r3]
 80042aa:	3b40      	subs	r3, #64	@ 0x40
 80042ac:	469c      	mov	ip, r3
 80042ae:	4461      	add	r1, ip
 80042b0:	f7ff f97a 	bl	80035a8 <USBD_LL_SetupStage>
}
 80042b4:	bd10      	pop	{r4, pc}

080042b6 <HAL_PCD_DataOutStageCallback>:
{
 80042b6:	b510      	push	{r4, lr}
 80042b8:	0003      	movs	r3, r0
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80042ba:	22b6      	movs	r2, #182	@ 0xb6
 80042bc:	0092      	lsls	r2, r2, #2
 80042be:	5880      	ldr	r0, [r0, r2]
 80042c0:	008a      	lsls	r2, r1, #2
 80042c2:	1852      	adds	r2, r2, r1
 80042c4:	00d2      	lsls	r2, r2, #3
 80042c6:	189b      	adds	r3, r3, r2
 80042c8:	3365      	adds	r3, #101	@ 0x65
 80042ca:	33ff      	adds	r3, #255	@ 0xff
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	f7ff f99d 	bl	800360c <USBD_LL_DataOutStage>
}
 80042d2:	bd10      	pop	{r4, pc}

080042d4 <HAL_PCD_DataInStageCallback>:
{
 80042d4:	b510      	push	{r4, lr}
 80042d6:	0003      	movs	r3, r0
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80042d8:	22b6      	movs	r2, #182	@ 0xb6
 80042da:	0092      	lsls	r2, r2, #2
 80042dc:	5880      	ldr	r0, [r0, r2]
 80042de:	008a      	lsls	r2, r1, #2
 80042e0:	1852      	adds	r2, r2, r1
 80042e2:	00d2      	lsls	r2, r2, #3
 80042e4:	189b      	adds	r3, r3, r2
 80042e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042e8:	f7ff f9e2 	bl	80036b0 <USBD_LL_DataInStage>
}
 80042ec:	bd10      	pop	{r4, pc}

080042ee <HAL_PCD_SOFCallback>:
{
 80042ee:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80042f0:	23b6      	movs	r3, #182	@ 0xb6
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	58c0      	ldr	r0, [r0, r3]
 80042f6:	f7ff fa9d 	bl	8003834 <USBD_LL_SOF>
}
 80042fa:	bd10      	pop	{r4, pc}

080042fc <HAL_PCD_ResetCallback>:
{
 80042fc:	b570      	push	{r4, r5, r6, lr}
 80042fe:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004300:	7943      	ldrb	r3, [r0, #5]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d109      	bne.n	800431a <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004306:	25b6      	movs	r5, #182	@ 0xb6
 8004308:	00ad      	lsls	r5, r5, #2
 800430a:	5960      	ldr	r0, [r4, r5]
 800430c:	2101      	movs	r1, #1
 800430e:	f7ff fa73 	bl	80037f8 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004312:	5960      	ldr	r0, [r4, r5]
 8004314:	f7ff fa41 	bl	800379a <USBD_LL_Reset>
}
 8004318:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 800431a:	f7fb ffc7 	bl	80002ac <Error_Handler>
 800431e:	e7f2      	b.n	8004306 <HAL_PCD_ResetCallback+0xa>

08004320 <HAL_PCD_SuspendCallback>:
{
 8004320:	b510      	push	{r4, lr}
 8004322:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004324:	23b6      	movs	r3, #182	@ 0xb6
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	58c0      	ldr	r0, [r0, r3]
 800432a:	f7ff fa69 	bl	8003800 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800432e:	7a63      	ldrb	r3, [r4, #9]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d004      	beq.n	800433e <HAL_PCD_SuspendCallback+0x1e>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004334:	4a02      	ldr	r2, [pc, #8]	@ (8004340 <HAL_PCD_SuspendCallback+0x20>)
 8004336:	6913      	ldr	r3, [r2, #16]
 8004338:	2106      	movs	r1, #6
 800433a:	430b      	orrs	r3, r1
 800433c:	6113      	str	r3, [r2, #16]
}
 800433e:	bd10      	pop	{r4, pc}
 8004340:	e000ed00 	.word	0xe000ed00

08004344 <HAL_PCD_ResumeCallback>:
{
 8004344:	b510      	push	{r4, lr}
 8004346:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 8004348:	7a43      	ldrb	r3, [r0, #9]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d105      	bne.n	800435a <HAL_PCD_ResumeCallback+0x16>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800434e:	23b6      	movs	r3, #182	@ 0xb6
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	58e0      	ldr	r0, [r4, r3]
 8004354:	f7ff fa60 	bl	8003818 <USBD_LL_Resume>
}
 8004358:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800435a:	4a04      	ldr	r2, [pc, #16]	@ (800436c <HAL_PCD_ResumeCallback+0x28>)
 800435c:	6913      	ldr	r3, [r2, #16]
 800435e:	2106      	movs	r1, #6
 8004360:	438b      	bics	r3, r1
 8004362:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8004364:	f7ff ff77 	bl	8004256 <SystemClockConfig_Resume>
 8004368:	e7f1      	b.n	800434e <HAL_PCD_ResumeCallback+0xa>
 800436a:	46c0      	nop			@ (mov r8, r8)
 800436c:	e000ed00 	.word	0xe000ed00

08004370 <USBD_LL_Init>:
{
 8004370:	b570      	push	{r4, r5, r6, lr}
 8004372:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 8004374:	481d      	ldr	r0, [pc, #116]	@ (80043ec <USBD_LL_Init+0x7c>)
 8004376:	23b6      	movs	r3, #182	@ 0xb6
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	50c4      	str	r4, [r0, r3]
  pdev->pData = &hpcd_USB_FS;
 800437c:	3b18      	subs	r3, #24
 800437e:	50e0      	str	r0, [r4, r3]
  hpcd_USB_FS.Instance = USB;
 8004380:	4b1b      	ldr	r3, [pc, #108]	@ (80043f0 <USBD_LL_Init+0x80>)
 8004382:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004384:	2308      	movs	r3, #8
 8004386:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004388:	3b06      	subs	r3, #6
 800438a:	7143      	strb	r3, [r0, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800438c:	71c3      	strb	r3, [r0, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800438e:	2300      	movs	r3, #0
 8004390:	7243      	strb	r3, [r0, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004392:	7283      	strb	r3, [r0, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004394:	72c3      	strb	r3, [r0, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004396:	f7fc fab1 	bl	80008fc <HAL_PCD_Init>
 800439a:	2800      	cmp	r0, #0
 800439c:	d123      	bne.n	80043e6 <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800439e:	25b0      	movs	r5, #176	@ 0xb0
 80043a0:	00ad      	lsls	r5, r5, #2
 80043a2:	5960      	ldr	r0, [r4, r5]
 80043a4:	2318      	movs	r3, #24
 80043a6:	2200      	movs	r2, #0
 80043a8:	2100      	movs	r1, #0
 80043aa:	f7fd f9e2 	bl	8001772 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80043ae:	5960      	ldr	r0, [r4, r5]
 80043b0:	2358      	movs	r3, #88	@ 0x58
 80043b2:	2200      	movs	r2, #0
 80043b4:	2180      	movs	r1, #128	@ 0x80
 80043b6:	f7fd f9dc 	bl	8001772 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80043ba:	5960      	ldr	r0, [r4, r5]
 80043bc:	23c0      	movs	r3, #192	@ 0xc0
 80043be:	2200      	movs	r2, #0
 80043c0:	2181      	movs	r1, #129	@ 0x81
 80043c2:	f7fd f9d6 	bl	8001772 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80043c6:	5960      	ldr	r0, [r4, r5]
 80043c8:	2388      	movs	r3, #136	@ 0x88
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	2200      	movs	r2, #0
 80043ce:	2101      	movs	r1, #1
 80043d0:	f7fd f9cf 	bl	8001772 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80043d4:	5960      	ldr	r0, [r4, r5]
 80043d6:	2380      	movs	r3, #128	@ 0x80
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	2200      	movs	r2, #0
 80043dc:	2182      	movs	r1, #130	@ 0x82
 80043de:	f7fd f9c8 	bl	8001772 <HAL_PCDEx_PMAConfig>
}
 80043e2:	2000      	movs	r0, #0
 80043e4:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 80043e6:	f7fb ff61 	bl	80002ac <Error_Handler>
 80043ea:	e7d8      	b.n	800439e <USBD_LL_Init+0x2e>
 80043ec:	20000d1c 	.word	0x20000d1c
 80043f0:	40005c00 	.word	0x40005c00

080043f4 <USBD_LL_Start>:
{
 80043f4:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80043f6:	23b0      	movs	r3, #176	@ 0xb0
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	58c0      	ldr	r0, [r0, r3]
 80043fc:	f7fc fade 	bl	80009bc <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004400:	f7ff ff1e 	bl	8004240 <USBD_Get_USB_Status>
}
 8004404:	bd10      	pop	{r4, pc}

08004406 <USBD_LL_OpenEP>:
{
 8004406:	b510      	push	{r4, lr}
 8004408:	0014      	movs	r4, r2
 800440a:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800440c:	23b0      	movs	r3, #176	@ 0xb0
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	58c0      	ldr	r0, [r0, r3]
 8004412:	0023      	movs	r3, r4
 8004414:	f7fd f85c 	bl	80014d0 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004418:	f7ff ff12 	bl	8004240 <USBD_Get_USB_Status>
}
 800441c:	bd10      	pop	{r4, pc}

0800441e <USBD_LL_CloseEP>:
{
 800441e:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004420:	23b0      	movs	r3, #176	@ 0xb0
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	58c0      	ldr	r0, [r0, r3]
 8004426:	f7fd f891 	bl	800154c <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800442a:	f7ff ff09 	bl	8004240 <USBD_Get_USB_Status>
}
 800442e:	bd10      	pop	{r4, pc}

08004430 <USBD_LL_StallEP>:
{
 8004430:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004432:	23b0      	movs	r3, #176	@ 0xb0
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	58c0      	ldr	r0, [r0, r3]
 8004438:	f7fd f921 	bl	800167e <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800443c:	f7ff ff00 	bl	8004240 <USBD_Get_USB_Status>
}
 8004440:	bd10      	pop	{r4, pc}

08004442 <USBD_LL_ClearStallEP>:
{
 8004442:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004444:	23b0      	movs	r3, #176	@ 0xb0
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	58c0      	ldr	r0, [r0, r3]
 800444a:	f7fd f952 	bl	80016f2 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800444e:	f7ff fef7 	bl	8004240 <USBD_Get_USB_Status>
}
 8004452:	bd10      	pop	{r4, pc}

08004454 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004454:	23b0      	movs	r3, #176	@ 0xb0
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 800445a:	b24a      	sxtb	r2, r1
 800445c:	2a00      	cmp	r2, #0
 800445e:	db09      	blt.n	8004474 <USBD_LL_IsStallEP+0x20>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004460:	227f      	movs	r2, #127	@ 0x7f
 8004462:	4011      	ands	r1, r2
 8004464:	008a      	lsls	r2, r1, #2
 8004466:	1852      	adds	r2, r2, r1
 8004468:	00d2      	lsls	r2, r2, #3
 800446a:	189b      	adds	r3, r3, r2
 800446c:	3353      	adds	r3, #83	@ 0x53
 800446e:	33ff      	adds	r3, #255	@ 0xff
 8004470:	7818      	ldrb	r0, [r3, #0]
}
 8004472:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004474:	227f      	movs	r2, #127	@ 0x7f
 8004476:	4011      	ands	r1, r2
 8004478:	008a      	lsls	r2, r1, #2
 800447a:	1852      	adds	r2, r2, r1
 800447c:	00d2      	lsls	r2, r2, #3
 800447e:	189b      	adds	r3, r3, r2
 8004480:	7c98      	ldrb	r0, [r3, #18]
 8004482:	e7f6      	b.n	8004472 <USBD_LL_IsStallEP+0x1e>

08004484 <USBD_LL_SetUSBAddress>:
{
 8004484:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004486:	23b0      	movs	r3, #176	@ 0xb0
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	58c0      	ldr	r0, [r0, r3]
 800448c:	f7fc ff4a 	bl	8001324 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004490:	f7ff fed6 	bl	8004240 <USBD_Get_USB_Status>
}
 8004494:	bd10      	pop	{r4, pc}

08004496 <USBD_LL_Transmit>:
{
 8004496:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004498:	24b0      	movs	r4, #176	@ 0xb0
 800449a:	00a4      	lsls	r4, r4, #2
 800449c:	5900      	ldr	r0, [r0, r4]
 800449e:	f7fd f8bb 	bl	8001618 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80044a2:	f7ff fecd 	bl	8004240 <USBD_Get_USB_Status>
}
 80044a6:	bd10      	pop	{r4, pc}

080044a8 <USBD_LL_PrepareReceive>:
{
 80044a8:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80044aa:	24b0      	movs	r4, #176	@ 0xb0
 80044ac:	00a4      	lsls	r4, r4, #2
 80044ae:	5900      	ldr	r0, [r0, r4]
 80044b0:	f7fd f883 	bl	80015ba <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80044b4:	f7ff fec4 	bl	8004240 <USBD_Get_USB_Status>
}
 80044b8:	bd10      	pop	{r4, pc}

080044ba <USBD_LL_GetRxDataSize>:
{
 80044ba:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80044bc:	23b0      	movs	r3, #176	@ 0xb0
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	58c0      	ldr	r0, [r0, r3]
 80044c2:	f7fd f89f 	bl	8001604 <HAL_PCD_EP_GetRxCount>
}
 80044c6:	bd10      	pop	{r4, pc}

080044c8 <USBD_static_malloc>:
  return mem;
 80044c8:	4800      	ldr	r0, [pc, #0]	@ (80044cc <USBD_static_malloc+0x4>)
}
 80044ca:	4770      	bx	lr
 80044cc:	20000afc 	.word	0x20000afc

080044d0 <USBD_static_free>:
}
 80044d0:	4770      	bx	lr

080044d2 <memset>:
 80044d2:	0003      	movs	r3, r0
 80044d4:	1882      	adds	r2, r0, r2
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d100      	bne.n	80044dc <memset+0xa>
 80044da:	4770      	bx	lr
 80044dc:	7019      	strb	r1, [r3, #0]
 80044de:	3301      	adds	r3, #1
 80044e0:	e7f9      	b.n	80044d6 <memset+0x4>
	...

080044e4 <__libc_init_array>:
 80044e4:	b570      	push	{r4, r5, r6, lr}
 80044e6:	2600      	movs	r6, #0
 80044e8:	4c0c      	ldr	r4, [pc, #48]	@ (800451c <__libc_init_array+0x38>)
 80044ea:	4d0d      	ldr	r5, [pc, #52]	@ (8004520 <__libc_init_array+0x3c>)
 80044ec:	1b64      	subs	r4, r4, r5
 80044ee:	10a4      	asrs	r4, r4, #2
 80044f0:	42a6      	cmp	r6, r4
 80044f2:	d109      	bne.n	8004508 <__libc_init_array+0x24>
 80044f4:	2600      	movs	r6, #0
 80044f6:	f000 f823 	bl	8004540 <_init>
 80044fa:	4c0a      	ldr	r4, [pc, #40]	@ (8004524 <__libc_init_array+0x40>)
 80044fc:	4d0a      	ldr	r5, [pc, #40]	@ (8004528 <__libc_init_array+0x44>)
 80044fe:	1b64      	subs	r4, r4, r5
 8004500:	10a4      	asrs	r4, r4, #2
 8004502:	42a6      	cmp	r6, r4
 8004504:	d105      	bne.n	8004512 <__libc_init_array+0x2e>
 8004506:	bd70      	pop	{r4, r5, r6, pc}
 8004508:	00b3      	lsls	r3, r6, #2
 800450a:	58eb      	ldr	r3, [r5, r3]
 800450c:	4798      	blx	r3
 800450e:	3601      	adds	r6, #1
 8004510:	e7ee      	b.n	80044f0 <__libc_init_array+0xc>
 8004512:	00b3      	lsls	r3, r6, #2
 8004514:	58eb      	ldr	r3, [r5, r3]
 8004516:	4798      	blx	r3
 8004518:	3601      	adds	r6, #1
 800451a:	e7f2      	b.n	8004502 <__libc_init_array+0x1e>
 800451c:	08004648 	.word	0x08004648
 8004520:	08004648 	.word	0x08004648
 8004524:	0800464c 	.word	0x0800464c
 8004528:	08004648 	.word	0x08004648

0800452c <memcpy>:
 800452c:	2300      	movs	r3, #0
 800452e:	b510      	push	{r4, lr}
 8004530:	429a      	cmp	r2, r3
 8004532:	d100      	bne.n	8004536 <memcpy+0xa>
 8004534:	bd10      	pop	{r4, pc}
 8004536:	5ccc      	ldrb	r4, [r1, r3]
 8004538:	54c4      	strb	r4, [r0, r3]
 800453a:	3301      	adds	r3, #1
 800453c:	e7f8      	b.n	8004530 <memcpy+0x4>
	...

08004540 <_init>:
 8004540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004542:	46c0      	nop			@ (mov r8, r8)
 8004544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004546:	bc08      	pop	{r3}
 8004548:	469e      	mov	lr, r3
 800454a:	4770      	bx	lr

0800454c <_fini>:
 800454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454e:	46c0      	nop			@ (mov r8, r8)
 8004550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004552:	bc08      	pop	{r3}
 8004554:	469e      	mov	lr, r3
 8004556:	4770      	bx	lr
